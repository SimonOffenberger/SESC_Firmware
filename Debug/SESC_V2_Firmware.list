
SESC_V2_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000da94  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d4  0800dc1c  0800dc1c  0001dc1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dff0  0800dff0  000201a4  2**0
                  CONTENTS
  4 .ARM          00000008  0800dff0  0800dff0  0001dff0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dff8  0800dff8  000201a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dff8  0800dff8  0001dff8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dffc  0800dffc  0001dffc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001a4  20000000  0800e000  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000014d8  200001a4  0800e1a4  000201a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000167c  0800e1a4  0002167c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002b444  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000057f6  00000000  00000000  0004b618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001988  00000000  00000000  00050e10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001728  00000000  00000000  00052798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022e1a  00000000  00000000  00053ec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000263c9  00000000  00000000  00076cda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b4877  00000000  00000000  0009d0a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015191a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006878  00000000  00000000  00151970  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001a4 	.word	0x200001a4
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800dc04 	.word	0x0800dc04

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001a8 	.word	0x200001a8
 80001c4:	0800dc04 	.word	0x0800dc04

080001c8 <__aeabi_ldivmod>:
 80001c8:	b97b      	cbnz	r3, 80001ea <__aeabi_ldivmod+0x22>
 80001ca:	b972      	cbnz	r2, 80001ea <__aeabi_ldivmod+0x22>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bfbe      	ittt	lt
 80001d0:	2000      	movlt	r0, #0
 80001d2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80001d6:	e006      	blt.n	80001e6 <__aeabi_ldivmod+0x1e>
 80001d8:	bf08      	it	eq
 80001da:	2800      	cmpeq	r0, #0
 80001dc:	bf1c      	itt	ne
 80001de:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80001e2:	f04f 30ff 	movne.w	r0, #4294967295
 80001e6:	f000 b9a1 	b.w	800052c <__aeabi_idiv0>
 80001ea:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ee:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f2:	2900      	cmp	r1, #0
 80001f4:	db09      	blt.n	800020a <__aeabi_ldivmod+0x42>
 80001f6:	2b00      	cmp	r3, #0
 80001f8:	db1a      	blt.n	8000230 <__aeabi_ldivmod+0x68>
 80001fa:	f000 f835 	bl	8000268 <__udivmoddi4>
 80001fe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000202:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000206:	b004      	add	sp, #16
 8000208:	4770      	bx	lr
 800020a:	4240      	negs	r0, r0
 800020c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000210:	2b00      	cmp	r3, #0
 8000212:	db1b      	blt.n	800024c <__aeabi_ldivmod+0x84>
 8000214:	f000 f828 	bl	8000268 <__udivmoddi4>
 8000218:	f8dd e004 	ldr.w	lr, [sp, #4]
 800021c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000220:	b004      	add	sp, #16
 8000222:	4240      	negs	r0, r0
 8000224:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000228:	4252      	negs	r2, r2
 800022a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800022e:	4770      	bx	lr
 8000230:	4252      	negs	r2, r2
 8000232:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000236:	f000 f817 	bl	8000268 <__udivmoddi4>
 800023a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800023e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000242:	b004      	add	sp, #16
 8000244:	4240      	negs	r0, r0
 8000246:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024a:	4770      	bx	lr
 800024c:	4252      	negs	r2, r2
 800024e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000252:	f000 f809 	bl	8000268 <__udivmoddi4>
 8000256:	f8dd e004 	ldr.w	lr, [sp, #4]
 800025a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025e:	b004      	add	sp, #16
 8000260:	4252      	negs	r2, r2
 8000262:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	468c      	mov	ip, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	f040 8083 	bne.w	800037e <__udivmoddi4+0x116>
 8000278:	428a      	cmp	r2, r1
 800027a:	4617      	mov	r7, r2
 800027c:	d947      	bls.n	800030e <__udivmoddi4+0xa6>
 800027e:	fab2 f282 	clz	r2, r2
 8000282:	b142      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000284:	f1c2 0020 	rsb	r0, r2, #32
 8000288:	fa24 f000 	lsr.w	r0, r4, r0
 800028c:	4091      	lsls	r1, r2
 800028e:	4097      	lsls	r7, r2
 8000290:	ea40 0c01 	orr.w	ip, r0, r1
 8000294:	4094      	lsls	r4, r2
 8000296:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	fbbc f6f8 	udiv	r6, ip, r8
 80002a0:	fa1f fe87 	uxth.w	lr, r7
 80002a4:	fb08 c116 	mls	r1, r8, r6, ip
 80002a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ac:	fb06 f10e 	mul.w	r1, r6, lr
 80002b0:	4299      	cmp	r1, r3
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x60>
 80002b4:	18fb      	adds	r3, r7, r3
 80002b6:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ba:	f080 8119 	bcs.w	80004f0 <__udivmoddi4+0x288>
 80002be:	4299      	cmp	r1, r3
 80002c0:	f240 8116 	bls.w	80004f0 <__udivmoddi4+0x288>
 80002c4:	3e02      	subs	r6, #2
 80002c6:	443b      	add	r3, r7
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d0:	fb08 3310 	mls	r3, r8, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002dc:	45a6      	cmp	lr, r4
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x8c>
 80002e0:	193c      	adds	r4, r7, r4
 80002e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e6:	f080 8105 	bcs.w	80004f4 <__udivmoddi4+0x28c>
 80002ea:	45a6      	cmp	lr, r4
 80002ec:	f240 8102 	bls.w	80004f4 <__udivmoddi4+0x28c>
 80002f0:	3802      	subs	r0, #2
 80002f2:	443c      	add	r4, r7
 80002f4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002f8:	eba4 040e 	sub.w	r4, r4, lr
 80002fc:	2600      	movs	r6, #0
 80002fe:	b11d      	cbz	r5, 8000308 <__udivmoddi4+0xa0>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c5 4300 	strd	r4, r3, [r5]
 8000308:	4631      	mov	r1, r6
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	b902      	cbnz	r2, 8000312 <__udivmoddi4+0xaa>
 8000310:	deff      	udf	#255	; 0xff
 8000312:	fab2 f282 	clz	r2, r2
 8000316:	2a00      	cmp	r2, #0
 8000318:	d150      	bne.n	80003bc <__udivmoddi4+0x154>
 800031a:	1bcb      	subs	r3, r1, r7
 800031c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000320:	fa1f f887 	uxth.w	r8, r7
 8000324:	2601      	movs	r6, #1
 8000326:	fbb3 fcfe 	udiv	ip, r3, lr
 800032a:	0c21      	lsrs	r1, r4, #16
 800032c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000330:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000334:	fb08 f30c 	mul.w	r3, r8, ip
 8000338:	428b      	cmp	r3, r1
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0xe4>
 800033c:	1879      	adds	r1, r7, r1
 800033e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0xe2>
 8000344:	428b      	cmp	r3, r1
 8000346:	f200 80e9 	bhi.w	800051c <__udivmoddi4+0x2b4>
 800034a:	4684      	mov	ip, r0
 800034c:	1ac9      	subs	r1, r1, r3
 800034e:	b2a3      	uxth	r3, r4
 8000350:	fbb1 f0fe 	udiv	r0, r1, lr
 8000354:	fb0e 1110 	mls	r1, lr, r0, r1
 8000358:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800035c:	fb08 f800 	mul.w	r8, r8, r0
 8000360:	45a0      	cmp	r8, r4
 8000362:	d907      	bls.n	8000374 <__udivmoddi4+0x10c>
 8000364:	193c      	adds	r4, r7, r4
 8000366:	f100 33ff 	add.w	r3, r0, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x10a>
 800036c:	45a0      	cmp	r8, r4
 800036e:	f200 80d9 	bhi.w	8000524 <__udivmoddi4+0x2bc>
 8000372:	4618      	mov	r0, r3
 8000374:	eba4 0408 	sub.w	r4, r4, r8
 8000378:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800037c:	e7bf      	b.n	80002fe <__udivmoddi4+0x96>
 800037e:	428b      	cmp	r3, r1
 8000380:	d909      	bls.n	8000396 <__udivmoddi4+0x12e>
 8000382:	2d00      	cmp	r5, #0
 8000384:	f000 80b1 	beq.w	80004ea <__udivmoddi4+0x282>
 8000388:	2600      	movs	r6, #0
 800038a:	e9c5 0100 	strd	r0, r1, [r5]
 800038e:	4630      	mov	r0, r6
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	fab3 f683 	clz	r6, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d14a      	bne.n	8000434 <__udivmoddi4+0x1cc>
 800039e:	428b      	cmp	r3, r1
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0x140>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 80b8 	bhi.w	8000518 <__udivmoddi4+0x2b0>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb61 0103 	sbc.w	r1, r1, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	468c      	mov	ip, r1
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0a8      	beq.n	8000308 <__udivmoddi4+0xa0>
 80003b6:	e9c5 4c00 	strd	r4, ip, [r5]
 80003ba:	e7a5      	b.n	8000308 <__udivmoddi4+0xa0>
 80003bc:	f1c2 0320 	rsb	r3, r2, #32
 80003c0:	fa20 f603 	lsr.w	r6, r0, r3
 80003c4:	4097      	lsls	r7, r2
 80003c6:	fa01 f002 	lsl.w	r0, r1, r2
 80003ca:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003ce:	40d9      	lsrs	r1, r3
 80003d0:	4330      	orrs	r0, r6
 80003d2:	0c03      	lsrs	r3, r0, #16
 80003d4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003d8:	fa1f f887 	uxth.w	r8, r7
 80003dc:	fb0e 1116 	mls	r1, lr, r6, r1
 80003e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003e4:	fb06 f108 	mul.w	r1, r6, r8
 80003e8:	4299      	cmp	r1, r3
 80003ea:	fa04 f402 	lsl.w	r4, r4, r2
 80003ee:	d909      	bls.n	8000404 <__udivmoddi4+0x19c>
 80003f0:	18fb      	adds	r3, r7, r3
 80003f2:	f106 3cff 	add.w	ip, r6, #4294967295
 80003f6:	f080 808d 	bcs.w	8000514 <__udivmoddi4+0x2ac>
 80003fa:	4299      	cmp	r1, r3
 80003fc:	f240 808a 	bls.w	8000514 <__udivmoddi4+0x2ac>
 8000400:	3e02      	subs	r6, #2
 8000402:	443b      	add	r3, r7
 8000404:	1a5b      	subs	r3, r3, r1
 8000406:	b281      	uxth	r1, r0
 8000408:	fbb3 f0fe 	udiv	r0, r3, lr
 800040c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000410:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000414:	fb00 f308 	mul.w	r3, r0, r8
 8000418:	428b      	cmp	r3, r1
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x1c4>
 800041c:	1879      	adds	r1, r7, r1
 800041e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000422:	d273      	bcs.n	800050c <__udivmoddi4+0x2a4>
 8000424:	428b      	cmp	r3, r1
 8000426:	d971      	bls.n	800050c <__udivmoddi4+0x2a4>
 8000428:	3802      	subs	r0, #2
 800042a:	4439      	add	r1, r7
 800042c:	1acb      	subs	r3, r1, r3
 800042e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000432:	e778      	b.n	8000326 <__udivmoddi4+0xbe>
 8000434:	f1c6 0c20 	rsb	ip, r6, #32
 8000438:	fa03 f406 	lsl.w	r4, r3, r6
 800043c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000440:	431c      	orrs	r4, r3
 8000442:	fa20 f70c 	lsr.w	r7, r0, ip
 8000446:	fa01 f306 	lsl.w	r3, r1, r6
 800044a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800044e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000452:	431f      	orrs	r7, r3
 8000454:	0c3b      	lsrs	r3, r7, #16
 8000456:	fbb1 f9fe 	udiv	r9, r1, lr
 800045a:	fa1f f884 	uxth.w	r8, r4
 800045e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000462:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000466:	fb09 fa08 	mul.w	sl, r9, r8
 800046a:	458a      	cmp	sl, r1
 800046c:	fa02 f206 	lsl.w	r2, r2, r6
 8000470:	fa00 f306 	lsl.w	r3, r0, r6
 8000474:	d908      	bls.n	8000488 <__udivmoddi4+0x220>
 8000476:	1861      	adds	r1, r4, r1
 8000478:	f109 30ff 	add.w	r0, r9, #4294967295
 800047c:	d248      	bcs.n	8000510 <__udivmoddi4+0x2a8>
 800047e:	458a      	cmp	sl, r1
 8000480:	d946      	bls.n	8000510 <__udivmoddi4+0x2a8>
 8000482:	f1a9 0902 	sub.w	r9, r9, #2
 8000486:	4421      	add	r1, r4
 8000488:	eba1 010a 	sub.w	r1, r1, sl
 800048c:	b2bf      	uxth	r7, r7
 800048e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000492:	fb0e 1110 	mls	r1, lr, r0, r1
 8000496:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800049a:	fb00 f808 	mul.w	r8, r0, r8
 800049e:	45b8      	cmp	r8, r7
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x24a>
 80004a2:	19e7      	adds	r7, r4, r7
 80004a4:	f100 31ff 	add.w	r1, r0, #4294967295
 80004a8:	d22e      	bcs.n	8000508 <__udivmoddi4+0x2a0>
 80004aa:	45b8      	cmp	r8, r7
 80004ac:	d92c      	bls.n	8000508 <__udivmoddi4+0x2a0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4427      	add	r7, r4
 80004b2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004b6:	eba7 0708 	sub.w	r7, r7, r8
 80004ba:	fba0 8902 	umull	r8, r9, r0, r2
 80004be:	454f      	cmp	r7, r9
 80004c0:	46c6      	mov	lr, r8
 80004c2:	4649      	mov	r1, r9
 80004c4:	d31a      	bcc.n	80004fc <__udivmoddi4+0x294>
 80004c6:	d017      	beq.n	80004f8 <__udivmoddi4+0x290>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x27a>
 80004ca:	ebb3 020e 	subs.w	r2, r3, lr
 80004ce:	eb67 0701 	sbc.w	r7, r7, r1
 80004d2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004d6:	40f2      	lsrs	r2, r6
 80004d8:	ea4c 0202 	orr.w	r2, ip, r2
 80004dc:	40f7      	lsrs	r7, r6
 80004de:	e9c5 2700 	strd	r2, r7, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	462e      	mov	r6, r5
 80004ec:	4628      	mov	r0, r5
 80004ee:	e70b      	b.n	8000308 <__udivmoddi4+0xa0>
 80004f0:	4606      	mov	r6, r0
 80004f2:	e6e9      	b.n	80002c8 <__udivmoddi4+0x60>
 80004f4:	4618      	mov	r0, r3
 80004f6:	e6fd      	b.n	80002f4 <__udivmoddi4+0x8c>
 80004f8:	4543      	cmp	r3, r8
 80004fa:	d2e5      	bcs.n	80004c8 <__udivmoddi4+0x260>
 80004fc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000500:	eb69 0104 	sbc.w	r1, r9, r4
 8000504:	3801      	subs	r0, #1
 8000506:	e7df      	b.n	80004c8 <__udivmoddi4+0x260>
 8000508:	4608      	mov	r0, r1
 800050a:	e7d2      	b.n	80004b2 <__udivmoddi4+0x24a>
 800050c:	4660      	mov	r0, ip
 800050e:	e78d      	b.n	800042c <__udivmoddi4+0x1c4>
 8000510:	4681      	mov	r9, r0
 8000512:	e7b9      	b.n	8000488 <__udivmoddi4+0x220>
 8000514:	4666      	mov	r6, ip
 8000516:	e775      	b.n	8000404 <__udivmoddi4+0x19c>
 8000518:	4630      	mov	r0, r6
 800051a:	e74a      	b.n	80003b2 <__udivmoddi4+0x14a>
 800051c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000520:	4439      	add	r1, r7
 8000522:	e713      	b.n	800034c <__udivmoddi4+0xe4>
 8000524:	3802      	subs	r0, #2
 8000526:	443c      	add	r4, r7
 8000528:	e724      	b.n	8000374 <__udivmoddi4+0x10c>
 800052a:	bf00      	nop

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <sin_from_table>:
		1024     ,
		1024
};


int16_t sin_from_table(uint16_t phase){
 8000530:	b480      	push	{r7}
 8000532:	b083      	sub	sp, #12
 8000534:	af00      	add	r7, sp, #0
 8000536:	4603      	mov	r3, r0
 8000538:	80fb      	strh	r3, [r7, #6]

	if(phase>=360) phase = phase -360;
 800053a:	88fb      	ldrh	r3, [r7, #6]
 800053c:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8000540:	d303      	bcc.n	800054a <sin_from_table+0x1a>
 8000542:	88fb      	ldrh	r3, [r7, #6]
 8000544:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8000548:	80fb      	strh	r3, [r7, #6]

	if(phase>=0 && phase <90){
 800054a:	88fb      	ldrh	r3, [r7, #6]
 800054c:	2b59      	cmp	r3, #89	; 0x59
 800054e:	d805      	bhi.n	800055c <sin_from_table+0x2c>
		return SIN_TABLE[phase];
 8000550:	88fb      	ldrh	r3, [r7, #6]
 8000552:	4a1f      	ldr	r2, [pc, #124]	; (80005d0 <sin_from_table+0xa0>)
 8000554:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000558:	b21b      	sxth	r3, r3
 800055a:	e032      	b.n	80005c2 <sin_from_table+0x92>
	}
	else if(phase>=90 && phase<180){
 800055c:	88fb      	ldrh	r3, [r7, #6]
 800055e:	2b59      	cmp	r3, #89	; 0x59
 8000560:	d90a      	bls.n	8000578 <sin_from_table+0x48>
 8000562:	88fb      	ldrh	r3, [r7, #6]
 8000564:	2bb3      	cmp	r3, #179	; 0xb3
 8000566:	d807      	bhi.n	8000578 <sin_from_table+0x48>
		return SIN_TABLE[90-(phase-90)];
 8000568:	88fb      	ldrh	r3, [r7, #6]
 800056a:	f1c3 03b4 	rsb	r3, r3, #180	; 0xb4
 800056e:	4a18      	ldr	r2, [pc, #96]	; (80005d0 <sin_from_table+0xa0>)
 8000570:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000574:	b21b      	sxth	r3, r3
 8000576:	e024      	b.n	80005c2 <sin_from_table+0x92>
	}
	else if(phase>=180 && phase <270){
 8000578:	88fb      	ldrh	r3, [r7, #6]
 800057a:	2bb3      	cmp	r3, #179	; 0xb3
 800057c:	d90d      	bls.n	800059a <sin_from_table+0x6a>
 800057e:	88fb      	ldrh	r3, [r7, #6]
 8000580:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8000584:	d209      	bcs.n	800059a <sin_from_table+0x6a>
		return -SIN_TABLE[phase-180];
 8000586:	88fb      	ldrh	r3, [r7, #6]
 8000588:	3bb4      	subs	r3, #180	; 0xb4
 800058a:	4a11      	ldr	r2, [pc, #68]	; (80005d0 <sin_from_table+0xa0>)
 800058c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000590:	b29b      	uxth	r3, r3
 8000592:	425b      	negs	r3, r3
 8000594:	b29b      	uxth	r3, r3
 8000596:	b21b      	sxth	r3, r3
 8000598:	e013      	b.n	80005c2 <sin_from_table+0x92>
	}
	else if(phase>=270 && phase<360){
 800059a:	88fb      	ldrh	r3, [r7, #6]
 800059c:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80005a0:	d30e      	bcc.n	80005c0 <sin_from_table+0x90>
 80005a2:	88fb      	ldrh	r3, [r7, #6]
 80005a4:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 80005a8:	d20a      	bcs.n	80005c0 <sin_from_table+0x90>
		return -SIN_TABLE[90-((phase-180)-90)];
 80005aa:	88fb      	ldrh	r3, [r7, #6]
 80005ac:	f5c3 73b4 	rsb	r3, r3, #360	; 0x168
 80005b0:	4a07      	ldr	r2, [pc, #28]	; (80005d0 <sin_from_table+0xa0>)
 80005b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005b6:	b29b      	uxth	r3, r3
 80005b8:	425b      	negs	r3, r3
 80005ba:	b29b      	uxth	r3, r3
 80005bc:	b21b      	sxth	r3, r3
 80005be:	e000      	b.n	80005c2 <sin_from_table+0x92>
	}
	else {
		return 0;
 80005c0:	2300      	movs	r3, #0
	}

}
 80005c2:	4618      	mov	r0, r3
 80005c4:	370c      	adds	r7, #12
 80005c6:	46bd      	mov	sp, r7
 80005c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop
 80005d0:	0800dce4 	.word	0x0800dce4

080005d4 <cos_from_table>:

int16_t cos_from_table(uint16_t phase){
 80005d4:	b480      	push	{r7}
 80005d6:	b083      	sub	sp, #12
 80005d8:	af00      	add	r7, sp, #0
 80005da:	4603      	mov	r3, r0
 80005dc:	80fb      	strh	r3, [r7, #6]

	phase = phase+90;
 80005de:	88fb      	ldrh	r3, [r7, #6]
 80005e0:	335a      	adds	r3, #90	; 0x5a
 80005e2:	80fb      	strh	r3, [r7, #6]

	if(phase>=360) phase = phase -360;
 80005e4:	88fb      	ldrh	r3, [r7, #6]
 80005e6:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 80005ea:	d303      	bcc.n	80005f4 <cos_from_table+0x20>
 80005ec:	88fb      	ldrh	r3, [r7, #6]
 80005ee:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80005f2:	80fb      	strh	r3, [r7, #6]

	if(phase>=0 && phase <90){
 80005f4:	88fb      	ldrh	r3, [r7, #6]
 80005f6:	2b59      	cmp	r3, #89	; 0x59
 80005f8:	d805      	bhi.n	8000606 <cos_from_table+0x32>
		return SIN_TABLE[phase];
 80005fa:	88fb      	ldrh	r3, [r7, #6]
 80005fc:	4a1e      	ldr	r2, [pc, #120]	; (8000678 <cos_from_table+0xa4>)
 80005fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000602:	b21b      	sxth	r3, r3
 8000604:	e032      	b.n	800066c <cos_from_table+0x98>
	}
	else if(phase>=90 && phase<180){
 8000606:	88fb      	ldrh	r3, [r7, #6]
 8000608:	2b59      	cmp	r3, #89	; 0x59
 800060a:	d90a      	bls.n	8000622 <cos_from_table+0x4e>
 800060c:	88fb      	ldrh	r3, [r7, #6]
 800060e:	2bb3      	cmp	r3, #179	; 0xb3
 8000610:	d807      	bhi.n	8000622 <cos_from_table+0x4e>
		return SIN_TABLE[90-(phase-90)];
 8000612:	88fb      	ldrh	r3, [r7, #6]
 8000614:	f1c3 03b4 	rsb	r3, r3, #180	; 0xb4
 8000618:	4a17      	ldr	r2, [pc, #92]	; (8000678 <cos_from_table+0xa4>)
 800061a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800061e:	b21b      	sxth	r3, r3
 8000620:	e024      	b.n	800066c <cos_from_table+0x98>
	}
	else if(phase>=180 && phase <270){
 8000622:	88fb      	ldrh	r3, [r7, #6]
 8000624:	2bb3      	cmp	r3, #179	; 0xb3
 8000626:	d90d      	bls.n	8000644 <cos_from_table+0x70>
 8000628:	88fb      	ldrh	r3, [r7, #6]
 800062a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800062e:	d209      	bcs.n	8000644 <cos_from_table+0x70>
		return -SIN_TABLE[phase-180];
 8000630:	88fb      	ldrh	r3, [r7, #6]
 8000632:	3bb4      	subs	r3, #180	; 0xb4
 8000634:	4a10      	ldr	r2, [pc, #64]	; (8000678 <cos_from_table+0xa4>)
 8000636:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800063a:	b29b      	uxth	r3, r3
 800063c:	425b      	negs	r3, r3
 800063e:	b29b      	uxth	r3, r3
 8000640:	b21b      	sxth	r3, r3
 8000642:	e013      	b.n	800066c <cos_from_table+0x98>
	}
	else if(phase>=270 && phase<360){
 8000644:	88fb      	ldrh	r3, [r7, #6]
 8000646:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800064a:	d30e      	bcc.n	800066a <cos_from_table+0x96>
 800064c:	88fb      	ldrh	r3, [r7, #6]
 800064e:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8000652:	d20a      	bcs.n	800066a <cos_from_table+0x96>
		return -SIN_TABLE[90-((phase-180)-90)];
 8000654:	88fb      	ldrh	r3, [r7, #6]
 8000656:	f5c3 73b4 	rsb	r3, r3, #360	; 0x168
 800065a:	4a07      	ldr	r2, [pc, #28]	; (8000678 <cos_from_table+0xa4>)
 800065c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000660:	b29b      	uxth	r3, r3
 8000662:	425b      	negs	r3, r3
 8000664:	b29b      	uxth	r3, r3
 8000666:	b21b      	sxth	r3, r3
 8000668:	e000      	b.n	800066c <cos_from_table+0x98>
	}
	else {
		return 0;
 800066a:	2300      	movs	r3, #0
	}


}
 800066c:	4618      	mov	r0, r3
 800066e:	370c      	adds	r7, #12
 8000670:	46bd      	mov	sp, r7
 8000672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000676:	4770      	bx	lr
 8000678:	0800dce4 	.word	0x0800dce4

0800067c <transform_to_Clark_domain>:


void transform_to_Clark_domain(int * PhaseCurrents, int * AlphaBetaCurrents){
 800067c:	b5b0      	push	{r4, r5, r7, lr}
 800067e:	b082      	sub	sp, #8
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
 8000684:	6039      	str	r1, [r7, #0]

	//PhaseCurrents[0]= sin_from_table(Motor.rotorphase);
	//PhaseCurrents[1]= sin_from_table(Motor.rotorphase+240);
	//PhaseCurrents[2]= sin_from_table(Motor.rotorphase+120);
	
	AlphaBetaCurrents[0] = PhaseCurrents[0];
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	681a      	ldr	r2, [r3, #0]
 800068a:	683b      	ldr	r3, [r7, #0]
 800068c:	601a      	str	r2, [r3, #0]
	AlphaBetaCurrents[1] = (((int64_t)(PhaseCurrents[1] - PhaseCurrents[2])<<10)/1773);
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	3304      	adds	r3, #4
 8000692:	681a      	ldr	r2, [r3, #0]
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	3308      	adds	r3, #8
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	1ad3      	subs	r3, r2, r3
 800069c:	461a      	mov	r2, r3
 800069e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80006a2:	1595      	asrs	r5, r2, #22
 80006a4:	0294      	lsls	r4, r2, #10
 80006a6:	f240 62ed 	movw	r2, #1773	; 0x6ed
 80006aa:	f04f 0300 	mov.w	r3, #0
 80006ae:	4620      	mov	r0, r4
 80006b0:	4629      	mov	r1, r5
 80006b2:	f7ff fd89 	bl	80001c8 <__aeabi_ldivmod>
 80006b6:	4602      	mov	r2, r0
 80006b8:	460b      	mov	r3, r1
 80006ba:	4610      	mov	r0, r2
 80006bc:	4619      	mov	r1, r3
 80006be:	683b      	ldr	r3, [r7, #0]
 80006c0:	3304      	adds	r3, #4
 80006c2:	4602      	mov	r2, r0
 80006c4:	601a      	str	r2, [r3, #0]


}
 80006c6:	bf00      	nop
 80006c8:	3708      	adds	r7, #8
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bdb0      	pop	{r4, r5, r7, pc}

080006ce <transform_to_Park_domain>:

void transform_to_Park_domain(int * AlphaBetaCurrents,int * DQCurrents, uint32_t phase){
 80006ce:	b590      	push	{r4, r7, lr}
 80006d0:	b085      	sub	sp, #20
 80006d2:	af00      	add	r7, sp, #0
 80006d4:	60f8      	str	r0, [r7, #12]
 80006d6:	60b9      	str	r1, [r7, #8]
 80006d8:	607a      	str	r2, [r7, #4]
//		// iq = -sin(phase)*ialpha + cos(phase)*ibeta
//		// id =  cos(phase)*ialpha + sin(phase)*ibeta



	DQCurrents[0] = (-(sin_from_table(phase)*AlphaBetaCurrents[0]) + (cos_from_table(phase)*AlphaBetaCurrents[1]))>>10;
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	b29b      	uxth	r3, r3
 80006de:	4618      	mov	r0, r3
 80006e0:	f7ff ff78 	bl	80005d4 <cos_from_table>
 80006e4:	4603      	mov	r3, r0
 80006e6:	461a      	mov	r2, r3
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	3304      	adds	r3, #4
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	fb03 f402 	mul.w	r4, r3, r2
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	b29b      	uxth	r3, r3
 80006f6:	4618      	mov	r0, r3
 80006f8:	f7ff ff1a 	bl	8000530 <sin_from_table>
 80006fc:	4603      	mov	r3, r0
 80006fe:	461a      	mov	r2, r3
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	fb03 f302 	mul.w	r3, r3, r2
 8000708:	1ae3      	subs	r3, r4, r3
 800070a:	129a      	asrs	r2, r3, #10
 800070c:	68bb      	ldr	r3, [r7, #8]
 800070e:	601a      	str	r2, [r3, #0]
	DQCurrents[1] = ( (cos_from_table(phase)*AlphaBetaCurrents[0]) + (sin_from_table(phase)*AlphaBetaCurrents[1]))>>10;
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	b29b      	uxth	r3, r3
 8000714:	4618      	mov	r0, r3
 8000716:	f7ff ff5d 	bl	80005d4 <cos_from_table>
 800071a:	4603      	mov	r3, r0
 800071c:	461a      	mov	r2, r3
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	fb03 f402 	mul.w	r4, r3, r2
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	b29b      	uxth	r3, r3
 800072a:	4618      	mov	r0, r3
 800072c:	f7ff ff00 	bl	8000530 <sin_from_table>
 8000730:	4603      	mov	r3, r0
 8000732:	461a      	mov	r2, r3
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	3304      	adds	r3, #4
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	fb03 f302 	mul.w	r3, r3, r2
 800073e:	18e2      	adds	r2, r4, r3
 8000740:	68bb      	ldr	r3, [r7, #8]
 8000742:	3304      	adds	r3, #4
 8000744:	1292      	asrs	r2, r2, #10
 8000746:	601a      	str	r2, [r3, #0]



}
 8000748:	bf00      	nop
 800074a:	3714      	adds	r7, #20
 800074c:	46bd      	mov	sp, r7
 800074e:	bd90      	pop	{r4, r7, pc}

08000750 <initSVM>:
30

};


void initSVM(uint16_t switching_frequency){
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
 8000756:	4603      	mov	r3, r0
 8000758:	80fb      	strh	r3, [r7, #6]
	
	HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800075a:	2019      	movs	r0, #25
 800075c:	f003 fad9 	bl	8003d12 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn,0,0);
 8000760:	2200      	movs	r2, #0
 8000762:	2100      	movs	r1, #0
 8000764:	2019      	movs	r0, #25
 8000766:	f003 fab8 	bl	8003cda <HAL_NVIC_SetPriority>
	__HAL_TIM_ENABLE_IT(&htim1,TIM_IT_UPDATE);
 800076a:	4b1f      	ldr	r3, [pc, #124]	; (80007e8 <initSVM+0x98>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	68da      	ldr	r2, [r3, #12]
 8000770:	4b1d      	ldr	r3, [pc, #116]	; (80007e8 <initSVM+0x98>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	f042 0201 	orr.w	r2, r2, #1
 8000778:	60da      	str	r2, [r3, #12]

	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1); // W
 800077a:	2100      	movs	r1, #0
 800077c:	481a      	ldr	r0, [pc, #104]	; (80007e8 <initSVM+0x98>)
 800077e:	f007 f831 	bl	80077e4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2); // V
 8000782:	2104      	movs	r1, #4
 8000784:	4818      	ldr	r0, [pc, #96]	; (80007e8 <initSVM+0x98>)
 8000786:	f007 f82d 	bl	80077e4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start_IT(&htim1,TIM_CHANNEL_3); // U
 800078a:	2108      	movs	r1, #8
 800078c:	4816      	ldr	r0, [pc, #88]	; (80007e8 <initSVM+0x98>)
 800078e:	f007 f90f 	bl	80079b0 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_5);
 8000792:	2110      	movs	r1, #16
 8000794:	4814      	ldr	r0, [pc, #80]	; (80007e8 <initSVM+0x98>)
 8000796:	f007 f825 	bl	80077e4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_6);
 800079a:	2114      	movs	r1, #20
 800079c:	4812      	ldr	r0, [pc, #72]	; (80007e8 <initSVM+0x98>)
 800079e:	f007 f821 	bl	80077e4 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_1);
 80007a2:	2100      	movs	r1, #0
 80007a4:	4810      	ldr	r0, [pc, #64]	; (80007e8 <initSVM+0x98>)
 80007a6:	f008 f92f 	bl	8008a08 <HAL_TIMEx_PWMN_Start>
	HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_2);
 80007aa:	2104      	movs	r1, #4
 80007ac:	480e      	ldr	r0, [pc, #56]	; (80007e8 <initSVM+0x98>)
 80007ae:	f008 f92b 	bl	8008a08 <HAL_TIMEx_PWMN_Start>
	HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_3);
 80007b2:	2108      	movs	r1, #8
 80007b4:	480c      	ldr	r0, [pc, #48]	; (80007e8 <initSVM+0x98>)
 80007b6:	f008 f927 	bl	8008a08 <HAL_TIMEx_PWMN_Start>


	PWM_TIM->BDTR&= ~(255);
 80007ba:	4b0c      	ldr	r3, [pc, #48]	; (80007ec <initSVM+0x9c>)
 80007bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007be:	4a0b      	ldr	r2, [pc, #44]	; (80007ec <initSVM+0x9c>)
 80007c0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80007c4:	6453      	str	r3, [r2, #68]	; 0x44
	PWM_TIM->BDTR|= 128;
 80007c6:	4b09      	ldr	r3, [pc, #36]	; (80007ec <initSVM+0x9c>)
 80007c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007ca:	4a08      	ldr	r2, [pc, #32]	; (80007ec <initSVM+0x9c>)
 80007cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007d0:	6453      	str	r3, [r2, #68]	; 0x44
	PWM_TIM->ARR=PWM_TIM_ARR;
 80007d2:	4b06      	ldr	r3, [pc, #24]	; (80007ec <initSVM+0x9c>)
 80007d4:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 80007d8:	62da      	str	r2, [r3, #44]	; 0x2c
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80007da:	b662      	cpsie	i
}
 80007dc:	bf00      	nop

	__enable_irq();
}
 80007de:	bf00      	nop
 80007e0:	3708      	adds	r7, #8
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	200005e4 	.word	0x200005e4
 80007ec:	40012c00 	.word	0x40012c00

080007f0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim){
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
	PWM_U=CCR_U;
 80007f8:	4b1c      	ldr	r3, [pc, #112]	; (800086c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80007fa:	881a      	ldrh	r2, [r3, #0]
 80007fc:	4b1c      	ldr	r3, [pc, #112]	; (8000870 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80007fe:	63da      	str	r2, [r3, #60]	; 0x3c
	PWM_V=CCR_V;
 8000800:	4b1c      	ldr	r3, [pc, #112]	; (8000874 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000802:	881a      	ldrh	r2, [r3, #0]
 8000804:	4b1a      	ldr	r3, [pc, #104]	; (8000870 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000806:	639a      	str	r2, [r3, #56]	; 0x38
	PWM_W=CCR_W;
 8000808:	4b1b      	ldr	r3, [pc, #108]	; (8000878 <HAL_TIM_PeriodElapsedCallback+0x88>)
 800080a:	881a      	ldrh	r2, [r3, #0]
 800080c:	4b18      	ldr	r3, [pc, #96]	; (8000870 <HAL_TIM_PeriodElapsedCallback+0x80>)
 800080e:	635a      	str	r2, [r3, #52]	; 0x34
	
	Motor.MotorCurrents.PhaseCurrents[0] = (((Motor.MotorCurrents.ADC_VAL_PhaseCurrents[0]-1970)*110000)>>12);
 8000810:	4b1a      	ldr	r3, [pc, #104]	; (800087c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000812:	8c1b      	ldrh	r3, [r3, #32]
 8000814:	f2a3 73b2 	subw	r3, r3, #1970	; 0x7b2
 8000818:	4a19      	ldr	r2, [pc, #100]	; (8000880 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800081a:	fb02 f303 	mul.w	r3, r2, r3
 800081e:	131b      	asrs	r3, r3, #12
 8000820:	4a16      	ldr	r2, [pc, #88]	; (800087c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000822:	6153      	str	r3, [r2, #20]
	Motor.MotorCurrents.PhaseCurrents[1] = (((Motor.MotorCurrents.ADC_VAL_PhaseCurrents[1]-1970)*110000)>>12);
 8000824:	4b15      	ldr	r3, [pc, #84]	; (800087c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000826:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8000828:	f2a3 73b2 	subw	r3, r3, #1970	; 0x7b2
 800082c:	4a14      	ldr	r2, [pc, #80]	; (8000880 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800082e:	fb02 f303 	mul.w	r3, r2, r3
 8000832:	131b      	asrs	r3, r3, #12
 8000834:	4a11      	ldr	r2, [pc, #68]	; (800087c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000836:	6193      	str	r3, [r2, #24]
	Motor.MotorCurrents.PhaseCurrents[2] = (((Motor.MotorCurrents.ADC_VAL_PhaseCurrents[2]-1970)*110000)>>12);
 8000838:	4b10      	ldr	r3, [pc, #64]	; (800087c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800083a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800083c:	f2a3 73b2 	subw	r3, r3, #1970	; 0x7b2
 8000840:	4a0f      	ldr	r2, [pc, #60]	; (8000880 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000842:	fb02 f303 	mul.w	r3, r2, r3
 8000846:	131b      	asrs	r3, r3, #12
 8000848:	4a0c      	ldr	r2, [pc, #48]	; (800087c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800084a:	61d3      	str	r3, [r2, #28]

	transform_to_Clark_domain(Motor.MotorCurrents.PhaseCurrents, Motor.MotorCurrents.AlphaBetaCurrents);
 800084c:	490d      	ldr	r1, [pc, #52]	; (8000884 <HAL_TIM_PeriodElapsedCallback+0x94>)
 800084e:	480e      	ldr	r0, [pc, #56]	; (8000888 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000850:	f7ff ff14 	bl	800067c <transform_to_Clark_domain>
	transform_to_Park_domain(Motor.MotorCurrents.AlphaBetaCurrents, Motor.MotorCurrents.DQCurrenst, Motor.rotorphase);
 8000854:	4b09      	ldr	r3, [pc, #36]	; (800087c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000856:	881b      	ldrh	r3, [r3, #0]
 8000858:	461a      	mov	r2, r3
 800085a:	490c      	ldr	r1, [pc, #48]	; (800088c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 800085c:	4809      	ldr	r0, [pc, #36]	; (8000884 <HAL_TIM_PeriodElapsedCallback+0x94>)
 800085e:	f7ff ff36 	bl	80006ce <transform_to_Park_domain>
}
 8000862:	bf00      	nop
 8000864:	3708      	adds	r7, #8
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	200001c0 	.word	0x200001c0
 8000870:	40012c00 	.word	0x40012c00
 8000874:	200001c2 	.word	0x200001c2
 8000878:	200001c4 	.word	0x200001c4
 800087c:	200001d8 	.word	0x200001d8
 8000880:	0001adb0 	.word	0x0001adb0
 8000884:	200001e4 	.word	0x200001e4
 8000888:	200001ec 	.word	0x200001ec
 800088c:	200001dc 	.word	0x200001dc

08000890 <setVoltageVector>:


// setpoint 0..100% => 0..256

void setVoltageVector(int phase,int phaseshift, uint16_t setpoint){
 8000890:	b480      	push	{r7}
 8000892:	b089      	sub	sp, #36	; 0x24
 8000894:	af00      	add	r7, sp, #0
 8000896:	60f8      	str	r0, [r7, #12]
 8000898:	60b9      	str	r1, [r7, #8]
 800089a:	4613      	mov	r3, r2
 800089c:	80fb      	strh	r3, [r7, #6]
	phase=phase+phaseshift;
 800089e:	68fa      	ldr	r2, [r7, #12]
 80008a0:	68bb      	ldr	r3, [r7, #8]
 80008a2:	4413      	add	r3, r2
 80008a4:	60fb      	str	r3, [r7, #12]
	
	uint16_t active_vectors_time= PWM_TIM_ARR*setpoint>>8;
 80008a6:	88fb      	ldrh	r3, [r7, #6]
 80008a8:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 80008ac:	fb02 f303 	mul.w	r3, r2, r3
 80008b0:	121b      	asrs	r3, r3, #8
 80008b2:	83fb      	strh	r3, [r7, #30]
	uint16_t inactive_vector_time= PWM_TIM_ARR-active_vectors_time;
 80008b4:	8bfb      	ldrh	r3, [r7, #30]
 80008b6:	f5c3 6396 	rsb	r3, r3, #1200	; 0x4b0
 80008ba:	83bb      	strh	r3, [r7, #28]
	
	uint16_t active_vector1_time=0;
 80008bc:	2300      	movs	r3, #0
 80008be:	837b      	strh	r3, [r7, #26]
	uint16_t active_vector2_time=0;
 80008c0:	2300      	movs	r3, #0
 80008c2:	833b      	strh	r3, [r7, #24]
	
	uint16_t CCR_AV1=0;
 80008c4:	2300      	movs	r3, #0
 80008c6:	82fb      	strh	r3, [r7, #22]
	uint16_t CCR_AV2=0;
 80008c8:	2300      	movs	r3, #0
 80008ca:	82bb      	strh	r3, [r7, #20]
	uint16_t CCR_IAV=0;
 80008cc:	2300      	movs	r3, #0
 80008ce:	827b      	strh	r3, [r7, #18]
	
	if(phase>=360) phase=phase-360;
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 80008d6:	db03      	blt.n	80008e0 <setVoltageVector+0x50>
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80008de:	60fb      	str	r3, [r7, #12]
	if(phase<0) 	phase=phase+360;
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	da03      	bge.n	80008ee <setVoltageVector+0x5e>
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80008ec:	60fb      	str	r3, [r7, #12]
	
	current_sector=(uint16_t)phase/60;
 80008ee:	68fb      	ldr	r3, [r7, #12]
 80008f0:	b29b      	uxth	r3, r3
 80008f2:	4a61      	ldr	r2, [pc, #388]	; (8000a78 <setVoltageVector+0x1e8>)
 80008f4:	fba2 2303 	umull	r2, r3, r2, r3
 80008f8:	095b      	lsrs	r3, r3, #5
 80008fa:	b29a      	uxth	r2, r3
 80008fc:	4b5f      	ldr	r3, [pc, #380]	; (8000a7c <setVoltageVector+0x1ec>)
 80008fe:	801a      	strh	r2, [r3, #0]
//			CCR_V = CCR_IAV;
//			CCR_W = CCR_AV2;
//			break;
//	}
	
	if(phase<180)									CCR_U=PWM_TIM_ARR_half+((uint32_t)(SPWM[phase]*setpoint*PWM_TIM_ARR_half)>>18);
 8000900:	68fb      	ldr	r3, [r7, #12]
 8000902:	2bb3      	cmp	r3, #179	; 0xb3
 8000904:	dc13      	bgt.n	800092e <setVoltageVector+0x9e>
 8000906:	4a5e      	ldr	r2, [pc, #376]	; (8000a80 <setVoltageVector+0x1f0>)
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800090e:	461a      	mov	r2, r3
 8000910:	88fb      	ldrh	r3, [r7, #6]
 8000912:	fb03 f302 	mul.w	r3, r3, r2
 8000916:	f44f 7216 	mov.w	r2, #600	; 0x258
 800091a:	fb02 f303 	mul.w	r3, r2, r3
 800091e:	0c9b      	lsrs	r3, r3, #18
 8000920:	b29b      	uxth	r3, r3
 8000922:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8000926:	b29a      	uxth	r2, r3
 8000928:	4b56      	ldr	r3, [pc, #344]	; (8000a84 <setVoltageVector+0x1f4>)
 800092a:	801a      	strh	r2, [r3, #0]
 800092c:	e013      	b.n	8000956 <setVoltageVector+0xc6>
	else 											CCR_U=PWM_TIM_ARR_half-((uint32_t)(SPWM[phase-180]*setpoint*PWM_TIM_ARR_half)>>18);
 800092e:	68fb      	ldr	r3, [r7, #12]
 8000930:	3bb4      	subs	r3, #180	; 0xb4
 8000932:	4a53      	ldr	r2, [pc, #332]	; (8000a80 <setVoltageVector+0x1f0>)
 8000934:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000938:	461a      	mov	r2, r3
 800093a:	88fb      	ldrh	r3, [r7, #6]
 800093c:	fb03 f302 	mul.w	r3, r3, r2
 8000940:	f44f 7216 	mov.w	r2, #600	; 0x258
 8000944:	fb02 f303 	mul.w	r3, r2, r3
 8000948:	0c9b      	lsrs	r3, r3, #18
 800094a:	b29b      	uxth	r3, r3
 800094c:	f5c3 7316 	rsb	r3, r3, #600	; 0x258
 8000950:	b29a      	uxth	r2, r3
 8000952:	4b4c      	ldr	r3, [pc, #304]	; (8000a84 <setVoltageVector+0x1f4>)
 8000954:	801a      	strh	r2, [r3, #0]
	
	if(phase<120)									CCR_V=PWM_TIM_ARR_half-((uint32_t)(SPWM[phase+60]*setpoint*PWM_TIM_ARR_half)>>18);
 8000956:	68fb      	ldr	r3, [r7, #12]
 8000958:	2b77      	cmp	r3, #119	; 0x77
 800095a:	dc14      	bgt.n	8000986 <setVoltageVector+0xf6>
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	333c      	adds	r3, #60	; 0x3c
 8000960:	4a47      	ldr	r2, [pc, #284]	; (8000a80 <setVoltageVector+0x1f0>)
 8000962:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000966:	461a      	mov	r2, r3
 8000968:	88fb      	ldrh	r3, [r7, #6]
 800096a:	fb03 f302 	mul.w	r3, r3, r2
 800096e:	f44f 7216 	mov.w	r2, #600	; 0x258
 8000972:	fb02 f303 	mul.w	r3, r2, r3
 8000976:	0c9b      	lsrs	r3, r3, #18
 8000978:	b29b      	uxth	r3, r3
 800097a:	f5c3 7316 	rsb	r3, r3, #600	; 0x258
 800097e:	b29a      	uxth	r2, r3
 8000980:	4b41      	ldr	r3, [pc, #260]	; (8000a88 <setVoltageVector+0x1f8>)
 8000982:	801a      	strh	r2, [r3, #0]
 8000984:	e02d      	b.n	80009e2 <setVoltageVector+0x152>
	else if((phase<300)) 							CCR_V=PWM_TIM_ARR_half+((uint32_t)(SPWM[phase-120]*setpoint*PWM_TIM_ARR_half)>>18);
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800098c:	da14      	bge.n	80009b8 <setVoltageVector+0x128>
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	3b78      	subs	r3, #120	; 0x78
 8000992:	4a3b      	ldr	r2, [pc, #236]	; (8000a80 <setVoltageVector+0x1f0>)
 8000994:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000998:	461a      	mov	r2, r3
 800099a:	88fb      	ldrh	r3, [r7, #6]
 800099c:	fb03 f302 	mul.w	r3, r3, r2
 80009a0:	f44f 7216 	mov.w	r2, #600	; 0x258
 80009a4:	fb02 f303 	mul.w	r3, r2, r3
 80009a8:	0c9b      	lsrs	r3, r3, #18
 80009aa:	b29b      	uxth	r3, r3
 80009ac:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80009b0:	b29a      	uxth	r2, r3
 80009b2:	4b35      	ldr	r3, [pc, #212]	; (8000a88 <setVoltageVector+0x1f8>)
 80009b4:	801a      	strh	r2, [r3, #0]
 80009b6:	e014      	b.n	80009e2 <setVoltageVector+0x152>
	else											CCR_V=PWM_TIM_ARR_half-((uint32_t)(SPWM[phase-300]*setpoint*PWM_TIM_ARR_half)>>18);
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80009be:	4a30      	ldr	r2, [pc, #192]	; (8000a80 <setVoltageVector+0x1f0>)
 80009c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80009c4:	461a      	mov	r2, r3
 80009c6:	88fb      	ldrh	r3, [r7, #6]
 80009c8:	fb03 f302 	mul.w	r3, r3, r2
 80009cc:	f44f 7216 	mov.w	r2, #600	; 0x258
 80009d0:	fb02 f303 	mul.w	r3, r2, r3
 80009d4:	0c9b      	lsrs	r3, r3, #18
 80009d6:	b29b      	uxth	r3, r3
 80009d8:	f5c3 7316 	rsb	r3, r3, #600	; 0x258
 80009dc:	b29a      	uxth	r2, r3
 80009de:	4b2a      	ldr	r3, [pc, #168]	; (8000a88 <setVoltageVector+0x1f8>)
 80009e0:	801a      	strh	r2, [r3, #0]
																												 
	if(phase<60)									CCR_W=PWM_TIM_ARR_half+((uint32_t)(SPWM[phase+120]*setpoint*PWM_TIM_ARR_half)>>18);
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	2b3b      	cmp	r3, #59	; 0x3b
 80009e6:	dc14      	bgt.n	8000a12 <setVoltageVector+0x182>
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	3378      	adds	r3, #120	; 0x78
 80009ec:	4a24      	ldr	r2, [pc, #144]	; (8000a80 <setVoltageVector+0x1f0>)
 80009ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80009f2:	461a      	mov	r2, r3
 80009f4:	88fb      	ldrh	r3, [r7, #6]
 80009f6:	fb03 f302 	mul.w	r3, r3, r2
 80009fa:	f44f 7216 	mov.w	r2, #600	; 0x258
 80009fe:	fb02 f303 	mul.w	r3, r2, r3
 8000a02:	0c9b      	lsrs	r3, r3, #18
 8000a04:	b29b      	uxth	r3, r3
 8000a06:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8000a0a:	b29a      	uxth	r2, r3
 8000a0c:	4b1f      	ldr	r3, [pc, #124]	; (8000a8c <setVoltageVector+0x1fc>)
 8000a0e:	801a      	strh	r2, [r3, #0]
	
//	if(phase<)
	
	
								
}
 8000a10:	e02b      	b.n	8000a6a <setVoltageVector+0x1da>
	else if((phase<240)) 							CCR_W=PWM_TIM_ARR_half-((uint32_t)(SPWM[phase-60]*setpoint*PWM_TIM_ARR_half)>>18);
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	2bef      	cmp	r3, #239	; 0xef
 8000a16:	dc14      	bgt.n	8000a42 <setVoltageVector+0x1b2>
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	3b3c      	subs	r3, #60	; 0x3c
 8000a1c:	4a18      	ldr	r2, [pc, #96]	; (8000a80 <setVoltageVector+0x1f0>)
 8000a1e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a22:	461a      	mov	r2, r3
 8000a24:	88fb      	ldrh	r3, [r7, #6]
 8000a26:	fb03 f302 	mul.w	r3, r3, r2
 8000a2a:	f44f 7216 	mov.w	r2, #600	; 0x258
 8000a2e:	fb02 f303 	mul.w	r3, r2, r3
 8000a32:	0c9b      	lsrs	r3, r3, #18
 8000a34:	b29b      	uxth	r3, r3
 8000a36:	f5c3 7316 	rsb	r3, r3, #600	; 0x258
 8000a3a:	b29a      	uxth	r2, r3
 8000a3c:	4b13      	ldr	r3, [pc, #76]	; (8000a8c <setVoltageVector+0x1fc>)
 8000a3e:	801a      	strh	r2, [r3, #0]
}
 8000a40:	e013      	b.n	8000a6a <setVoltageVector+0x1da>
	else											CCR_W=PWM_TIM_ARR_half+((uint32_t)(SPWM[phase-240]*setpoint*PWM_TIM_ARR_half)>>18);
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	3bf0      	subs	r3, #240	; 0xf0
 8000a46:	4a0e      	ldr	r2, [pc, #56]	; (8000a80 <setVoltageVector+0x1f0>)
 8000a48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a4c:	461a      	mov	r2, r3
 8000a4e:	88fb      	ldrh	r3, [r7, #6]
 8000a50:	fb03 f302 	mul.w	r3, r3, r2
 8000a54:	f44f 7216 	mov.w	r2, #600	; 0x258
 8000a58:	fb02 f303 	mul.w	r3, r2, r3
 8000a5c:	0c9b      	lsrs	r3, r3, #18
 8000a5e:	b29b      	uxth	r3, r3
 8000a60:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8000a64:	b29a      	uxth	r2, r3
 8000a66:	4b09      	ldr	r3, [pc, #36]	; (8000a8c <setVoltageVector+0x1fc>)
 8000a68:	801a      	strh	r2, [r3, #0]
}
 8000a6a:	bf00      	nop
 8000a6c:	3724      	adds	r7, #36	; 0x24
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop
 8000a78:	88888889 	.word	0x88888889
 8000a7c:	200001c6 	.word	0x200001c6
 8000a80:	0800de50 	.word	0x0800de50
 8000a84:	200001c0 	.word	0x200001c0
 8000a88:	200001c2 	.word	0x200001c2
 8000a8c:	200001c4 	.word	0x200001c4

08000a90 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b090      	sub	sp, #64	; 0x40
 8000a94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a96:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	601a      	str	r2, [r3, #0]
 8000a9e:	605a      	str	r2, [r3, #4]
 8000aa0:	609a      	str	r2, [r3, #8]
 8000aa2:	60da      	str	r2, [r3, #12]
 8000aa4:	611a      	str	r2, [r3, #16]
 8000aa6:	615a      	str	r2, [r3, #20]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000aa8:	463b      	mov	r3, r7
 8000aaa:	2228      	movs	r2, #40	; 0x28
 8000aac:	2100      	movs	r1, #0
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f00d f8a0 	bl	800dbf4 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000ab4:	4b48      	ldr	r3, [pc, #288]	; (8000bd8 <MX_ADC1_Init+0x148>)
 8000ab6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000aba:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000abc:	4b46      	ldr	r3, [pc, #280]	; (8000bd8 <MX_ADC1_Init+0x148>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ac2:	4b45      	ldr	r3, [pc, #276]	; (8000bd8 <MX_ADC1_Init+0x148>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000ac8:	4b43      	ldr	r3, [pc, #268]	; (8000bd8 <MX_ADC1_Init+0x148>)
 8000aca:	2201      	movs	r2, #1
 8000acc:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ace:	4b42      	ldr	r3, [pc, #264]	; (8000bd8 <MX_ADC1_Init+0x148>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ad4:	4b40      	ldr	r3, [pc, #256]	; (8000bd8 <MX_ADC1_Init+0x148>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000adc:	4b3e      	ldr	r3, [pc, #248]	; (8000bd8 <MX_ADC1_Init+0x148>)
 8000ade:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ae2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_TRGO2;
 8000ae4:	4b3c      	ldr	r3, [pc, #240]	; (8000bd8 <MX_ADC1_Init+0x148>)
 8000ae6:	f44f 7220 	mov.w	r2, #640	; 0x280
 8000aea:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000aec:	4b3a      	ldr	r3, [pc, #232]	; (8000bd8 <MX_ADC1_Init+0x148>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8000af2:	4b39      	ldr	r3, [pc, #228]	; (8000bd8 <MX_ADC1_Init+0x148>)
 8000af4:	2203      	movs	r2, #3
 8000af6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000af8:	4b37      	ldr	r3, [pc, #220]	; (8000bd8 <MX_ADC1_Init+0x148>)
 8000afa:	2201      	movs	r2, #1
 8000afc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000b00:	4b35      	ldr	r3, [pc, #212]	; (8000bd8 <MX_ADC1_Init+0x148>)
 8000b02:	2208      	movs	r2, #8
 8000b04:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000b06:	4b34      	ldr	r3, [pc, #208]	; (8000bd8 <MX_ADC1_Init+0x148>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000b0c:	4b32      	ldr	r3, [pc, #200]	; (8000bd8 <MX_ADC1_Init+0x148>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b12:	4831      	ldr	r0, [pc, #196]	; (8000bd8 <MX_ADC1_Init+0x148>)
 8000b14:	f001 fcfc 	bl	8002510 <HAL_ADC_Init>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000b1e:	f000 fbe7 	bl	80012f0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000b22:	230b      	movs	r3, #11
 8000b24:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b26:	2301      	movs	r3, #1
 8000b28:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfig.SamplingTime = ADC_SAMPLETIME_19CYCLES_5;
 8000b2e:	2304      	movs	r3, #4
 8000b30:	633b      	str	r3, [r7, #48]	; 0x30
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b32:	2300      	movs	r3, #0
 8000b34:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfig.Offset = 0;
 8000b36:	2300      	movs	r3, #0
 8000b38:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b3a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b3e:	4619      	mov	r1, r3
 8000b40:	4825      	ldr	r0, [pc, #148]	; (8000bd8 <MX_ADC1_Init+0x148>)
 8000b42:	f002 f8f7 	bl	8002d34 <HAL_ADC_ConfigChannel>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <MX_ADC1_Init+0xc0>
  {
    Error_Handler();
 8000b4c:	f000 fbd0 	bl	80012f0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000b50:	230a      	movs	r3, #10
 8000b52:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000b54:	2303      	movs	r3, #3
 8000b56:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b58:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	481e      	ldr	r0, [pc, #120]	; (8000bd8 <MX_ADC1_Init+0x148>)
 8000b60:	f002 f8e8 	bl	8002d34 <HAL_ADC_ConfigChannel>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000b6a:	f000 fbc1 	bl	80012f0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000b6e:	2302      	movs	r3, #2
 8000b70:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000b72:	2302      	movs	r3, #2
 8000b74:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b76:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	4816      	ldr	r0, [pc, #88]	; (8000bd8 <MX_ADC1_Init+0x148>)
 8000b7e:	f002 f8d9 	bl	8002d34 <HAL_ADC_ConfigChannel>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 8000b88:	f000 fbb2 	bl	80012f0 <Error_Handler>
  }
  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_12;
 8000b8c:	230c      	movs	r3, #12
 8000b8e:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8000b90:	2301      	movs	r3, #1
 8000b92:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8000b94:	2300      	movs	r3, #0
 8000b96:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedNbrOfConversion = 1;
 8000b98:	2301      	movs	r3, #1
 8000b9a:	61bb      	str	r3, [r7, #24]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 8000b9c:	2307      	movs	r3, #7
 8000b9e:	60bb      	str	r3, [r7, #8]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8000ba0:	2340      	movs	r3, #64	; 0x40
 8000ba2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 8000ba4:	2301      	movs	r3, #1
 8000ba6:	623b      	str	r3, [r7, #32]
  sConfigInjected.AutoInjectedConv = DISABLE;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	777b      	strb	r3, [r7, #29]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000bac:	2300      	movs	r3, #0
 8000bae:	773b      	strb	r3, [r7, #28]
  sConfigInjected.QueueInjectedContext = DISABLE;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	77bb      	strb	r3, [r7, #30]
  sConfigInjected.InjectedOffset = 0;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	613b      	str	r3, [r7, #16]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000bbc:	463b      	mov	r3, r7
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	4805      	ldr	r0, [pc, #20]	; (8000bd8 <MX_ADC1_Init+0x148>)
 8000bc2:	f002 fb6d 	bl	80032a0 <HAL_ADCEx_InjectedConfigChannel>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <MX_ADC1_Init+0x140>
  {
    Error_Handler();
 8000bcc:	f000 fb90 	bl	80012f0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000bd0:	bf00      	nop
 8000bd2:	3740      	adds	r7, #64	; 0x40
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	2000046c 	.word	0x2000046c

08000bdc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b08a      	sub	sp, #40	; 0x28
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be4:	f107 0314 	add.w	r3, r7, #20
 8000be8:	2200      	movs	r2, #0
 8000bea:	601a      	str	r2, [r3, #0]
 8000bec:	605a      	str	r2, [r3, #4]
 8000bee:	609a      	str	r2, [r3, #8]
 8000bf0:	60da      	str	r2, [r3, #12]
 8000bf2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000bfc:	d16d      	bne.n	8000cda <HAL_ADC_MspInit+0xfe>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000bfe:	4b39      	ldr	r3, [pc, #228]	; (8000ce4 <HAL_ADC_MspInit+0x108>)
 8000c00:	695b      	ldr	r3, [r3, #20]
 8000c02:	4a38      	ldr	r2, [pc, #224]	; (8000ce4 <HAL_ADC_MspInit+0x108>)
 8000c04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c08:	6153      	str	r3, [r2, #20]
 8000c0a:	4b36      	ldr	r3, [pc, #216]	; (8000ce4 <HAL_ADC_MspInit+0x108>)
 8000c0c:	695b      	ldr	r3, [r3, #20]
 8000c0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c12:	613b      	str	r3, [r7, #16]
 8000c14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c16:	4b33      	ldr	r3, [pc, #204]	; (8000ce4 <HAL_ADC_MspInit+0x108>)
 8000c18:	695b      	ldr	r3, [r3, #20]
 8000c1a:	4a32      	ldr	r2, [pc, #200]	; (8000ce4 <HAL_ADC_MspInit+0x108>)
 8000c1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c20:	6153      	str	r3, [r2, #20]
 8000c22:	4b30      	ldr	r3, [pc, #192]	; (8000ce4 <HAL_ADC_MspInit+0x108>)
 8000c24:	695b      	ldr	r3, [r3, #20]
 8000c26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c2a:	60fb      	str	r3, [r7, #12]
 8000c2c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c2e:	4b2d      	ldr	r3, [pc, #180]	; (8000ce4 <HAL_ADC_MspInit+0x108>)
 8000c30:	695b      	ldr	r3, [r3, #20]
 8000c32:	4a2c      	ldr	r2, [pc, #176]	; (8000ce4 <HAL_ADC_MspInit+0x108>)
 8000c34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c38:	6153      	str	r3, [r2, #20]
 8000c3a:	4b2a      	ldr	r3, [pc, #168]	; (8000ce4 <HAL_ADC_MspInit+0x108>)
 8000c3c:	695b      	ldr	r3, [r3, #20]
 8000c3e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c42:	60bb      	str	r3, [r7, #8]
 8000c44:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> ADC1_IN10
    PA7     ------> ADC1_IN15
    PB0     ------> ADC1_IN11
    PB1     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = Sense_W_Pin|MCurrent_W_Pin|Sense_V_Pin|Sense_Temp_Top_Pin
 8000c46:	23cf      	movs	r3, #207	; 0xcf
 8000c48:	617b      	str	r3, [r7, #20]
                          |MCurrent_V_Pin|Sense_U_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c4a:	2303      	movs	r3, #3
 8000c4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c52:	f107 0314 	add.w	r3, r7, #20
 8000c56:	4619      	mov	r1, r3
 8000c58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c5c:	f003 fa82 	bl	8004164 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MCurrent_U_Pin|AN_IN_Pin;
 8000c60:	2303      	movs	r3, #3
 8000c62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c64:	2303      	movs	r3, #3
 8000c66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c6c:	f107 0314 	add.w	r3, r7, #20
 8000c70:	4619      	mov	r1, r3
 8000c72:	481d      	ldr	r0, [pc, #116]	; (8000ce8 <HAL_ADC_MspInit+0x10c>)
 8000c74:	f003 fa76 	bl	8004164 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000c78:	4b1c      	ldr	r3, [pc, #112]	; (8000cec <HAL_ADC_MspInit+0x110>)
 8000c7a:	4a1d      	ldr	r2, [pc, #116]	; (8000cf0 <HAL_ADC_MspInit+0x114>)
 8000c7c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c7e:	4b1b      	ldr	r3, [pc, #108]	; (8000cec <HAL_ADC_MspInit+0x110>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c84:	4b19      	ldr	r3, [pc, #100]	; (8000cec <HAL_ADC_MspInit+0x110>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000c8a:	4b18      	ldr	r3, [pc, #96]	; (8000cec <HAL_ADC_MspInit+0x110>)
 8000c8c:	2280      	movs	r2, #128	; 0x80
 8000c8e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000c90:	4b16      	ldr	r3, [pc, #88]	; (8000cec <HAL_ADC_MspInit+0x110>)
 8000c92:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c96:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000c98:	4b14      	ldr	r3, [pc, #80]	; (8000cec <HAL_ADC_MspInit+0x110>)
 8000c9a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c9e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000ca0:	4b12      	ldr	r3, [pc, #72]	; (8000cec <HAL_ADC_MspInit+0x110>)
 8000ca2:	2220      	movs	r2, #32
 8000ca4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8000ca6:	4b11      	ldr	r3, [pc, #68]	; (8000cec <HAL_ADC_MspInit+0x110>)
 8000ca8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000cac:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000cae:	480f      	ldr	r0, [pc, #60]	; (8000cec <HAL_ADC_MspInit+0x110>)
 8000cb0:	f003 f849 	bl	8003d46 <HAL_DMA_Init>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d001      	beq.n	8000cbe <HAL_ADC_MspInit+0xe2>
    {
      Error_Handler();
 8000cba:	f000 fb19 	bl	80012f0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	4a0a      	ldr	r2, [pc, #40]	; (8000cec <HAL_ADC_MspInit+0x110>)
 8000cc2:	639a      	str	r2, [r3, #56]	; 0x38
 8000cc4:	4a09      	ldr	r2, [pc, #36]	; (8000cec <HAL_ADC_MspInit+0x110>)
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2100      	movs	r1, #0
 8000cce:	2012      	movs	r0, #18
 8000cd0:	f003 f803 	bl	8003cda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8000cd4:	2012      	movs	r0, #18
 8000cd6:	f003 f81c 	bl	8003d12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000cda:	bf00      	nop
 8000cdc:	3728      	adds	r7, #40	; 0x28
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	40021000 	.word	0x40021000
 8000ce8:	48000400 	.word	0x48000400
 8000cec:	200004bc 	.word	0x200004bc
 8000cf0:	40020008 	.word	0x40020008

08000cf4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cfa:	4b10      	ldr	r3, [pc, #64]	; (8000d3c <MX_DMA_Init+0x48>)
 8000cfc:	695b      	ldr	r3, [r3, #20]
 8000cfe:	4a0f      	ldr	r2, [pc, #60]	; (8000d3c <MX_DMA_Init+0x48>)
 8000d00:	f043 0301 	orr.w	r3, r3, #1
 8000d04:	6153      	str	r3, [r2, #20]
 8000d06:	4b0d      	ldr	r3, [pc, #52]	; (8000d3c <MX_DMA_Init+0x48>)
 8000d08:	695b      	ldr	r3, [r3, #20]
 8000d0a:	f003 0301 	and.w	r3, r3, #1
 8000d0e:	607b      	str	r3, [r7, #4]
 8000d10:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000d12:	2200      	movs	r2, #0
 8000d14:	2100      	movs	r1, #0
 8000d16:	200b      	movs	r0, #11
 8000d18:	f002 ffdf 	bl	8003cda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000d1c:	200b      	movs	r0, #11
 8000d1e:	f002 fff8 	bl	8003d12 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000d22:	2200      	movs	r2, #0
 8000d24:	2100      	movs	r1, #0
 8000d26:	200e      	movs	r0, #14
 8000d28:	f002 ffd7 	bl	8003cda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000d2c:	200e      	movs	r0, #14
 8000d2e:	f002 fff0 	bl	8003d12 <HAL_NVIC_EnableIRQ>

}
 8000d32:	bf00      	nop
 8000d34:	3708      	adds	r7, #8
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	40021000 	.word	0x40021000

08000d40 <readEncoder>:
#include "encoder.h"
#include <string.h>
#include <stdio.h>
#include <stdlib.h>

int readEncoder(GPIO_TypeDef* PORT_A, uint16_t PIN_A , GPIO_TypeDef* PORT_B, uint16_t PIN_B,int upperboundary, int lowerboundary){
 8000d40:	b590      	push	{r4, r7, lr}
 8000d42:	b087      	sub	sp, #28
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	60f8      	str	r0, [r7, #12]
 8000d48:	607a      	str	r2, [r7, #4]
 8000d4a:	461a      	mov	r2, r3
 8000d4c:	460b      	mov	r3, r1
 8000d4e:	817b      	strh	r3, [r7, #10]
 8000d50:	4613      	mov	r3, r2
 8000d52:	813b      	strh	r3, [r7, #8]
	static ui8 ENCODERA =0;
	static ui8 ENCODERB =0;
	static int encoder_val=0;
	
	ENCODERA=(ENCODERA<<1)|HAL_GPIO_ReadPin(PORT_A,PIN_A);
 8000d54:	4b61      	ldr	r3, [pc, #388]	; (8000edc <readEncoder+0x19c>)
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	005b      	lsls	r3, r3, #1
 8000d5a:	b25c      	sxtb	r4, r3
 8000d5c:	897b      	ldrh	r3, [r7, #10]
 8000d5e:	4619      	mov	r1, r3
 8000d60:	68f8      	ldr	r0, [r7, #12]
 8000d62:	f003 fb71 	bl	8004448 <HAL_GPIO_ReadPin>
 8000d66:	4603      	mov	r3, r0
 8000d68:	b25b      	sxtb	r3, r3
 8000d6a:	4323      	orrs	r3, r4
 8000d6c:	b25b      	sxtb	r3, r3
 8000d6e:	b2da      	uxtb	r2, r3
 8000d70:	4b5a      	ldr	r3, [pc, #360]	; (8000edc <readEncoder+0x19c>)
 8000d72:	701a      	strb	r2, [r3, #0]
	ENCODERB=(ENCODERB<<1)|HAL_GPIO_ReadPin(PORT_B,PIN_B);
 8000d74:	4b5a      	ldr	r3, [pc, #360]	; (8000ee0 <readEncoder+0x1a0>)
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	005b      	lsls	r3, r3, #1
 8000d7a:	b25c      	sxtb	r4, r3
 8000d7c:	893b      	ldrh	r3, [r7, #8]
 8000d7e:	4619      	mov	r1, r3
 8000d80:	6878      	ldr	r0, [r7, #4]
 8000d82:	f003 fb61 	bl	8004448 <HAL_GPIO_ReadPin>
 8000d86:	4603      	mov	r3, r0
 8000d88:	b25b      	sxtb	r3, r3
 8000d8a:	4323      	orrs	r3, r4
 8000d8c:	b25b      	sxtb	r3, r3
 8000d8e:	b2da      	uxtb	r2, r3
 8000d90:	4b53      	ldr	r3, [pc, #332]	; (8000ee0 <readEncoder+0x1a0>)
 8000d92:	701a      	strb	r2, [r3, #0]
	
	bool ENCODERA_rising_edge =		(ENCODERA&0x0F)==3;
 8000d94:	4b51      	ldr	r3, [pc, #324]	; (8000edc <readEncoder+0x19c>)
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	f003 030f 	and.w	r3, r3, #15
 8000d9c:	2b03      	cmp	r3, #3
 8000d9e:	bf0c      	ite	eq
 8000da0:	2301      	moveq	r3, #1
 8000da2:	2300      	movne	r3, #0
 8000da4:	75fb      	strb	r3, [r7, #23]
	bool ENCODERA_falling_edge=	  (ENCODERA&0x0F)==14;
 8000da6:	4b4d      	ldr	r3, [pc, #308]	; (8000edc <readEncoder+0x19c>)
 8000da8:	781b      	ldrb	r3, [r3, #0]
 8000daa:	f003 030f 	and.w	r3, r3, #15
 8000dae:	2b0e      	cmp	r3, #14
 8000db0:	bf0c      	ite	eq
 8000db2:	2301      	moveq	r3, #1
 8000db4:	2300      	movne	r3, #0
 8000db6:	75bb      	strb	r3, [r7, #22]
	bool ENCODERB_rising_edge =		(ENCODERB&0x0F)==3;
 8000db8:	4b49      	ldr	r3, [pc, #292]	; (8000ee0 <readEncoder+0x1a0>)
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	f003 030f 	and.w	r3, r3, #15
 8000dc0:	2b03      	cmp	r3, #3
 8000dc2:	bf0c      	ite	eq
 8000dc4:	2301      	moveq	r3, #1
 8000dc6:	2300      	movne	r3, #0
 8000dc8:	757b      	strb	r3, [r7, #21]
	bool ENCODERB_falling_edge=	  (ENCODERB&0x0F)==14;
 8000dca:	4b45      	ldr	r3, [pc, #276]	; (8000ee0 <readEncoder+0x1a0>)
 8000dcc:	781b      	ldrb	r3, [r3, #0]
 8000dce:	f003 030f 	and.w	r3, r3, #15
 8000dd2:	2b0e      	cmp	r3, #14
 8000dd4:	bf0c      	ite	eq
 8000dd6:	2301      	moveq	r3, #1
 8000dd8:	2300      	movne	r3, #0
 8000dda:	753b      	strb	r3, [r7, #20]
	
	static string event;
	static string state;
	static bool iniOK=false;
	
	if(!iniOK)																					{event="power on";											  state="idle";}
 8000ddc:	4b41      	ldr	r3, [pc, #260]	; (8000ee4 <readEncoder+0x1a4>)
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	f083 0301 	eor.w	r3, r3, #1
 8000de4:	b2db      	uxtb	r3, r3
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d006      	beq.n	8000df8 <readEncoder+0xb8>
 8000dea:	4b3f      	ldr	r3, [pc, #252]	; (8000ee8 <readEncoder+0x1a8>)
 8000dec:	4a3f      	ldr	r2, [pc, #252]	; (8000eec <readEncoder+0x1ac>)
 8000dee:	601a      	str	r2, [r3, #0]
 8000df0:	4b3f      	ldr	r3, [pc, #252]	; (8000ef0 <readEncoder+0x1b0>)
 8000df2:	4a40      	ldr	r2, [pc, #256]	; (8000ef4 <readEncoder+0x1b4>)
 8000df4:	601a      	str	r2, [r3, #0]
 8000df6:	e042      	b.n	8000e7e <readEncoder+0x13e>
	else if (state_is("idle")&&ENCODERA_rising_edge)											{event="ENCODERA rising";											state="wait for ENCODERB";}
 8000df8:	4b3d      	ldr	r3, [pc, #244]	; (8000ef0 <readEncoder+0x1b0>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	461a      	mov	r2, r3
 8000dfe:	4b3d      	ldr	r3, [pc, #244]	; (8000ef4 <readEncoder+0x1b4>)
 8000e00:	429a      	cmp	r2, r3
 8000e02:	d109      	bne.n	8000e18 <readEncoder+0xd8>
 8000e04:	7dfb      	ldrb	r3, [r7, #23]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d006      	beq.n	8000e18 <readEncoder+0xd8>
 8000e0a:	4b37      	ldr	r3, [pc, #220]	; (8000ee8 <readEncoder+0x1a8>)
 8000e0c:	4a3a      	ldr	r2, [pc, #232]	; (8000ef8 <readEncoder+0x1b8>)
 8000e0e:	601a      	str	r2, [r3, #0]
 8000e10:	4b37      	ldr	r3, [pc, #220]	; (8000ef0 <readEncoder+0x1b0>)
 8000e12:	4a3a      	ldr	r2, [pc, #232]	; (8000efc <readEncoder+0x1bc>)
 8000e14:	601a      	str	r2, [r3, #0]
 8000e16:	e032      	b.n	8000e7e <readEncoder+0x13e>
	else if (state_is("idle")&&ENCODERB_falling_edge)											{event="ENCODERB falling";											state="wait for ENCODERA";}
 8000e18:	4b35      	ldr	r3, [pc, #212]	; (8000ef0 <readEncoder+0x1b0>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	461a      	mov	r2, r3
 8000e1e:	4b35      	ldr	r3, [pc, #212]	; (8000ef4 <readEncoder+0x1b4>)
 8000e20:	429a      	cmp	r2, r3
 8000e22:	d109      	bne.n	8000e38 <readEncoder+0xf8>
 8000e24:	7d3b      	ldrb	r3, [r7, #20]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d006      	beq.n	8000e38 <readEncoder+0xf8>
 8000e2a:	4b2f      	ldr	r3, [pc, #188]	; (8000ee8 <readEncoder+0x1a8>)
 8000e2c:	4a34      	ldr	r2, [pc, #208]	; (8000f00 <readEncoder+0x1c0>)
 8000e2e:	601a      	str	r2, [r3, #0]
 8000e30:	4b2f      	ldr	r3, [pc, #188]	; (8000ef0 <readEncoder+0x1b0>)
 8000e32:	4a34      	ldr	r2, [pc, #208]	; (8000f04 <readEncoder+0x1c4>)
 8000e34:	601a      	str	r2, [r3, #0]
 8000e36:	e022      	b.n	8000e7e <readEncoder+0x13e>
	else if (state_is("wait for ENCODERB")&&ENCODERB_rising_edge)								{event="count up";											  state="idle";}
 8000e38:	4b2d      	ldr	r3, [pc, #180]	; (8000ef0 <readEncoder+0x1b0>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	461a      	mov	r2, r3
 8000e3e:	4b2f      	ldr	r3, [pc, #188]	; (8000efc <readEncoder+0x1bc>)
 8000e40:	429a      	cmp	r2, r3
 8000e42:	d109      	bne.n	8000e58 <readEncoder+0x118>
 8000e44:	7d7b      	ldrb	r3, [r7, #21]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d006      	beq.n	8000e58 <readEncoder+0x118>
 8000e4a:	4b27      	ldr	r3, [pc, #156]	; (8000ee8 <readEncoder+0x1a8>)
 8000e4c:	4a2e      	ldr	r2, [pc, #184]	; (8000f08 <readEncoder+0x1c8>)
 8000e4e:	601a      	str	r2, [r3, #0]
 8000e50:	4b27      	ldr	r3, [pc, #156]	; (8000ef0 <readEncoder+0x1b0>)
 8000e52:	4a28      	ldr	r2, [pc, #160]	; (8000ef4 <readEncoder+0x1b4>)
 8000e54:	601a      	str	r2, [r3, #0]
 8000e56:	e012      	b.n	8000e7e <readEncoder+0x13e>
	else if (state_is("wait for ENCODERA")&&ENCODERA_falling_edge)								{event="count down";											state="idle";}
 8000e58:	4b25      	ldr	r3, [pc, #148]	; (8000ef0 <readEncoder+0x1b0>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	461a      	mov	r2, r3
 8000e5e:	4b29      	ldr	r3, [pc, #164]	; (8000f04 <readEncoder+0x1c4>)
 8000e60:	429a      	cmp	r2, r3
 8000e62:	d109      	bne.n	8000e78 <readEncoder+0x138>
 8000e64:	7dbb      	ldrb	r3, [r7, #22]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d006      	beq.n	8000e78 <readEncoder+0x138>
 8000e6a:	4b1f      	ldr	r3, [pc, #124]	; (8000ee8 <readEncoder+0x1a8>)
 8000e6c:	4a27      	ldr	r2, [pc, #156]	; (8000f0c <readEncoder+0x1cc>)
 8000e6e:	601a      	str	r2, [r3, #0]
 8000e70:	4b1f      	ldr	r3, [pc, #124]	; (8000ef0 <readEncoder+0x1b0>)
 8000e72:	4a20      	ldr	r2, [pc, #128]	; (8000ef4 <readEncoder+0x1b4>)
 8000e74:	601a      	str	r2, [r3, #0]
 8000e76:	e002      	b.n	8000e7e <readEncoder+0x13e>
	else 																						{event="none";}
 8000e78:	4b1b      	ldr	r3, [pc, #108]	; (8000ee8 <readEncoder+0x1a8>)
 8000e7a:	4a25      	ldr	r2, [pc, #148]	; (8000f10 <readEncoder+0x1d0>)
 8000e7c:	601a      	str	r2, [r3, #0]
	
	if(event_occured("count up")) 	encoder_val++;
 8000e7e:	4b1a      	ldr	r3, [pc, #104]	; (8000ee8 <readEncoder+0x1a8>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	461a      	mov	r2, r3
 8000e84:	4b20      	ldr	r3, [pc, #128]	; (8000f08 <readEncoder+0x1c8>)
 8000e86:	429a      	cmp	r2, r3
 8000e88:	d104      	bne.n	8000e94 <readEncoder+0x154>
 8000e8a:	4b22      	ldr	r3, [pc, #136]	; (8000f14 <readEncoder+0x1d4>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	3301      	adds	r3, #1
 8000e90:	4a20      	ldr	r2, [pc, #128]	; (8000f14 <readEncoder+0x1d4>)
 8000e92:	6013      	str	r3, [r2, #0]
	if(event_occured("count down")) encoder_val--;
 8000e94:	4b14      	ldr	r3, [pc, #80]	; (8000ee8 <readEncoder+0x1a8>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	461a      	mov	r2, r3
 8000e9a:	4b1c      	ldr	r3, [pc, #112]	; (8000f0c <readEncoder+0x1cc>)
 8000e9c:	429a      	cmp	r2, r3
 8000e9e:	d104      	bne.n	8000eaa <readEncoder+0x16a>
 8000ea0:	4b1c      	ldr	r3, [pc, #112]	; (8000f14 <readEncoder+0x1d4>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	3b01      	subs	r3, #1
 8000ea6:	4a1b      	ldr	r2, [pc, #108]	; (8000f14 <readEncoder+0x1d4>)
 8000ea8:	6013      	str	r3, [r2, #0]
	
	if(encoder_val > upperboundary) encoder_val=lowerboundary;
 8000eaa:	4b1a      	ldr	r3, [pc, #104]	; (8000f14 <readEncoder+0x1d4>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000eb0:	429a      	cmp	r2, r3
 8000eb2:	da02      	bge.n	8000eba <readEncoder+0x17a>
 8000eb4:	4a17      	ldr	r2, [pc, #92]	; (8000f14 <readEncoder+0x1d4>)
 8000eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000eb8:	6013      	str	r3, [r2, #0]
	if(encoder_val < lowerboundary)	encoder_val=upperboundary;
 8000eba:	4b16      	ldr	r3, [pc, #88]	; (8000f14 <readEncoder+0x1d4>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000ec0:	429a      	cmp	r2, r3
 8000ec2:	dd02      	ble.n	8000eca <readEncoder+0x18a>
 8000ec4:	4a13      	ldr	r2, [pc, #76]	; (8000f14 <readEncoder+0x1d4>)
 8000ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ec8:	6013      	str	r3, [r2, #0]

	
	iniOK=true;
 8000eca:	4b06      	ldr	r3, [pc, #24]	; (8000ee4 <readEncoder+0x1a4>)
 8000ecc:	2201      	movs	r2, #1
 8000ece:	701a      	strb	r2, [r3, #0]
	
	return encoder_val;
 8000ed0:	4b10      	ldr	r3, [pc, #64]	; (8000f14 <readEncoder+0x1d4>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	371c      	adds	r7, #28
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd90      	pop	{r4, r7, pc}
 8000edc:	200001c8 	.word	0x200001c8
 8000ee0:	200001c9 	.word	0x200001c9
 8000ee4:	200001ca 	.word	0x200001ca
 8000ee8:	200001cc 	.word	0x200001cc
 8000eec:	0800dc1c 	.word	0x0800dc1c
 8000ef0:	200001d0 	.word	0x200001d0
 8000ef4:	0800dc28 	.word	0x0800dc28
 8000ef8:	0800dc30 	.word	0x0800dc30
 8000efc:	0800dc40 	.word	0x0800dc40
 8000f00:	0800dc54 	.word	0x0800dc54
 8000f04:	0800dc68 	.word	0x0800dc68
 8000f08:	0800dc7c 	.word	0x0800dc7c
 8000f0c:	0800dc88 	.word	0x0800dc88
 8000f10:	0800dc94 	.word	0x0800dc94
 8000f14:	200001d4 	.word	0x200001d4

08000f18 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b088      	sub	sp, #32
 8000f1c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f1e:	f107 030c 	add.w	r3, r7, #12
 8000f22:	2200      	movs	r2, #0
 8000f24:	601a      	str	r2, [r3, #0]
 8000f26:	605a      	str	r2, [r3, #4]
 8000f28:	609a      	str	r2, [r3, #8]
 8000f2a:	60da      	str	r2, [r3, #12]
 8000f2c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f2e:	4b2b      	ldr	r3, [pc, #172]	; (8000fdc <MX_GPIO_Init+0xc4>)
 8000f30:	695b      	ldr	r3, [r3, #20]
 8000f32:	4a2a      	ldr	r2, [pc, #168]	; (8000fdc <MX_GPIO_Init+0xc4>)
 8000f34:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f38:	6153      	str	r3, [r2, #20]
 8000f3a:	4b28      	ldr	r3, [pc, #160]	; (8000fdc <MX_GPIO_Init+0xc4>)
 8000f3c:	695b      	ldr	r3, [r3, #20]
 8000f3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f42:	60bb      	str	r3, [r7, #8]
 8000f44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f46:	4b25      	ldr	r3, [pc, #148]	; (8000fdc <MX_GPIO_Init+0xc4>)
 8000f48:	695b      	ldr	r3, [r3, #20]
 8000f4a:	4a24      	ldr	r2, [pc, #144]	; (8000fdc <MX_GPIO_Init+0xc4>)
 8000f4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f50:	6153      	str	r3, [r2, #20]
 8000f52:	4b22      	ldr	r3, [pc, #136]	; (8000fdc <MX_GPIO_Init+0xc4>)
 8000f54:	695b      	ldr	r3, [r3, #20]
 8000f56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f5a:	607b      	str	r3, [r7, #4]
 8000f5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f5e:	4b1f      	ldr	r3, [pc, #124]	; (8000fdc <MX_GPIO_Init+0xc4>)
 8000f60:	695b      	ldr	r3, [r3, #20]
 8000f62:	4a1e      	ldr	r2, [pc, #120]	; (8000fdc <MX_GPIO_Init+0xc4>)
 8000f64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f68:	6153      	str	r3, [r2, #20]
 8000f6a:	4b1c      	ldr	r3, [pc, #112]	; (8000fdc <MX_GPIO_Init+0xc4>)
 8000f6c:	695b      	ldr	r3, [r3, #20]
 8000f6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f72:	603b      	str	r3, [r7, #0]
 8000f74:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000f76:	2200      	movs	r2, #0
 8000f78:	2120      	movs	r1, #32
 8000f7a:	4819      	ldr	r0, [pc, #100]	; (8000fe0 <MX_GPIO_Init+0xc8>)
 8000f7c:	f003 fa7c 	bl	8004478 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = HALL1_Pin|HALL2_Pin|HALL3_Pin|EncoderA_Pin
 8000f80:	f640 431c 	movw	r3, #3100	; 0xc1c
 8000f84:	60fb      	str	r3, [r7, #12]
                          |EncoderB_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f86:	2300      	movs	r3, #0
 8000f88:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f8e:	f107 030c 	add.w	r3, r7, #12
 8000f92:	4619      	mov	r1, r3
 8000f94:	4812      	ldr	r0, [pc, #72]	; (8000fe0 <MX_GPIO_Init+0xc8>)
 8000f96:	f003 f8e5 	bl	8004164 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000f9a:	2320      	movs	r3, #32
 8000f9c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000faa:	f107 030c 	add.w	r3, r7, #12
 8000fae:	4619      	mov	r1, r3
 8000fb0:	480b      	ldr	r0, [pc, #44]	; (8000fe0 <MX_GPIO_Init+0xc8>)
 8000fb2:	f003 f8d7 	bl	8004164 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000fb6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fc8:	f107 030c 	add.w	r3, r7, #12
 8000fcc:	4619      	mov	r1, r3
 8000fce:	4804      	ldr	r0, [pc, #16]	; (8000fe0 <MX_GPIO_Init+0xc8>)
 8000fd0:	f003 f8c8 	bl	8004164 <HAL_GPIO_Init>

}
 8000fd4:	bf00      	nop
 8000fd6:	3720      	adds	r7, #32
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	40021000 	.word	0x40021000
 8000fe0:	48000400 	.word	0x48000400

08000fe4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000fe8:	4b1b      	ldr	r3, [pc, #108]	; (8001058 <MX_I2C1_Init+0x74>)
 8000fea:	4a1c      	ldr	r2, [pc, #112]	; (800105c <MX_I2C1_Init+0x78>)
 8000fec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10808DD3;
 8000fee:	4b1a      	ldr	r3, [pc, #104]	; (8001058 <MX_I2C1_Init+0x74>)
 8000ff0:	4a1b      	ldr	r2, [pc, #108]	; (8001060 <MX_I2C1_Init+0x7c>)
 8000ff2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000ff4:	4b18      	ldr	r3, [pc, #96]	; (8001058 <MX_I2C1_Init+0x74>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ffa:	4b17      	ldr	r3, [pc, #92]	; (8001058 <MX_I2C1_Init+0x74>)
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001000:	4b15      	ldr	r3, [pc, #84]	; (8001058 <MX_I2C1_Init+0x74>)
 8001002:	2200      	movs	r2, #0
 8001004:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001006:	4b14      	ldr	r3, [pc, #80]	; (8001058 <MX_I2C1_Init+0x74>)
 8001008:	2200      	movs	r2, #0
 800100a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800100c:	4b12      	ldr	r3, [pc, #72]	; (8001058 <MX_I2C1_Init+0x74>)
 800100e:	2200      	movs	r2, #0
 8001010:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001012:	4b11      	ldr	r3, [pc, #68]	; (8001058 <MX_I2C1_Init+0x74>)
 8001014:	2200      	movs	r2, #0
 8001016:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001018:	4b0f      	ldr	r3, [pc, #60]	; (8001058 <MX_I2C1_Init+0x74>)
 800101a:	2200      	movs	r2, #0
 800101c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800101e:	480e      	ldr	r0, [pc, #56]	; (8001058 <MX_I2C1_Init+0x74>)
 8001020:	f003 fa5c 	bl	80044dc <HAL_I2C_Init>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800102a:	f000 f961 	bl	80012f0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800102e:	2100      	movs	r1, #0
 8001030:	4809      	ldr	r0, [pc, #36]	; (8001058 <MX_I2C1_Init+0x74>)
 8001032:	f003 fae2 	bl	80045fa <HAL_I2CEx_ConfigAnalogFilter>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800103c:	f000 f958 	bl	80012f0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001040:	2100      	movs	r1, #0
 8001042:	4805      	ldr	r0, [pc, #20]	; (8001058 <MX_I2C1_Init+0x74>)
 8001044:	f003 fb24 	bl	8004690 <HAL_I2CEx_ConfigDigitalFilter>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800104e:	f000 f94f 	bl	80012f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001052:	bf00      	nop
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	20000500 	.word	0x20000500
 800105c:	40005400 	.word	0x40005400
 8001060:	10808dd3 	.word	0x10808dd3

08001064 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b08a      	sub	sp, #40	; 0x28
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800106c:	f107 0314 	add.w	r3, r7, #20
 8001070:	2200      	movs	r2, #0
 8001072:	601a      	str	r2, [r3, #0]
 8001074:	605a      	str	r2, [r3, #4]
 8001076:	609a      	str	r2, [r3, #8]
 8001078:	60da      	str	r2, [r3, #12]
 800107a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a17      	ldr	r2, [pc, #92]	; (80010e0 <HAL_I2C_MspInit+0x7c>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d128      	bne.n	80010d8 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001086:	4b17      	ldr	r3, [pc, #92]	; (80010e4 <HAL_I2C_MspInit+0x80>)
 8001088:	695b      	ldr	r3, [r3, #20]
 800108a:	4a16      	ldr	r2, [pc, #88]	; (80010e4 <HAL_I2C_MspInit+0x80>)
 800108c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001090:	6153      	str	r3, [r2, #20]
 8001092:	4b14      	ldr	r3, [pc, #80]	; (80010e4 <HAL_I2C_MspInit+0x80>)
 8001094:	695b      	ldr	r3, [r3, #20]
 8001096:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800109a:	613b      	str	r3, [r7, #16]
 800109c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800109e:	f44f 7340 	mov.w	r3, #768	; 0x300
 80010a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010a4:	2312      	movs	r3, #18
 80010a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a8:	2300      	movs	r3, #0
 80010aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010ac:	2303      	movs	r3, #3
 80010ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010b0:	2304      	movs	r3, #4
 80010b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010b4:	f107 0314 	add.w	r3, r7, #20
 80010b8:	4619      	mov	r1, r3
 80010ba:	480b      	ldr	r0, [pc, #44]	; (80010e8 <HAL_I2C_MspInit+0x84>)
 80010bc:	f003 f852 	bl	8004164 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010c0:	4b08      	ldr	r3, [pc, #32]	; (80010e4 <HAL_I2C_MspInit+0x80>)
 80010c2:	69db      	ldr	r3, [r3, #28]
 80010c4:	4a07      	ldr	r2, [pc, #28]	; (80010e4 <HAL_I2C_MspInit+0x80>)
 80010c6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010ca:	61d3      	str	r3, [r2, #28]
 80010cc:	4b05      	ldr	r3, [pc, #20]	; (80010e4 <HAL_I2C_MspInit+0x80>)
 80010ce:	69db      	ldr	r3, [r3, #28]
 80010d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010d4:	60fb      	str	r3, [r7, #12]
 80010d6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80010d8:	bf00      	nop
 80010da:	3728      	adds	r7, #40	; 0x28
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	40005400 	.word	0x40005400
 80010e4:	40021000 	.word	0x40021000
 80010e8:	48000400 	.word	0x48000400

080010ec <PI_control>:

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */
#define PI_Control_k 1

int16_t PI_control(int32_t error){
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
 return (error*PI_Control_k)>>10;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	129b      	asrs	r3, r3, #10
 80010f8:	b21b      	sxth	r3, r3
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	370c      	adds	r7, #12
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
	...

08001108 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b084      	sub	sp, #16
 800110c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800110e:	f001 f94d 	bl	80023ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001112:	f000 f885 	bl	8001220 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_DMA_Init();
 8001116:	f7ff fded 	bl	8000cf4 <MX_DMA_Init>
  MX_GPIO_Init();
 800111a:	f7ff fefd 	bl	8000f18 <MX_GPIO_Init>
  MX_ADC1_Init();
 800111e:	f7ff fcb7 	bl	8000a90 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001122:	f7ff ff5f 	bl	8000fe4 <MX_I2C1_Init>
  MX_TIM1_Init();
 8001126:	f000 fe5b 	bl	8001de0 <MX_TIM1_Init>
  MX_TIM6_Init();
 800112a:	f000 ff21 	bl	8001f70 <MX_TIM6_Init>
  MX_USB_DEVICE_Init();
 800112e:	f00c f8b7 	bl	800d2a0 <MX_USB_DEVICE_Init>
  MX_TIM15_Init();
 8001132:	f000 ff53 	bl	8001fdc <MX_TIM15_Init>
  MX_USART1_UART_Init();
 8001136:	f001 f869 	bl	800220c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  uint16_t setpoint=20;
 800113a:	2314      	movs	r3, #20
 800113c:	80fb      	strh	r3, [r7, #6]

  initSVM(PWM_Frequency);
 800113e:	f64e 2060 	movw	r0, #60000	; 0xea60
 8001142:	f7ff fb05 	bl	8000750 <initSVM>
  init_phase_estimater();
 8001146:	f000 f8e1 	bl	800130c <init_phase_estimater>

  HAL_ADC_Start_DMA(&hadc1,Motor.MotorCurrents.ADC_VAL_PhaseCurrents,3);
 800114a:	2203      	movs	r2, #3
 800114c:	492c      	ldr	r1, [pc, #176]	; (8001200 <main+0xf8>)
 800114e:	482d      	ldr	r0, [pc, #180]	; (8001204 <main+0xfc>)
 8001150:	f001 fb64 	bl	800281c <HAL_ADC_Start_DMA>

    /* USER CODE BEGIN 3 */
	 static uint32_t i=0;
	 static uint8_t init_done = 0;

	setpoint = (uint16_t) readEncoder(EncoderA_GPIO_Port, EncoderA_Pin,
 8001154:	2300      	movs	r3, #0
 8001156:	9301      	str	r3, [sp, #4]
 8001158:	23ff      	movs	r3, #255	; 0xff
 800115a:	9300      	str	r3, [sp, #0]
 800115c:	2310      	movs	r3, #16
 800115e:	4a2a      	ldr	r2, [pc, #168]	; (8001208 <main+0x100>)
 8001160:	2108      	movs	r1, #8
 8001162:	4829      	ldr	r0, [pc, #164]	; (8001208 <main+0x100>)
 8001164:	f7ff fdec 	bl	8000d40 <readEncoder>
 8001168:	4603      	mov	r3, r0
 800116a:	80fb      	strh	r3, [r7, #6]
			EncoderB_GPIO_Port, EncoderB_Pin, 255, 0);



	if(!init_done) {
 800116c:	4b27      	ldr	r3, [pc, #156]	; (800120c <main+0x104>)
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d108      	bne.n	8001186 <main+0x7e>
		init_done = initialize_Hallsensor_phase_estimator(setpoint);
 8001174:	88fb      	ldrh	r3, [r7, #6]
 8001176:	4618      	mov	r0, r3
 8001178:	f000 f8fa 	bl	8001370 <initialize_Hallsensor_phase_estimator>
 800117c:	4603      	mov	r3, r0
 800117e:	b2da      	uxtb	r2, r3
 8001180:	4b22      	ldr	r3, [pc, #136]	; (800120c <main+0x104>)
 8001182:	701a      	strb	r2, [r3, #0]
 8001184:	e035      	b.n	80011f2 <main+0xea>
	}
	else{

	estimate_rotor_phase(&Motor);
 8001186:	4822      	ldr	r0, [pc, #136]	; (8001210 <main+0x108>)
 8001188:	f000 fb10 	bl	80017ac <estimate_rotor_phase>



	phaseshift += PI_control(-Motor.MotorCurrents.DQCurrenst[1]);
 800118c:	4b20      	ldr	r3, [pc, #128]	; (8001210 <main+0x108>)
 800118e:	689b      	ldr	r3, [r3, #8]
 8001190:	425b      	negs	r3, r3
 8001192:	4618      	mov	r0, r3
 8001194:	f7ff ffaa 	bl	80010ec <PI_control>
 8001198:	4603      	mov	r3, r0
 800119a:	461a      	mov	r2, r3
 800119c:	4b1d      	ldr	r3, [pc, #116]	; (8001214 <main+0x10c>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4413      	add	r3, r2
 80011a2:	4a1c      	ldr	r2, [pc, #112]	; (8001214 <main+0x10c>)
 80011a4:	6013      	str	r3, [r2, #0]

	if(phaseshift>100) phaseshift=80;
 80011a6:	4b1b      	ldr	r3, [pc, #108]	; (8001214 <main+0x10c>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	2b64      	cmp	r3, #100	; 0x64
 80011ac:	dd02      	ble.n	80011b4 <main+0xac>
 80011ae:	4b19      	ldr	r3, [pc, #100]	; (8001214 <main+0x10c>)
 80011b0:	2250      	movs	r2, #80	; 0x50
 80011b2:	601a      	str	r2, [r3, #0]
	if(phaseshift<80) phaseshift=60;
 80011b4:	4b17      	ldr	r3, [pc, #92]	; (8001214 <main+0x10c>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	2b4f      	cmp	r3, #79	; 0x4f
 80011ba:	dc02      	bgt.n	80011c2 <main+0xba>
 80011bc:	4b15      	ldr	r3, [pc, #84]	; (8001214 <main+0x10c>)
 80011be:	223c      	movs	r2, #60	; 0x3c
 80011c0:	601a      	str	r2, [r3, #0]

	setVoltageVector(Motor.rotorphase, phaseshift, setpoint);
 80011c2:	4b13      	ldr	r3, [pc, #76]	; (8001210 <main+0x108>)
 80011c4:	881b      	ldrh	r3, [r3, #0]
 80011c6:	4618      	mov	r0, r3
 80011c8:	4b12      	ldr	r3, [pc, #72]	; (8001214 <main+0x10c>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	88fa      	ldrh	r2, [r7, #6]
 80011ce:	4619      	mov	r1, r3
 80011d0:	f7ff fb5e 	bl	8000890 <setVoltageVector>



	if (init_done)
 80011d4:	4b0d      	ldr	r3, [pc, #52]	; (800120c <main+0x104>)
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d005      	beq.n	80011e8 <main+0xe0>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80011dc:	2201      	movs	r2, #1
 80011de:	2120      	movs	r1, #32
 80011e0:	4809      	ldr	r0, [pc, #36]	; (8001208 <main+0x100>)
 80011e2:	f003 f949 	bl	8004478 <HAL_GPIO_WritePin>
 80011e6:	e004      	b.n	80011f2 <main+0xea>
	else
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80011e8:	2200      	movs	r2, #0
 80011ea:	2120      	movs	r1, #32
 80011ec:	4806      	ldr	r0, [pc, #24]	; (8001208 <main+0x100>)
 80011ee:	f003 f943 	bl	8004478 <HAL_GPIO_WritePin>
	}

	TIM_PSC=SectorTIM.Instance->ARR;
 80011f2:	4b09      	ldr	r3, [pc, #36]	; (8001218 <main+0x110>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011f8:	b29a      	uxth	r2, r3
 80011fa:	4b08      	ldr	r3, [pc, #32]	; (800121c <main+0x114>)
 80011fc:	801a      	strh	r2, [r3, #0]
  {
 80011fe:	e7a9      	b.n	8001154 <main+0x4c>
 8001200:	200001f8 	.word	0x200001f8
 8001204:	2000046c 	.word	0x2000046c
 8001208:	48000400 	.word	0x48000400
 800120c:	20000202 	.word	0x20000202
 8001210:	200001d8 	.word	0x200001d8
 8001214:	20000000 	.word	0x20000000
 8001218:	20000598 	.word	0x20000598
 800121c:	20000200 	.word	0x20000200

08001220 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b09c      	sub	sp, #112	; 0x70
 8001224:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001226:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800122a:	2228      	movs	r2, #40	; 0x28
 800122c:	2100      	movs	r1, #0
 800122e:	4618      	mov	r0, r3
 8001230:	f00c fce0 	bl	800dbf4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001234:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001238:	2200      	movs	r2, #0
 800123a:	601a      	str	r2, [r3, #0]
 800123c:	605a      	str	r2, [r3, #4]
 800123e:	609a      	str	r2, [r3, #8]
 8001240:	60da      	str	r2, [r3, #12]
 8001242:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001244:	463b      	mov	r3, r7
 8001246:	2234      	movs	r2, #52	; 0x34
 8001248:	2100      	movs	r1, #0
 800124a:	4618      	mov	r0, r3
 800124c:	f00c fcd2 	bl	800dbf4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001250:	2301      	movs	r3, #1
 8001252:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001254:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001258:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800125a:	2300      	movs	r3, #0
 800125c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800125e:	2301      	movs	r3, #1
 8001260:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001262:	2302      	movs	r3, #2
 8001264:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001266:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800126a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800126c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001270:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001272:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001276:	4618      	mov	r0, r3
 8001278:	f004 ff2c 	bl	80060d4 <HAL_RCC_OscConfig>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001282:	f000 f835 	bl	80012f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001286:	230f      	movs	r3, #15
 8001288:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800128a:	2302      	movs	r3, #2
 800128c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800128e:	2300      	movs	r3, #0
 8001290:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001292:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001296:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001298:	2300      	movs	r3, #0
 800129a:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800129c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80012a0:	2102      	movs	r1, #2
 80012a2:	4618      	mov	r0, r3
 80012a4:	f005 fe1e 	bl	8006ee4 <HAL_RCC_ClockConfig>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80012ae:	f000 f81f 	bl	80012f0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART1
 80012b2:	4b0e      	ldr	r3, [pc, #56]	; (80012ec <SystemClock_Config+0xcc>)
 80012b4:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_TIM1
                              |RCC_PERIPHCLK_TIM15|RCC_PERIPHCLK_ADC1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_SYSCLK;
 80012b6:	2301      	movs	r3, #1
 80012b8:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_SYSCLK;
 80012ba:	2310      	movs	r3, #16
 80012bc:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80012be:	2300      	movs	r3, #0
 80012c0:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_PLLCLK;
 80012c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012c6:	623b      	str	r3, [r7, #32]
  PeriphClkInit.Tim15ClockSelection = RCC_TIM15CLK_HCLK;
 80012c8:	2300      	movs	r3, #0
 80012ca:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.Adc1ClockSelection = RCC_ADC1PLLCLK_DIV1;
 80012cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012d0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012d2:	463b      	mov	r3, r7
 80012d4:	4618      	mov	r0, r3
 80012d6:	f006 f83b 	bl	8007350 <HAL_RCCEx_PeriphCLKConfig>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80012e0:	f000 f806 	bl	80012f0 <Error_Handler>
  }
}
 80012e4:	bf00      	nop
 80012e6:	3770      	adds	r7, #112	; 0x70
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	000610a1 	.word	0x000610a1

080012f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012f4:	b672      	cpsid	i
}
 80012f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_Delay(100);
 80012f8:	2064      	movs	r0, #100	; 0x64
 80012fa:	f001 f8bd 	bl	8002478 <HAL_Delay>
	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80012fe:	2120      	movs	r1, #32
 8001300:	4801      	ldr	r0, [pc, #4]	; (8001308 <Error_Handler+0x18>)
 8001302:	f003 f8d1 	bl	80044a8 <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 8001306:	e7f7      	b.n	80012f8 <Error_Handler+0x8>
 8001308:	48000400 	.word	0x48000400

0800130c <init_phase_estimater>:
//uint16_t HallSector_phase_offset[8]={255,350,230,275,93,35,156,255};
uint16_t  HallSector_Averages[8]={1};
uint16_t HallSector_phase_offset[8]={255};
uint16_t HallSector_phase_span[8]={0};

void init_phase_estimater(){
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
	__HAL_TIM_DISABLE(&SectorTIM);
 8001310:	4b16      	ldr	r3, [pc, #88]	; (800136c <init_phase_estimater+0x60>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	6a1a      	ldr	r2, [r3, #32]
 8001316:	f241 1311 	movw	r3, #4369	; 0x1111
 800131a:	4013      	ands	r3, r2
 800131c:	2b00      	cmp	r3, #0
 800131e:	d10f      	bne.n	8001340 <init_phase_estimater+0x34>
 8001320:	4b12      	ldr	r3, [pc, #72]	; (800136c <init_phase_estimater+0x60>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	6a1a      	ldr	r2, [r3, #32]
 8001326:	f240 4344 	movw	r3, #1092	; 0x444
 800132a:	4013      	ands	r3, r2
 800132c:	2b00      	cmp	r3, #0
 800132e:	d107      	bne.n	8001340 <init_phase_estimater+0x34>
 8001330:	4b0e      	ldr	r3, [pc, #56]	; (800136c <init_phase_estimater+0x60>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	681a      	ldr	r2, [r3, #0]
 8001336:	4b0d      	ldr	r3, [pc, #52]	; (800136c <init_phase_estimater+0x60>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f022 0201 	bic.w	r2, r2, #1
 800133e:	601a      	str	r2, [r3, #0]
	SectorTIM.Instance->ARR=65535;
 8001340:	4b0a      	ldr	r3, [pc, #40]	; (800136c <init_phase_estimater+0x60>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001348:	62da      	str	r2, [r3, #44]	; 0x2c
	SectorTIM.Instance->PSC=6;
 800134a:	4b08      	ldr	r3, [pc, #32]	; (800136c <init_phase_estimater+0x60>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	2206      	movs	r2, #6
 8001350:	629a      	str	r2, [r3, #40]	; 0x28
	__HAL_TIM_ENABLE(&SectorTIM);
 8001352:	4b06      	ldr	r3, [pc, #24]	; (800136c <init_phase_estimater+0x60>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	681a      	ldr	r2, [r3, #0]
 8001358:	4b04      	ldr	r3, [pc, #16]	; (800136c <init_phase_estimater+0x60>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f042 0201 	orr.w	r2, r2, #1
 8001360:	601a      	str	r2, [r3, #0]
}
 8001362:	bf00      	nop
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr
 800136c:	20000598 	.word	0x20000598

08001370 <initialize_Hallsensor_phase_estimator>:

uint16_t time_between_sectors=0;


uint16_t initialize_Hallsensor_phase_estimator(uint16_t setpoint){
 8001370:	b590      	push	{r4, r7, lr}
 8001372:	b089      	sub	sp, #36	; 0x24
 8001374:	af00      	add	r7, sp, #0
 8001376:	4603      	mov	r3, r0
 8001378:	80fb      	strh	r3, [r7, #6]
	uint16_t init_done=0;
 800137a:	2300      	movs	r3, #0
 800137c:	83fb      	strh	r3, [r7, #30]
	uint8_t HallSector=0;
 800137e:	2300      	movs	r3, #0
 8001380:	73fb      	strb	r3, [r7, #15]
	uint16_t in_toleranz_count=0;
 8001382:	2300      	movs	r3, #0
 8001384:	83bb      	strh	r3, [r7, #28]

	static uint16_t phase_old=0;

	static uint8_t prev_Sector=0;

	if(!init){
 8001386:	4b96      	ldr	r3, [pc, #600]	; (80015e0 <initialize_Hallsensor_phase_estimator+0x270>)
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d10c      	bne.n	80013a8 <initialize_Hallsensor_phase_estimator+0x38>
		// configure Sector Tim to Output a 10Hz Sinewave;
		SectorTIM.Instance-> ARR= 360;
 800138e:	4b95      	ldr	r3, [pc, #596]	; (80015e4 <initialize_Hallsensor_phase_estimator+0x274>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8001396:	62da      	str	r2, [r3, #44]	; 0x2c
		SectorTIM.Instance-> PSC = 20000;
 8001398:	4b92      	ldr	r3, [pc, #584]	; (80015e4 <initialize_Hallsensor_phase_estimator+0x274>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f644 6220 	movw	r2, #20000	; 0x4e20
 80013a0:	629a      	str	r2, [r3, #40]	; 0x28
		init=1;
 80013a2:	4b8f      	ldr	r3, [pc, #572]	; (80015e0 <initialize_Hallsensor_phase_estimator+0x270>)
 80013a4:	2201      	movs	r2, #1
 80013a6:	701a      	strb	r2, [r3, #0]
	}

	voltage_phase = SectorTIM.Instance->CNT;
 80013a8:	4b8e      	ldr	r3, [pc, #568]	; (80015e4 <initialize_Hallsensor_phase_estimator+0x274>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ae:	b29a      	uxth	r2, r3
 80013b0:	4b8d      	ldr	r3, [pc, #564]	; (80015e8 <initialize_Hallsensor_phase_estimator+0x278>)
 80013b2:	801a      	strh	r2, [r3, #0]
	Motor.rotorphase=voltage_phase;
 80013b4:	4b8c      	ldr	r3, [pc, #560]	; (80015e8 <initialize_Hallsensor_phase_estimator+0x278>)
 80013b6:	881a      	ldrh	r2, [r3, #0]
 80013b8:	4b8c      	ldr	r3, [pc, #560]	; (80015ec <initialize_Hallsensor_phase_estimator+0x27c>)
 80013ba:	801a      	strh	r2, [r3, #0]
	HALL1 = (HALL1<<1)|HAL_GPIO_ReadPin(HALL1_GPIO_Port,HALL1_Pin);
 80013bc:	4b8c      	ldr	r3, [pc, #560]	; (80015f0 <initialize_Hallsensor_phase_estimator+0x280>)
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	005b      	lsls	r3, r3, #1
 80013c2:	b25c      	sxtb	r4, r3
 80013c4:	2104      	movs	r1, #4
 80013c6:	488b      	ldr	r0, [pc, #556]	; (80015f4 <initialize_Hallsensor_phase_estimator+0x284>)
 80013c8:	f003 f83e 	bl	8004448 <HAL_GPIO_ReadPin>
 80013cc:	4603      	mov	r3, r0
 80013ce:	b25b      	sxtb	r3, r3
 80013d0:	4323      	orrs	r3, r4
 80013d2:	b25b      	sxtb	r3, r3
 80013d4:	b2da      	uxtb	r2, r3
 80013d6:	4b86      	ldr	r3, [pc, #536]	; (80015f0 <initialize_Hallsensor_phase_estimator+0x280>)
 80013d8:	701a      	strb	r2, [r3, #0]
	HALL2 = (HALL2<<1)|HAL_GPIO_ReadPin(HALL2_GPIO_Port,HALL2_Pin);
 80013da:	4b87      	ldr	r3, [pc, #540]	; (80015f8 <initialize_Hallsensor_phase_estimator+0x288>)
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	005b      	lsls	r3, r3, #1
 80013e0:	b25c      	sxtb	r4, r3
 80013e2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013e6:	4883      	ldr	r0, [pc, #524]	; (80015f4 <initialize_Hallsensor_phase_estimator+0x284>)
 80013e8:	f003 f82e 	bl	8004448 <HAL_GPIO_ReadPin>
 80013ec:	4603      	mov	r3, r0
 80013ee:	b25b      	sxtb	r3, r3
 80013f0:	4323      	orrs	r3, r4
 80013f2:	b25b      	sxtb	r3, r3
 80013f4:	b2da      	uxtb	r2, r3
 80013f6:	4b80      	ldr	r3, [pc, #512]	; (80015f8 <initialize_Hallsensor_phase_estimator+0x288>)
 80013f8:	701a      	strb	r2, [r3, #0]
	HALL3 = (HALL3<<1)|HAL_GPIO_ReadPin(HALL3_GPIO_Port,HALL3_Pin);
 80013fa:	4b80      	ldr	r3, [pc, #512]	; (80015fc <initialize_Hallsensor_phase_estimator+0x28c>)
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	005b      	lsls	r3, r3, #1
 8001400:	b25c      	sxtb	r4, r3
 8001402:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001406:	487b      	ldr	r0, [pc, #492]	; (80015f4 <initialize_Hallsensor_phase_estimator+0x284>)
 8001408:	f003 f81e 	bl	8004448 <HAL_GPIO_ReadPin>
 800140c:	4603      	mov	r3, r0
 800140e:	b25b      	sxtb	r3, r3
 8001410:	4323      	orrs	r3, r4
 8001412:	b25b      	sxtb	r3, r3
 8001414:	b2da      	uxtb	r2, r3
 8001416:	4b79      	ldr	r3, [pc, #484]	; (80015fc <initialize_Hallsensor_phase_estimator+0x28c>)
 8001418:	701a      	strb	r2, [r3, #0]

	uint8_t HALL1_rising_edge =		  (HALL1&0x0F)==3;
 800141a:	4b75      	ldr	r3, [pc, #468]	; (80015f0 <initialize_Hallsensor_phase_estimator+0x280>)
 800141c:	781b      	ldrb	r3, [r3, #0]
 800141e:	f003 030f 	and.w	r3, r3, #15
 8001422:	2b03      	cmp	r3, #3
 8001424:	bf0c      	ite	eq
 8001426:	2301      	moveq	r3, #1
 8001428:	2300      	movne	r3, #0
 800142a:	b2db      	uxtb	r3, r3
 800142c:	73bb      	strb	r3, [r7, #14]
	uint8_t HALL1_falling_edge=	    (HALL1&0x0F)==14;
 800142e:	4b70      	ldr	r3, [pc, #448]	; (80015f0 <initialize_Hallsensor_phase_estimator+0x280>)
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	f003 030f 	and.w	r3, r3, #15
 8001436:	2b0e      	cmp	r3, #14
 8001438:	bf0c      	ite	eq
 800143a:	2301      	moveq	r3, #1
 800143c:	2300      	movne	r3, #0
 800143e:	b2db      	uxtb	r3, r3
 8001440:	737b      	strb	r3, [r7, #13]
	uint8_t HALL2_rising_edge =		  (HALL2&0x0F)==3;
 8001442:	4b6d      	ldr	r3, [pc, #436]	; (80015f8 <initialize_Hallsensor_phase_estimator+0x288>)
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	f003 030f 	and.w	r3, r3, #15
 800144a:	2b03      	cmp	r3, #3
 800144c:	bf0c      	ite	eq
 800144e:	2301      	moveq	r3, #1
 8001450:	2300      	movne	r3, #0
 8001452:	b2db      	uxtb	r3, r3
 8001454:	733b      	strb	r3, [r7, #12]
	uint8_t HALL2_falling_edge=	    (HALL2&0x0F)==14;
 8001456:	4b68      	ldr	r3, [pc, #416]	; (80015f8 <initialize_Hallsensor_phase_estimator+0x288>)
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	f003 030f 	and.w	r3, r3, #15
 800145e:	2b0e      	cmp	r3, #14
 8001460:	bf0c      	ite	eq
 8001462:	2301      	moveq	r3, #1
 8001464:	2300      	movne	r3, #0
 8001466:	b2db      	uxtb	r3, r3
 8001468:	72fb      	strb	r3, [r7, #11]
	uint8_t HALL3_rising_edge =		  (HALL3&0x0F)==3;
 800146a:	4b64      	ldr	r3, [pc, #400]	; (80015fc <initialize_Hallsensor_phase_estimator+0x28c>)
 800146c:	781b      	ldrb	r3, [r3, #0]
 800146e:	f003 030f 	and.w	r3, r3, #15
 8001472:	2b03      	cmp	r3, #3
 8001474:	bf0c      	ite	eq
 8001476:	2301      	moveq	r3, #1
 8001478:	2300      	movne	r3, #0
 800147a:	b2db      	uxtb	r3, r3
 800147c:	72bb      	strb	r3, [r7, #10]
	uint8_t HALL3_falling_edge=	    (HALL3&0x0F)==14;
 800147e:	4b5f      	ldr	r3, [pc, #380]	; (80015fc <initialize_Hallsensor_phase_estimator+0x28c>)
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	f003 030f 	and.w	r3, r3, #15
 8001486:	2b0e      	cmp	r3, #14
 8001488:	bf0c      	ite	eq
 800148a:	2301      	moveq	r3, #1
 800148c:	2300      	movne	r3, #0
 800148e:	b2db      	uxtb	r3, r3
 8001490:	727b      	strb	r3, [r7, #9]

	uint8_t valid_signals=0;
 8001492:	2300      	movs	r3, #0
 8001494:	76fb      	strb	r3, [r7, #27]

	//Bei einer Flanke wenn diese nicht gerade gelockt ist
	if((HALL1_falling_edge||HALL1_rising_edge)&&!lock_HALL1){
 8001496:	7b7b      	ldrb	r3, [r7, #13]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d102      	bne.n	80014a2 <initialize_Hallsensor_phase_estimator+0x132>
 800149c:	7bbb      	ldrb	r3, [r7, #14]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d028      	beq.n	80014f4 <initialize_Hallsensor_phase_estimator+0x184>
 80014a2:	4b57      	ldr	r3, [pc, #348]	; (8001600 <initialize_Hallsensor_phase_estimator+0x290>)
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d124      	bne.n	80014f4 <initialize_Hallsensor_phase_estimator+0x184>
		lock_HALL1=1;
 80014aa:	4b55      	ldr	r3, [pc, #340]	; (8001600 <initialize_Hallsensor_phase_estimator+0x290>)
 80014ac:	2201      	movs	r2, #1
 80014ae:	701a      	strb	r2, [r3, #0]
		lock_HALL2=0;
 80014b0:	4b54      	ldr	r3, [pc, #336]	; (8001604 <initialize_Hallsensor_phase_estimator+0x294>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	701a      	strb	r2, [r3, #0]
		lock_HALL3=0;
 80014b6:	4b54      	ldr	r3, [pc, #336]	; (8001608 <initialize_Hallsensor_phase_estimator+0x298>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	701a      	strb	r2, [r3, #0]
		valid_signals = (HALL1_rising_edge<<7) || (HALL1_falling_edge<<6) || (HALL2_rising_edge<<5) || (HALL2_falling_edge<<4) || (HALL3_rising_edge<<3) || (HALL3_falling_edge<<2);
 80014bc:	7bbb      	ldrb	r3, [r7, #14]
 80014be:	01db      	lsls	r3, r3, #7
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d113      	bne.n	80014ec <initialize_Hallsensor_phase_estimator+0x17c>
 80014c4:	7b7b      	ldrb	r3, [r7, #13]
 80014c6:	019b      	lsls	r3, r3, #6
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d10f      	bne.n	80014ec <initialize_Hallsensor_phase_estimator+0x17c>
 80014cc:	7b3b      	ldrb	r3, [r7, #12]
 80014ce:	015b      	lsls	r3, r3, #5
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d10b      	bne.n	80014ec <initialize_Hallsensor_phase_estimator+0x17c>
 80014d4:	7afb      	ldrb	r3, [r7, #11]
 80014d6:	011b      	lsls	r3, r3, #4
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d107      	bne.n	80014ec <initialize_Hallsensor_phase_estimator+0x17c>
 80014dc:	7abb      	ldrb	r3, [r7, #10]
 80014de:	00db      	lsls	r3, r3, #3
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d103      	bne.n	80014ec <initialize_Hallsensor_phase_estimator+0x17c>
 80014e4:	7a7b      	ldrb	r3, [r7, #9]
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d001      	beq.n	80014f0 <initialize_Hallsensor_phase_estimator+0x180>
 80014ec:	2301      	movs	r3, #1
 80014ee:	e000      	b.n	80014f2 <initialize_Hallsensor_phase_estimator+0x182>
 80014f0:	2300      	movs	r3, #0
 80014f2:	76fb      	strb	r3, [r7, #27]
	}
	//Bei einer Flanke wenn diese nicht gerade gelockt ist
	if((HALL2_falling_edge||HALL2_rising_edge)&&!lock_HALL2){
 80014f4:	7afb      	ldrb	r3, [r7, #11]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d102      	bne.n	8001500 <initialize_Hallsensor_phase_estimator+0x190>
 80014fa:	7b3b      	ldrb	r3, [r7, #12]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d028      	beq.n	8001552 <initialize_Hallsensor_phase_estimator+0x1e2>
 8001500:	4b40      	ldr	r3, [pc, #256]	; (8001604 <initialize_Hallsensor_phase_estimator+0x294>)
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d124      	bne.n	8001552 <initialize_Hallsensor_phase_estimator+0x1e2>
		lock_HALL1=0;
 8001508:	4b3d      	ldr	r3, [pc, #244]	; (8001600 <initialize_Hallsensor_phase_estimator+0x290>)
 800150a:	2200      	movs	r2, #0
 800150c:	701a      	strb	r2, [r3, #0]
		lock_HALL2=1;
 800150e:	4b3d      	ldr	r3, [pc, #244]	; (8001604 <initialize_Hallsensor_phase_estimator+0x294>)
 8001510:	2201      	movs	r2, #1
 8001512:	701a      	strb	r2, [r3, #0]
		lock_HALL3=0;
 8001514:	4b3c      	ldr	r3, [pc, #240]	; (8001608 <initialize_Hallsensor_phase_estimator+0x298>)
 8001516:	2200      	movs	r2, #0
 8001518:	701a      	strb	r2, [r3, #0]
		valid_signals = (HALL1_rising_edge<<7) || (HALL1_falling_edge<<6) || (HALL2_rising_edge<<5) || (HALL2_falling_edge<<4) || (HALL3_rising_edge<<3) || (HALL3_falling_edge<<2);
 800151a:	7bbb      	ldrb	r3, [r7, #14]
 800151c:	01db      	lsls	r3, r3, #7
 800151e:	2b00      	cmp	r3, #0
 8001520:	d113      	bne.n	800154a <initialize_Hallsensor_phase_estimator+0x1da>
 8001522:	7b7b      	ldrb	r3, [r7, #13]
 8001524:	019b      	lsls	r3, r3, #6
 8001526:	2b00      	cmp	r3, #0
 8001528:	d10f      	bne.n	800154a <initialize_Hallsensor_phase_estimator+0x1da>
 800152a:	7b3b      	ldrb	r3, [r7, #12]
 800152c:	015b      	lsls	r3, r3, #5
 800152e:	2b00      	cmp	r3, #0
 8001530:	d10b      	bne.n	800154a <initialize_Hallsensor_phase_estimator+0x1da>
 8001532:	7afb      	ldrb	r3, [r7, #11]
 8001534:	011b      	lsls	r3, r3, #4
 8001536:	2b00      	cmp	r3, #0
 8001538:	d107      	bne.n	800154a <initialize_Hallsensor_phase_estimator+0x1da>
 800153a:	7abb      	ldrb	r3, [r7, #10]
 800153c:	00db      	lsls	r3, r3, #3
 800153e:	2b00      	cmp	r3, #0
 8001540:	d103      	bne.n	800154a <initialize_Hallsensor_phase_estimator+0x1da>
 8001542:	7a7b      	ldrb	r3, [r7, #9]
 8001544:	009b      	lsls	r3, r3, #2
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <initialize_Hallsensor_phase_estimator+0x1de>
 800154a:	2301      	movs	r3, #1
 800154c:	e000      	b.n	8001550 <initialize_Hallsensor_phase_estimator+0x1e0>
 800154e:	2300      	movs	r3, #0
 8001550:	76fb      	strb	r3, [r7, #27]
	}
	//Bei einer Flanke wenn diese nicht gerade gelockt ist
	if((HALL3_falling_edge||HALL3_rising_edge)&&!lock_HALL3){
 8001552:	7a7b      	ldrb	r3, [r7, #9]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d102      	bne.n	800155e <initialize_Hallsensor_phase_estimator+0x1ee>
 8001558:	7abb      	ldrb	r3, [r7, #10]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d028      	beq.n	80015b0 <initialize_Hallsensor_phase_estimator+0x240>
 800155e:	4b2a      	ldr	r3, [pc, #168]	; (8001608 <initialize_Hallsensor_phase_estimator+0x298>)
 8001560:	781b      	ldrb	r3, [r3, #0]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d124      	bne.n	80015b0 <initialize_Hallsensor_phase_estimator+0x240>
		lock_HALL1=0;
 8001566:	4b26      	ldr	r3, [pc, #152]	; (8001600 <initialize_Hallsensor_phase_estimator+0x290>)
 8001568:	2200      	movs	r2, #0
 800156a:	701a      	strb	r2, [r3, #0]
		lock_HALL2=0;
 800156c:	4b25      	ldr	r3, [pc, #148]	; (8001604 <initialize_Hallsensor_phase_estimator+0x294>)
 800156e:	2200      	movs	r2, #0
 8001570:	701a      	strb	r2, [r3, #0]
		lock_HALL3=1;
 8001572:	4b25      	ldr	r3, [pc, #148]	; (8001608 <initialize_Hallsensor_phase_estimator+0x298>)
 8001574:	2201      	movs	r2, #1
 8001576:	701a      	strb	r2, [r3, #0]
		valid_signals = (HALL1_rising_edge<<7) || (HALL1_falling_edge<<6) || (HALL2_rising_edge<<5) || (HALL2_falling_edge<<4) || (HALL3_rising_edge<<3) || (HALL3_falling_edge<<2);
 8001578:	7bbb      	ldrb	r3, [r7, #14]
 800157a:	01db      	lsls	r3, r3, #7
 800157c:	2b00      	cmp	r3, #0
 800157e:	d113      	bne.n	80015a8 <initialize_Hallsensor_phase_estimator+0x238>
 8001580:	7b7b      	ldrb	r3, [r7, #13]
 8001582:	019b      	lsls	r3, r3, #6
 8001584:	2b00      	cmp	r3, #0
 8001586:	d10f      	bne.n	80015a8 <initialize_Hallsensor_phase_estimator+0x238>
 8001588:	7b3b      	ldrb	r3, [r7, #12]
 800158a:	015b      	lsls	r3, r3, #5
 800158c:	2b00      	cmp	r3, #0
 800158e:	d10b      	bne.n	80015a8 <initialize_Hallsensor_phase_estimator+0x238>
 8001590:	7afb      	ldrb	r3, [r7, #11]
 8001592:	011b      	lsls	r3, r3, #4
 8001594:	2b00      	cmp	r3, #0
 8001596:	d107      	bne.n	80015a8 <initialize_Hallsensor_phase_estimator+0x238>
 8001598:	7abb      	ldrb	r3, [r7, #10]
 800159a:	00db      	lsls	r3, r3, #3
 800159c:	2b00      	cmp	r3, #0
 800159e:	d103      	bne.n	80015a8 <initialize_Hallsensor_phase_estimator+0x238>
 80015a0:	7a7b      	ldrb	r3, [r7, #9]
 80015a2:	009b      	lsls	r3, r3, #2
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <initialize_Hallsensor_phase_estimator+0x23c>
 80015a8:	2301      	movs	r3, #1
 80015aa:	e000      	b.n	80015ae <initialize_Hallsensor_phase_estimator+0x23e>
 80015ac:	2300      	movs	r3, #0
 80015ae:	76fb      	strb	r3, [r7, #27]
	}


	if(valid_signals){
 80015b0:	7efb      	ldrb	r3, [r7, #27]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	f000 80b1 	beq.w	800171a <initialize_Hallsensor_phase_estimator+0x3aa>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_12);
 80015b8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015bc:	480d      	ldr	r0, [pc, #52]	; (80015f4 <initialize_Hallsensor_phase_estimator+0x284>)
 80015be:	f002 ff73 	bl	80044a8 <HAL_GPIO_TogglePin>

		if(phase_old < voltage_phase){
 80015c2:	4b12      	ldr	r3, [pc, #72]	; (800160c <initialize_Hallsensor_phase_estimator+0x29c>)
 80015c4:	881a      	ldrh	r2, [r3, #0]
 80015c6:	4b08      	ldr	r3, [pc, #32]	; (80015e8 <initialize_Hallsensor_phase_estimator+0x278>)
 80015c8:	881b      	ldrh	r3, [r3, #0]
 80015ca:	429a      	cmp	r2, r3
 80015cc:	d222      	bcs.n	8001614 <initialize_Hallsensor_phase_estimator+0x2a4>
			time_between_sectors = voltage_phase - phase_old;
 80015ce:	4b06      	ldr	r3, [pc, #24]	; (80015e8 <initialize_Hallsensor_phase_estimator+0x278>)
 80015d0:	881a      	ldrh	r2, [r3, #0]
 80015d2:	4b0e      	ldr	r3, [pc, #56]	; (800160c <initialize_Hallsensor_phase_estimator+0x29c>)
 80015d4:	881b      	ldrh	r3, [r3, #0]
 80015d6:	1ad3      	subs	r3, r2, r3
 80015d8:	b29a      	uxth	r2, r3
 80015da:	4b0d      	ldr	r3, [pc, #52]	; (8001610 <initialize_Hallsensor_phase_estimator+0x2a0>)
 80015dc:	801a      	strh	r2, [r3, #0]
 80015de:	e024      	b.n	800162a <initialize_Hallsensor_phase_estimator+0x2ba>
 80015e0:	20000228 	.word	0x20000228
 80015e4:	20000598 	.word	0x20000598
 80015e8:	2000022a 	.word	0x2000022a
 80015ec:	200001d8 	.word	0x200001d8
 80015f0:	2000022c 	.word	0x2000022c
 80015f4:	48000400 	.word	0x48000400
 80015f8:	2000022d 	.word	0x2000022d
 80015fc:	2000022e 	.word	0x2000022e
 8001600:	2000022f 	.word	0x2000022f
 8001604:	20000230 	.word	0x20000230
 8001608:	20000231 	.word	0x20000231
 800160c:	20000232 	.word	0x20000232
 8001610:	20000214 	.word	0x20000214
		}
		else{
			time_between_sectors =360 - (phase_old - voltage_phase);
 8001614:	4b5d      	ldr	r3, [pc, #372]	; (800178c <initialize_Hallsensor_phase_estimator+0x41c>)
 8001616:	881a      	ldrh	r2, [r3, #0]
 8001618:	4b5d      	ldr	r3, [pc, #372]	; (8001790 <initialize_Hallsensor_phase_estimator+0x420>)
 800161a:	881b      	ldrh	r3, [r3, #0]
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	b29b      	uxth	r3, r3
 8001620:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001624:	b29a      	uxth	r2, r3
 8001626:	4b5b      	ldr	r3, [pc, #364]	; (8001794 <initialize_Hallsensor_phase_estimator+0x424>)
 8001628:	801a      	strh	r2, [r3, #0]
		}
		phase_old = voltage_phase;
 800162a:	4b58      	ldr	r3, [pc, #352]	; (800178c <initialize_Hallsensor_phase_estimator+0x41c>)
 800162c:	881a      	ldrh	r2, [r3, #0]
 800162e:	4b58      	ldr	r3, [pc, #352]	; (8001790 <initialize_Hallsensor_phase_estimator+0x420>)
 8001630:	801a      	strh	r2, [r3, #0]
		HallSector = (HAL_GPIO_ReadPin(HALL3_GPIO_Port,HALL3_Pin)<<2)|(HAL_GPIO_ReadPin(HALL2_GPIO_Port,HALL2_Pin)<<1)|(HAL_GPIO_ReadPin(HALL1_GPIO_Port,HALL1_Pin));
 8001632:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001636:	4858      	ldr	r0, [pc, #352]	; (8001798 <initialize_Hallsensor_phase_estimator+0x428>)
 8001638:	f002 ff06 	bl	8004448 <HAL_GPIO_ReadPin>
 800163c:	4603      	mov	r3, r0
 800163e:	009b      	lsls	r3, r3, #2
 8001640:	b25c      	sxtb	r4, r3
 8001642:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001646:	4854      	ldr	r0, [pc, #336]	; (8001798 <initialize_Hallsensor_phase_estimator+0x428>)
 8001648:	f002 fefe 	bl	8004448 <HAL_GPIO_ReadPin>
 800164c:	4603      	mov	r3, r0
 800164e:	005b      	lsls	r3, r3, #1
 8001650:	b25b      	sxtb	r3, r3
 8001652:	4323      	orrs	r3, r4
 8001654:	b25c      	sxtb	r4, r3
 8001656:	2104      	movs	r1, #4
 8001658:	484f      	ldr	r0, [pc, #316]	; (8001798 <initialize_Hallsensor_phase_estimator+0x428>)
 800165a:	f002 fef5 	bl	8004448 <HAL_GPIO_ReadPin>
 800165e:	4603      	mov	r3, r0
 8001660:	b25b      	sxtb	r3, r3
 8001662:	4323      	orrs	r3, r4
 8001664:	b25b      	sxtb	r3, r3
 8001666:	73fb      	strb	r3, [r7, #15]

		if(time_between_sectors>45 && time_between_sectors <75){
 8001668:	4b4a      	ldr	r3, [pc, #296]	; (8001794 <initialize_Hallsensor_phase_estimator+0x424>)
 800166a:	881b      	ldrh	r3, [r3, #0]
 800166c:	2b2d      	cmp	r3, #45	; 0x2d
 800166e:	d951      	bls.n	8001714 <initialize_Hallsensor_phase_estimator+0x3a4>
 8001670:	4b48      	ldr	r3, [pc, #288]	; (8001794 <initialize_Hallsensor_phase_estimator+0x424>)
 8001672:	881b      	ldrh	r3, [r3, #0]
 8001674:	2b4a      	cmp	r3, #74	; 0x4a
 8001676:	d84d      	bhi.n	8001714 <initialize_Hallsensor_phase_estimator+0x3a4>

			HallSector_phase_offset[HallSector] = (HallSector_Averages[HallSector] * voltage_phase) /(HallSector_Averages[HallSector] +1);
 8001678:	7bfb      	ldrb	r3, [r7, #15]
 800167a:	4a48      	ldr	r2, [pc, #288]	; (800179c <initialize_Hallsensor_phase_estimator+0x42c>)
 800167c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001680:	461a      	mov	r2, r3
 8001682:	4b42      	ldr	r3, [pc, #264]	; (800178c <initialize_Hallsensor_phase_estimator+0x41c>)
 8001684:	881b      	ldrh	r3, [r3, #0]
 8001686:	fb03 f202 	mul.w	r2, r3, r2
 800168a:	7bfb      	ldrb	r3, [r7, #15]
 800168c:	4943      	ldr	r1, [pc, #268]	; (800179c <initialize_Hallsensor_phase_estimator+0x42c>)
 800168e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001692:	3301      	adds	r3, #1
 8001694:	fb92 f2f3 	sdiv	r2, r2, r3
 8001698:	7bfb      	ldrb	r3, [r7, #15]
 800169a:	b291      	uxth	r1, r2
 800169c:	4a40      	ldr	r2, [pc, #256]	; (80017a0 <initialize_Hallsensor_phase_estimator+0x430>)
 800169e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			HallSector_Averages[HallSector] ++;
 80016a2:	7bfb      	ldrb	r3, [r7, #15]
 80016a4:	4a3d      	ldr	r2, [pc, #244]	; (800179c <initialize_Hallsensor_phase_estimator+0x42c>)
 80016a6:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80016aa:	3201      	adds	r2, #1
 80016ac:	b291      	uxth	r1, r2
 80016ae:	4a3b      	ldr	r2, [pc, #236]	; (800179c <initialize_Hallsensor_phase_estimator+0x42c>)
 80016b0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

			if( HallSector_phase_offset[HallSector]>HallSector_phase_offset[prev_Sector]){
 80016b4:	7bfb      	ldrb	r3, [r7, #15]
 80016b6:	4a3a      	ldr	r2, [pc, #232]	; (80017a0 <initialize_Hallsensor_phase_estimator+0x430>)
 80016b8:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80016bc:	4b39      	ldr	r3, [pc, #228]	; (80017a4 <initialize_Hallsensor_phase_estimator+0x434>)
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	4619      	mov	r1, r3
 80016c2:	4b37      	ldr	r3, [pc, #220]	; (80017a0 <initialize_Hallsensor_phase_estimator+0x430>)
 80016c4:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d910      	bls.n	80016ee <initialize_Hallsensor_phase_estimator+0x37e>
				HallSector_phase_span[HallSector] = HallSector_phase_offset[HallSector]-HallSector_phase_offset[prev_Sector];
 80016cc:	7bfb      	ldrb	r3, [r7, #15]
 80016ce:	4a34      	ldr	r2, [pc, #208]	; (80017a0 <initialize_Hallsensor_phase_estimator+0x430>)
 80016d0:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80016d4:	4b33      	ldr	r3, [pc, #204]	; (80017a4 <initialize_Hallsensor_phase_estimator+0x434>)
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	461a      	mov	r2, r3
 80016da:	4b31      	ldr	r3, [pc, #196]	; (80017a0 <initialize_Hallsensor_phase_estimator+0x430>)
 80016dc:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80016e0:	7bfb      	ldrb	r3, [r7, #15]
 80016e2:	1a8a      	subs	r2, r1, r2
 80016e4:	b291      	uxth	r1, r2
 80016e6:	4a30      	ldr	r2, [pc, #192]	; (80017a8 <initialize_Hallsensor_phase_estimator+0x438>)
 80016e8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80016ec:	e012      	b.n	8001714 <initialize_Hallsensor_phase_estimator+0x3a4>
			}
			else {
				HallSector_phase_span[HallSector] =(360 + HallSector_phase_offset[HallSector]) - HallSector_phase_offset[prev_Sector];
 80016ee:	7bfb      	ldrb	r3, [r7, #15]
 80016f0:	4a2b      	ldr	r2, [pc, #172]	; (80017a0 <initialize_Hallsensor_phase_estimator+0x430>)
 80016f2:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80016f6:	4b2b      	ldr	r3, [pc, #172]	; (80017a4 <initialize_Hallsensor_phase_estimator+0x434>)
 80016f8:	781b      	ldrb	r3, [r3, #0]
 80016fa:	4619      	mov	r1, r3
 80016fc:	4b28      	ldr	r3, [pc, #160]	; (80017a0 <initialize_Hallsensor_phase_estimator+0x430>)
 80016fe:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8001702:	1ad3      	subs	r3, r2, r3
 8001704:	b29a      	uxth	r2, r3
 8001706:	7bfb      	ldrb	r3, [r7, #15]
 8001708:	f502 72b4 	add.w	r2, r2, #360	; 0x168
 800170c:	b291      	uxth	r1, r2
 800170e:	4a26      	ldr	r2, [pc, #152]	; (80017a8 <initialize_Hallsensor_phase_estimator+0x438>)
 8001710:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			}


		}
		prev_Sector = HallSector;
 8001714:	4a23      	ldr	r2, [pc, #140]	; (80017a4 <initialize_Hallsensor_phase_estimator+0x434>)
 8001716:	7bfb      	ldrb	r3, [r7, #15]
 8001718:	7013      	strb	r3, [r2, #0]
	}

	for(int i=0; i<8;i++){
 800171a:	2300      	movs	r3, #0
 800171c:	617b      	str	r3, [r7, #20]
 800171e:	e00b      	b.n	8001738 <initialize_Hallsensor_phase_estimator+0x3c8>
		if(HallSector_Averages[i] >= 256) in_toleranz_count++;
 8001720:	4a1e      	ldr	r2, [pc, #120]	; (800179c <initialize_Hallsensor_phase_estimator+0x42c>)
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001728:	2bff      	cmp	r3, #255	; 0xff
 800172a:	d902      	bls.n	8001732 <initialize_Hallsensor_phase_estimator+0x3c2>
 800172c:	8bbb      	ldrh	r3, [r7, #28]
 800172e:	3301      	adds	r3, #1
 8001730:	83bb      	strh	r3, [r7, #28]
	for(int i=0; i<8;i++){
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	3301      	adds	r3, #1
 8001736:	617b      	str	r3, [r7, #20]
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	2b07      	cmp	r3, #7
 800173c:	ddf0      	ble.n	8001720 <initialize_Hallsensor_phase_estimator+0x3b0>
	}

	if(in_toleranz_count==6){
 800173e:	8bbb      	ldrh	r3, [r7, #28]
 8001740:	2b06      	cmp	r3, #6
 8001742:	d115      	bne.n	8001770 <initialize_Hallsensor_phase_estimator+0x400>
		init_done=1;
 8001744:	2301      	movs	r3, #1
 8001746:	83fb      	strh	r3, [r7, #30]
		for(int i=0;i<8;i++){
 8001748:	2300      	movs	r3, #0
 800174a:	613b      	str	r3, [r7, #16]
 800174c:	e00d      	b.n	800176a <initialize_Hallsensor_phase_estimator+0x3fa>
			if(HallSector_Averages[i]<256){
 800174e:	4a13      	ldr	r2, [pc, #76]	; (800179c <initialize_Hallsensor_phase_estimator+0x42c>)
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001756:	2bff      	cmp	r3, #255	; 0xff
 8001758:	d804      	bhi.n	8001764 <initialize_Hallsensor_phase_estimator+0x3f4>
				HallSector_phase_offset[i]=255;	// Für ungültige Sektoren wird die Zahl 255 verwendet
 800175a:	4a11      	ldr	r2, [pc, #68]	; (80017a0 <initialize_Hallsensor_phase_estimator+0x430>)
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	21ff      	movs	r1, #255	; 0xff
 8001760:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(int i=0;i<8;i++){
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	3301      	adds	r3, #1
 8001768:	613b      	str	r3, [r7, #16]
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	2b07      	cmp	r3, #7
 800176e:	ddee      	ble.n	800174e <initialize_Hallsensor_phase_estimator+0x3de>
			}
		}
	}

	setVoltageVector(voltage_phase, 0, setpoint);
 8001770:	4b06      	ldr	r3, [pc, #24]	; (800178c <initialize_Hallsensor_phase_estimator+0x41c>)
 8001772:	881b      	ldrh	r3, [r3, #0]
 8001774:	4618      	mov	r0, r3
 8001776:	88fb      	ldrh	r3, [r7, #6]
 8001778:	461a      	mov	r2, r3
 800177a:	2100      	movs	r1, #0
 800177c:	f7ff f888 	bl	8000890 <setVoltageVector>


	return init_done;
 8001780:	8bfb      	ldrh	r3, [r7, #30]
}
 8001782:	4618      	mov	r0, r3
 8001784:	3724      	adds	r7, #36	; 0x24
 8001786:	46bd      	mov	sp, r7
 8001788:	bd90      	pop	{r4, r7, pc}
 800178a:	bf00      	nop
 800178c:	2000022a 	.word	0x2000022a
 8001790:	20000232 	.word	0x20000232
 8001794:	20000214 	.word	0x20000214
 8001798:	48000400 	.word	0x48000400
 800179c:	20000004 	.word	0x20000004
 80017a0:	20000014 	.word	0x20000014
 80017a4:	20000234 	.word	0x20000234
 80017a8:	20000204 	.word	0x20000204

080017ac <estimate_rotor_phase>:


static uint8_t block_commutation_active=1;
static uint16_t Prev_Sector_times[8]={0};

void estimate_rotor_phase(motor_TypeDef* motor){
 80017ac:	b590      	push	{r4, r7, lr}
 80017ae:	b087      	sub	sp, #28
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
	static uint8_t init=0;

	if(!init){
 80017b4:	4ba5      	ldr	r3, [pc, #660]	; (8001a4c <estimate_rotor_phase+0x2a0>)
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d104      	bne.n	80017c6 <estimate_rotor_phase+0x1a>
		//init_phase_estimater();
		MX_TIM6_Init();
 80017bc:	f000 fbd8 	bl	8001f70 <MX_TIM6_Init>
		init=1;
 80017c0:	4ba2      	ldr	r3, [pc, #648]	; (8001a4c <estimate_rotor_phase+0x2a0>)
 80017c2:	2201      	movs	r2, #1
 80017c4:	701a      	strb	r2, [r3, #0]
	}


	static uint8_t HallSector=0;
	uint16_t newSectorTime=0;
 80017c6:	2300      	movs	r3, #0
 80017c8:	827b      	strh	r3, [r7, #18]
	static uint16_t SectorTime=0;
	static uint16_t PreviousHallSector=0;
	uint16_t CurrentSectorTime=SectorTIM.Instance->CNT;
 80017ca:	4ba1      	ldr	r3, [pc, #644]	; (8001a50 <estimate_rotor_phase+0x2a4>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017d0:	823b      	strh	r3, [r7, #16]
	
/*	static uint8_t HALL1_pinstate = 0;
	static uint8_t HALL2_pinstate = 0;
	static uint8_t HALL3_pinstate = 0;*/
												 
 HALL1 = (HALL1<<1)|HAL_GPIO_ReadPin(HALL1_GPIO_Port,HALL1_Pin);
 80017d2:	4ba0      	ldr	r3, [pc, #640]	; (8001a54 <estimate_rotor_phase+0x2a8>)
 80017d4:	781b      	ldrb	r3, [r3, #0]
 80017d6:	005b      	lsls	r3, r3, #1
 80017d8:	b25c      	sxtb	r4, r3
 80017da:	2104      	movs	r1, #4
 80017dc:	489e      	ldr	r0, [pc, #632]	; (8001a58 <estimate_rotor_phase+0x2ac>)
 80017de:	f002 fe33 	bl	8004448 <HAL_GPIO_ReadPin>
 80017e2:	4603      	mov	r3, r0
 80017e4:	b25b      	sxtb	r3, r3
 80017e6:	4323      	orrs	r3, r4
 80017e8:	b25b      	sxtb	r3, r3
 80017ea:	b2da      	uxtb	r2, r3
 80017ec:	4b99      	ldr	r3, [pc, #612]	; (8001a54 <estimate_rotor_phase+0x2a8>)
 80017ee:	701a      	strb	r2, [r3, #0]
 HALL2 = (HALL2<<1)|HAL_GPIO_ReadPin(HALL2_GPIO_Port,HALL2_Pin);
 80017f0:	4b9a      	ldr	r3, [pc, #616]	; (8001a5c <estimate_rotor_phase+0x2b0>)
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	005b      	lsls	r3, r3, #1
 80017f6:	b25c      	sxtb	r4, r3
 80017f8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80017fc:	4896      	ldr	r0, [pc, #600]	; (8001a58 <estimate_rotor_phase+0x2ac>)
 80017fe:	f002 fe23 	bl	8004448 <HAL_GPIO_ReadPin>
 8001802:	4603      	mov	r3, r0
 8001804:	b25b      	sxtb	r3, r3
 8001806:	4323      	orrs	r3, r4
 8001808:	b25b      	sxtb	r3, r3
 800180a:	b2da      	uxtb	r2, r3
 800180c:	4b93      	ldr	r3, [pc, #588]	; (8001a5c <estimate_rotor_phase+0x2b0>)
 800180e:	701a      	strb	r2, [r3, #0]
 HALL3 = (HALL3<<1)|HAL_GPIO_ReadPin(HALL3_GPIO_Port,HALL3_Pin);
 8001810:	4b93      	ldr	r3, [pc, #588]	; (8001a60 <estimate_rotor_phase+0x2b4>)
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	005b      	lsls	r3, r3, #1
 8001816:	b25c      	sxtb	r4, r3
 8001818:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800181c:	488e      	ldr	r0, [pc, #568]	; (8001a58 <estimate_rotor_phase+0x2ac>)
 800181e:	f002 fe13 	bl	8004448 <HAL_GPIO_ReadPin>
 8001822:	4603      	mov	r3, r0
 8001824:	b25b      	sxtb	r3, r3
 8001826:	4323      	orrs	r3, r4
 8001828:	b25b      	sxtb	r3, r3
 800182a:	b2da      	uxtb	r2, r3
 800182c:	4b8c      	ldr	r3, [pc, #560]	; (8001a60 <estimate_rotor_phase+0x2b4>)
 800182e:	701a      	strb	r2, [r3, #0]

	uint8_t HALL1_rising_edge =		  (HALL1&0x0F)==3;
 8001830:	4b88      	ldr	r3, [pc, #544]	; (8001a54 <estimate_rotor_phase+0x2a8>)
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	f003 030f 	and.w	r3, r3, #15
 8001838:	2b03      	cmp	r3, #3
 800183a:	bf0c      	ite	eq
 800183c:	2301      	moveq	r3, #1
 800183e:	2300      	movne	r3, #0
 8001840:	b2db      	uxtb	r3, r3
 8001842:	73fb      	strb	r3, [r7, #15]
	uint8_t HALL1_falling_edge=	    (HALL1&0x0F)==14;
 8001844:	4b83      	ldr	r3, [pc, #524]	; (8001a54 <estimate_rotor_phase+0x2a8>)
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	f003 030f 	and.w	r3, r3, #15
 800184c:	2b0e      	cmp	r3, #14
 800184e:	bf0c      	ite	eq
 8001850:	2301      	moveq	r3, #1
 8001852:	2300      	movne	r3, #0
 8001854:	b2db      	uxtb	r3, r3
 8001856:	73bb      	strb	r3, [r7, #14]
	uint8_t HALL2_rising_edge =		  (HALL2&0x0F)==3;
 8001858:	4b80      	ldr	r3, [pc, #512]	; (8001a5c <estimate_rotor_phase+0x2b0>)
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	f003 030f 	and.w	r3, r3, #15
 8001860:	2b03      	cmp	r3, #3
 8001862:	bf0c      	ite	eq
 8001864:	2301      	moveq	r3, #1
 8001866:	2300      	movne	r3, #0
 8001868:	b2db      	uxtb	r3, r3
 800186a:	737b      	strb	r3, [r7, #13]
	uint8_t HALL2_falling_edge=	    (HALL2&0x0F)==14;
 800186c:	4b7b      	ldr	r3, [pc, #492]	; (8001a5c <estimate_rotor_phase+0x2b0>)
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	f003 030f 	and.w	r3, r3, #15
 8001874:	2b0e      	cmp	r3, #14
 8001876:	bf0c      	ite	eq
 8001878:	2301      	moveq	r3, #1
 800187a:	2300      	movne	r3, #0
 800187c:	b2db      	uxtb	r3, r3
 800187e:	733b      	strb	r3, [r7, #12]
	uint8_t HALL3_rising_edge =		  (HALL3&0x0F)==3;
 8001880:	4b77      	ldr	r3, [pc, #476]	; (8001a60 <estimate_rotor_phase+0x2b4>)
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	f003 030f 	and.w	r3, r3, #15
 8001888:	2b03      	cmp	r3, #3
 800188a:	bf0c      	ite	eq
 800188c:	2301      	moveq	r3, #1
 800188e:	2300      	movne	r3, #0
 8001890:	b2db      	uxtb	r3, r3
 8001892:	72fb      	strb	r3, [r7, #11]
	uint8_t HALL3_falling_edge=	    (HALL3&0x0F)==14;
 8001894:	4b72      	ldr	r3, [pc, #456]	; (8001a60 <estimate_rotor_phase+0x2b4>)
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	f003 030f 	and.w	r3, r3, #15
 800189c:	2b0e      	cmp	r3, #14
 800189e:	bf0c      	ite	eq
 80018a0:	2301      	moveq	r3, #1
 80018a2:	2300      	movne	r3, #0
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	72bb      	strb	r3, [r7, #10]
	
	uint8_t valid_signals = 0;// (HALL1_rising_edge<<7) || (HALL1_falling_edge<<6) || (HALL2_rising_edge<<5) || (HALL2_falling_edge<<4) || (HALL3_rising_edge<<3) || (HALL3_falling_edge<<2);
 80018a8:	2300      	movs	r3, #0
 80018aa:	75fb      	strb	r3, [r7, #23]
	static uint8_t lock_HALL1=0;
	static uint8_t lock_HALL2=0;
	static uint8_t lock_HALL3=0;

	//Bei einer Flanke wenn diese nicht gerade gelockt ist
	if((HALL1_falling_edge||HALL1_rising_edge)&&!lock_HALL1){
 80018ac:	7bbb      	ldrb	r3, [r7, #14]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d102      	bne.n	80018b8 <estimate_rotor_phase+0x10c>
 80018b2:	7bfb      	ldrb	r3, [r7, #15]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d028      	beq.n	800190a <estimate_rotor_phase+0x15e>
 80018b8:	4b6a      	ldr	r3, [pc, #424]	; (8001a64 <estimate_rotor_phase+0x2b8>)
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d124      	bne.n	800190a <estimate_rotor_phase+0x15e>
		lock_HALL1=1;
 80018c0:	4b68      	ldr	r3, [pc, #416]	; (8001a64 <estimate_rotor_phase+0x2b8>)
 80018c2:	2201      	movs	r2, #1
 80018c4:	701a      	strb	r2, [r3, #0]
		lock_HALL2=0;
 80018c6:	4b68      	ldr	r3, [pc, #416]	; (8001a68 <estimate_rotor_phase+0x2bc>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	701a      	strb	r2, [r3, #0]
		lock_HALL3=0;
 80018cc:	4b67      	ldr	r3, [pc, #412]	; (8001a6c <estimate_rotor_phase+0x2c0>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	701a      	strb	r2, [r3, #0]
		valid_signals = (HALL1_rising_edge<<7) || (HALL1_falling_edge<<6) || (HALL2_rising_edge<<5) || (HALL2_falling_edge<<4) || (HALL3_rising_edge<<3) || (HALL3_falling_edge<<2);
 80018d2:	7bfb      	ldrb	r3, [r7, #15]
 80018d4:	01db      	lsls	r3, r3, #7
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d113      	bne.n	8001902 <estimate_rotor_phase+0x156>
 80018da:	7bbb      	ldrb	r3, [r7, #14]
 80018dc:	019b      	lsls	r3, r3, #6
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d10f      	bne.n	8001902 <estimate_rotor_phase+0x156>
 80018e2:	7b7b      	ldrb	r3, [r7, #13]
 80018e4:	015b      	lsls	r3, r3, #5
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d10b      	bne.n	8001902 <estimate_rotor_phase+0x156>
 80018ea:	7b3b      	ldrb	r3, [r7, #12]
 80018ec:	011b      	lsls	r3, r3, #4
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d107      	bne.n	8001902 <estimate_rotor_phase+0x156>
 80018f2:	7afb      	ldrb	r3, [r7, #11]
 80018f4:	00db      	lsls	r3, r3, #3
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d103      	bne.n	8001902 <estimate_rotor_phase+0x156>
 80018fa:	7abb      	ldrb	r3, [r7, #10]
 80018fc:	009b      	lsls	r3, r3, #2
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d001      	beq.n	8001906 <estimate_rotor_phase+0x15a>
 8001902:	2301      	movs	r3, #1
 8001904:	e000      	b.n	8001908 <estimate_rotor_phase+0x15c>
 8001906:	2300      	movs	r3, #0
 8001908:	75fb      	strb	r3, [r7, #23]
	}
	//Bei einer Flanke wenn diese nicht gerade gelockt ist
	if((HALL2_falling_edge||HALL2_rising_edge)&&!lock_HALL2){
 800190a:	7b3b      	ldrb	r3, [r7, #12]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d102      	bne.n	8001916 <estimate_rotor_phase+0x16a>
 8001910:	7b7b      	ldrb	r3, [r7, #13]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d028      	beq.n	8001968 <estimate_rotor_phase+0x1bc>
 8001916:	4b54      	ldr	r3, [pc, #336]	; (8001a68 <estimate_rotor_phase+0x2bc>)
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d124      	bne.n	8001968 <estimate_rotor_phase+0x1bc>
		lock_HALL1=0;
 800191e:	4b51      	ldr	r3, [pc, #324]	; (8001a64 <estimate_rotor_phase+0x2b8>)
 8001920:	2200      	movs	r2, #0
 8001922:	701a      	strb	r2, [r3, #0]
		lock_HALL2=1;
 8001924:	4b50      	ldr	r3, [pc, #320]	; (8001a68 <estimate_rotor_phase+0x2bc>)
 8001926:	2201      	movs	r2, #1
 8001928:	701a      	strb	r2, [r3, #0]
		lock_HALL3=0;
 800192a:	4b50      	ldr	r3, [pc, #320]	; (8001a6c <estimate_rotor_phase+0x2c0>)
 800192c:	2200      	movs	r2, #0
 800192e:	701a      	strb	r2, [r3, #0]
		valid_signals = (HALL1_rising_edge<<7) || (HALL1_falling_edge<<6) || (HALL2_rising_edge<<5) || (HALL2_falling_edge<<4) || (HALL3_rising_edge<<3) || (HALL3_falling_edge<<2);
 8001930:	7bfb      	ldrb	r3, [r7, #15]
 8001932:	01db      	lsls	r3, r3, #7
 8001934:	2b00      	cmp	r3, #0
 8001936:	d113      	bne.n	8001960 <estimate_rotor_phase+0x1b4>
 8001938:	7bbb      	ldrb	r3, [r7, #14]
 800193a:	019b      	lsls	r3, r3, #6
 800193c:	2b00      	cmp	r3, #0
 800193e:	d10f      	bne.n	8001960 <estimate_rotor_phase+0x1b4>
 8001940:	7b7b      	ldrb	r3, [r7, #13]
 8001942:	015b      	lsls	r3, r3, #5
 8001944:	2b00      	cmp	r3, #0
 8001946:	d10b      	bne.n	8001960 <estimate_rotor_phase+0x1b4>
 8001948:	7b3b      	ldrb	r3, [r7, #12]
 800194a:	011b      	lsls	r3, r3, #4
 800194c:	2b00      	cmp	r3, #0
 800194e:	d107      	bne.n	8001960 <estimate_rotor_phase+0x1b4>
 8001950:	7afb      	ldrb	r3, [r7, #11]
 8001952:	00db      	lsls	r3, r3, #3
 8001954:	2b00      	cmp	r3, #0
 8001956:	d103      	bne.n	8001960 <estimate_rotor_phase+0x1b4>
 8001958:	7abb      	ldrb	r3, [r7, #10]
 800195a:	009b      	lsls	r3, r3, #2
 800195c:	2b00      	cmp	r3, #0
 800195e:	d001      	beq.n	8001964 <estimate_rotor_phase+0x1b8>
 8001960:	2301      	movs	r3, #1
 8001962:	e000      	b.n	8001966 <estimate_rotor_phase+0x1ba>
 8001964:	2300      	movs	r3, #0
 8001966:	75fb      	strb	r3, [r7, #23]
	}
	//Bei einer Flanke wenn diese nicht gerade gelockt ist
	if((HALL3_falling_edge||HALL3_rising_edge)&&!lock_HALL3){
 8001968:	7abb      	ldrb	r3, [r7, #10]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d102      	bne.n	8001974 <estimate_rotor_phase+0x1c8>
 800196e:	7afb      	ldrb	r3, [r7, #11]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d028      	beq.n	80019c6 <estimate_rotor_phase+0x21a>
 8001974:	4b3d      	ldr	r3, [pc, #244]	; (8001a6c <estimate_rotor_phase+0x2c0>)
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d124      	bne.n	80019c6 <estimate_rotor_phase+0x21a>
		lock_HALL1=0;
 800197c:	4b39      	ldr	r3, [pc, #228]	; (8001a64 <estimate_rotor_phase+0x2b8>)
 800197e:	2200      	movs	r2, #0
 8001980:	701a      	strb	r2, [r3, #0]
		lock_HALL2=0;
 8001982:	4b39      	ldr	r3, [pc, #228]	; (8001a68 <estimate_rotor_phase+0x2bc>)
 8001984:	2200      	movs	r2, #0
 8001986:	701a      	strb	r2, [r3, #0]
		lock_HALL3=1;
 8001988:	4b38      	ldr	r3, [pc, #224]	; (8001a6c <estimate_rotor_phase+0x2c0>)
 800198a:	2201      	movs	r2, #1
 800198c:	701a      	strb	r2, [r3, #0]
		valid_signals = (HALL1_rising_edge<<7) || (HALL1_falling_edge<<6) || (HALL2_rising_edge<<5) || (HALL2_falling_edge<<4) || (HALL3_rising_edge<<3) || (HALL3_falling_edge<<2);
 800198e:	7bfb      	ldrb	r3, [r7, #15]
 8001990:	01db      	lsls	r3, r3, #7
 8001992:	2b00      	cmp	r3, #0
 8001994:	d113      	bne.n	80019be <estimate_rotor_phase+0x212>
 8001996:	7bbb      	ldrb	r3, [r7, #14]
 8001998:	019b      	lsls	r3, r3, #6
 800199a:	2b00      	cmp	r3, #0
 800199c:	d10f      	bne.n	80019be <estimate_rotor_phase+0x212>
 800199e:	7b7b      	ldrb	r3, [r7, #13]
 80019a0:	015b      	lsls	r3, r3, #5
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d10b      	bne.n	80019be <estimate_rotor_phase+0x212>
 80019a6:	7b3b      	ldrb	r3, [r7, #12]
 80019a8:	011b      	lsls	r3, r3, #4
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d107      	bne.n	80019be <estimate_rotor_phase+0x212>
 80019ae:	7afb      	ldrb	r3, [r7, #11]
 80019b0:	00db      	lsls	r3, r3, #3
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d103      	bne.n	80019be <estimate_rotor_phase+0x212>
 80019b6:	7abb      	ldrb	r3, [r7, #10]
 80019b8:	009b      	lsls	r3, r3, #2
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d001      	beq.n	80019c2 <estimate_rotor_phase+0x216>
 80019be:	2301      	movs	r3, #1
 80019c0:	e000      	b.n	80019c4 <estimate_rotor_phase+0x218>
 80019c2:	2300      	movs	r3, #0
 80019c4:	75fb      	strb	r3, [r7, #23]
	}

	
	if(valid_signals){
 80019c6:	7dfb      	ldrb	r3, [r7, #23]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d01c      	beq.n	8001a06 <estimate_rotor_phase+0x25a>
		HallSector = (HAL_GPIO_ReadPin(HALL3_GPIO_Port,HALL3_Pin)<<2)|(HAL_GPIO_ReadPin(HALL2_GPIO_Port,HALL2_Pin)<<1)|(HAL_GPIO_ReadPin(HALL1_GPIO_Port,HALL1_Pin));
 80019cc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80019d0:	4821      	ldr	r0, [pc, #132]	; (8001a58 <estimate_rotor_phase+0x2ac>)
 80019d2:	f002 fd39 	bl	8004448 <HAL_GPIO_ReadPin>
 80019d6:	4603      	mov	r3, r0
 80019d8:	009b      	lsls	r3, r3, #2
 80019da:	b25c      	sxtb	r4, r3
 80019dc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019e0:	481d      	ldr	r0, [pc, #116]	; (8001a58 <estimate_rotor_phase+0x2ac>)
 80019e2:	f002 fd31 	bl	8004448 <HAL_GPIO_ReadPin>
 80019e6:	4603      	mov	r3, r0
 80019e8:	005b      	lsls	r3, r3, #1
 80019ea:	b25b      	sxtb	r3, r3
 80019ec:	4323      	orrs	r3, r4
 80019ee:	b25c      	sxtb	r4, r3
 80019f0:	2104      	movs	r1, #4
 80019f2:	4819      	ldr	r0, [pc, #100]	; (8001a58 <estimate_rotor_phase+0x2ac>)
 80019f4:	f002 fd28 	bl	8004448 <HAL_GPIO_ReadPin>
 80019f8:	4603      	mov	r3, r0
 80019fa:	b25b      	sxtb	r3, r3
 80019fc:	4323      	orrs	r3, r4
 80019fe:	b25b      	sxtb	r3, r3
 8001a00:	b2da      	uxtb	r2, r3
 8001a02:	4b1b      	ldr	r3, [pc, #108]	; (8001a70 <estimate_rotor_phase+0x2c4>)
 8001a04:	701a      	strb	r2, [r3, #0]
	}
	
	
	uint16_t offset= HallSector_phase_offset[HallSector];
 8001a06:	4b1a      	ldr	r3, [pc, #104]	; (8001a70 <estimate_rotor_phase+0x2c4>)
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	461a      	mov	r2, r3
 8001a0c:	4b19      	ldr	r3, [pc, #100]	; (8001a74 <estimate_rotor_phase+0x2c8>)
 8001a0e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001a12:	813b      	strh	r3, [r7, #8]
	
	if(offset!=255){																				// valid Sector
 8001a14:	893b      	ldrh	r3, [r7, #8]
 8001a16:	2bff      	cmp	r3, #255	; 0xff
 8001a18:	f000 8090 	beq.w	8001b3c <estimate_rotor_phase+0x390>
		if(HallSector!=PreviousHallSector){										// Sector changed
 8001a1c:	4b14      	ldr	r3, [pc, #80]	; (8001a70 <estimate_rotor_phase+0x2c4>)
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	b29a      	uxth	r2, r3
 8001a22:	4b15      	ldr	r3, [pc, #84]	; (8001a78 <estimate_rotor_phase+0x2cc>)
 8001a24:	881b      	ldrh	r3, [r3, #0]
 8001a26:	429a      	cmp	r2, r3
 8001a28:	d04b      	beq.n	8001ac2 <estimate_rotor_phase+0x316>
			if(__HAL_TIM_GET_FLAG(&SectorTIM,TIM_FLAG_UPDATE)){	// Timer overflowed
 8001a2a:	4b09      	ldr	r3, [pc, #36]	; (8001a50 <estimate_rotor_phase+0x2a4>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	691b      	ldr	r3, [r3, #16]
 8001a30:	f003 0301 	and.w	r3, r3, #1
 8001a34:	2b01      	cmp	r3, #1
 8001a36:	d123      	bne.n	8001a80 <estimate_rotor_phase+0x2d4>
				__HAL_TIM_CLEAR_FLAG(&SectorTIM,TIM_FLAG_UPDATE);
 8001a38:	4b05      	ldr	r3, [pc, #20]	; (8001a50 <estimate_rotor_phase+0x2a4>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f06f 0201 	mvn.w	r2, #1
 8001a40:	611a      	str	r2, [r3, #16]
				block_commutation_active=1;
 8001a42:	4b0e      	ldr	r3, [pc, #56]	; (8001a7c <estimate_rotor_phase+0x2d0>)
 8001a44:	2201      	movs	r2, #1
 8001a46:	701a      	strb	r2, [r3, #0]
 8001a48:	e037      	b.n	8001aba <estimate_rotor_phase+0x30e>
 8001a4a:	bf00      	nop
 8001a4c:	20000235 	.word	0x20000235
 8001a50:	20000598 	.word	0x20000598
 8001a54:	20000236 	.word	0x20000236
 8001a58:	48000400 	.word	0x48000400
 8001a5c:	20000237 	.word	0x20000237
 8001a60:	20000238 	.word	0x20000238
 8001a64:	20000239 	.word	0x20000239
 8001a68:	2000023a 	.word	0x2000023a
 8001a6c:	2000023b 	.word	0x2000023b
 8001a70:	2000023c 	.word	0x2000023c
 8001a74:	20000014 	.word	0x20000014
 8001a78:	2000023e 	.word	0x2000023e
 8001a7c:	20000024 	.word	0x20000024
			}
			else{
				// inhibit false sectorchanges due to artefacts in the Hall signal.
				
				// if the sector changes to quickly (artefacts) then don`t reset the hall sector time;
				if(SectorTime >= (Prev_Sector_times[PreviousHallSector]>>1)){
 8001a80:	4b74      	ldr	r3, [pc, #464]	; (8001c54 <estimate_rotor_phase+0x4a8>)
 8001a82:	881b      	ldrh	r3, [r3, #0]
 8001a84:	461a      	mov	r2, r3
 8001a86:	4b74      	ldr	r3, [pc, #464]	; (8001c58 <estimate_rotor_phase+0x4ac>)
 8001a88:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001a8c:	085b      	lsrs	r3, r3, #1
 8001a8e:	b29a      	uxth	r2, r3
 8001a90:	4b72      	ldr	r3, [pc, #456]	; (8001c5c <estimate_rotor_phase+0x4b0>)
 8001a92:	881b      	ldrh	r3, [r3, #0]
 8001a94:	429a      	cmp	r2, r3
 8001a96:	d810      	bhi.n	8001aba <estimate_rotor_phase+0x30e>
				SectorTime = SectorTIM.Instance->CNT;							  // Secure the Sector Time
 8001a98:	4b71      	ldr	r3, [pc, #452]	; (8001c60 <estimate_rotor_phase+0x4b4>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a9e:	b29a      	uxth	r2, r3
 8001aa0:	4b6e      	ldr	r3, [pc, #440]	; (8001c5c <estimate_rotor_phase+0x4b0>)
 8001aa2:	801a      	strh	r2, [r3, #0]
				Prev_Sector_times[PreviousHallSector] = SectorTime;				// The Measured Sector Time is form the Previous Sector to this one;
 8001aa4:	4b6b      	ldr	r3, [pc, #428]	; (8001c54 <estimate_rotor_phase+0x4a8>)
 8001aa6:	881b      	ldrh	r3, [r3, #0]
 8001aa8:	461a      	mov	r2, r3
 8001aaa:	4b6c      	ldr	r3, [pc, #432]	; (8001c5c <estimate_rotor_phase+0x4b0>)
 8001aac:	8819      	ldrh	r1, [r3, #0]
 8001aae:	4b6a      	ldr	r3, [pc, #424]	; (8001c58 <estimate_rotor_phase+0x4ac>)
 8001ab0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				block_commutation_active=0;
 8001ab4:	4b6b      	ldr	r3, [pc, #428]	; (8001c64 <estimate_rotor_phase+0x4b8>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	701a      	strb	r2, [r3, #0]
				}
			}
			SectorTIM.Instance->CNT=0;													// reset counter
 8001aba:	4b69      	ldr	r3, [pc, #420]	; (8001c60 <estimate_rotor_phase+0x4b4>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	2200      	movs	r2, #0
 8001ac0:	625a      	str	r2, [r3, #36]	; 0x24
			//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
		}
		
		
		if(block_commutation_active){
 8001ac2:	4b68      	ldr	r3, [pc, #416]	; (8001c64 <estimate_rotor_phase+0x4b8>)
 8001ac4:	781b      	ldrb	r3, [r3, #0]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d003      	beq.n	8001ad2 <estimate_rotor_phase+0x326>
			motor->rotorphase = offset;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	893a      	ldrh	r2, [r7, #8]
 8001ace:	801a      	strh	r2, [r3, #0]
 8001ad0:	e02e      	b.n	8001b30 <estimate_rotor_phase+0x384>
		}
		else{
			motor->rotorphase= offset + (CurrentSectorTime*HallSector_phase_span[HallSector])/Prev_Sector_times[HallSector];
 8001ad2:	8a3b      	ldrh	r3, [r7, #16]
 8001ad4:	4a64      	ldr	r2, [pc, #400]	; (8001c68 <estimate_rotor_phase+0x4bc>)
 8001ad6:	7812      	ldrb	r2, [r2, #0]
 8001ad8:	4611      	mov	r1, r2
 8001ada:	4a64      	ldr	r2, [pc, #400]	; (8001c6c <estimate_rotor_phase+0x4c0>)
 8001adc:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8001ae0:	fb02 f303 	mul.w	r3, r2, r3
 8001ae4:	4a60      	ldr	r2, [pc, #384]	; (8001c68 <estimate_rotor_phase+0x4bc>)
 8001ae6:	7812      	ldrb	r2, [r2, #0]
 8001ae8:	4611      	mov	r1, r2
 8001aea:	4a5b      	ldr	r2, [pc, #364]	; (8001c58 <estimate_rotor_phase+0x4ac>)
 8001aec:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8001af0:	fb93 f3f2 	sdiv	r3, r3, r2
 8001af4:	b29a      	uxth	r2, r3
 8001af6:	893b      	ldrh	r3, [r7, #8]
 8001af8:	4413      	add	r3, r2
 8001afa:	b29a      	uxth	r2, r3
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	801a      	strh	r2, [r3, #0]
			if(motor->rotorphase > (offset+HallSector_phase_span[HallSector])) motor->rotorphase= offset+HallSector_phase_span[HallSector];
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	881b      	ldrh	r3, [r3, #0]
 8001b04:	4619      	mov	r1, r3
 8001b06:	893b      	ldrh	r3, [r7, #8]
 8001b08:	4a57      	ldr	r2, [pc, #348]	; (8001c68 <estimate_rotor_phase+0x4bc>)
 8001b0a:	7812      	ldrb	r2, [r2, #0]
 8001b0c:	4610      	mov	r0, r2
 8001b0e:	4a57      	ldr	r2, [pc, #348]	; (8001c6c <estimate_rotor_phase+0x4c0>)
 8001b10:	f832 2010 	ldrh.w	r2, [r2, r0, lsl #1]
 8001b14:	4413      	add	r3, r2
 8001b16:	4299      	cmp	r1, r3
 8001b18:	dd0a      	ble.n	8001b30 <estimate_rotor_phase+0x384>
 8001b1a:	4b53      	ldr	r3, [pc, #332]	; (8001c68 <estimate_rotor_phase+0x4bc>)
 8001b1c:	781b      	ldrb	r3, [r3, #0]
 8001b1e:	461a      	mov	r2, r3
 8001b20:	4b52      	ldr	r3, [pc, #328]	; (8001c6c <estimate_rotor_phase+0x4c0>)
 8001b22:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8001b26:	893b      	ldrh	r3, [r7, #8]
 8001b28:	4413      	add	r3, r2
 8001b2a:	b29a      	uxth	r2, r3
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	801a      	strh	r2, [r3, #0]
		}
		PreviousHallSector=HallSector;
 8001b30:	4b4d      	ldr	r3, [pc, #308]	; (8001c68 <estimate_rotor_phase+0x4bc>)
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	b29a      	uxth	r2, r3
 8001b36:	4b47      	ldr	r3, [pc, #284]	; (8001c54 <estimate_rotor_phase+0x4a8>)
 8001b38:	801a      	strh	r2, [r3, #0]
 8001b3a:	e03d      	b.n	8001bb8 <estimate_rotor_phase+0x40c>
	}
	else{
		offset = HallSector_phase_offset[PreviousHallSector];
 8001b3c:	4b45      	ldr	r3, [pc, #276]	; (8001c54 <estimate_rotor_phase+0x4a8>)
 8001b3e:	881b      	ldrh	r3, [r3, #0]
 8001b40:	461a      	mov	r2, r3
 8001b42:	4b4b      	ldr	r3, [pc, #300]	; (8001c70 <estimate_rotor_phase+0x4c4>)
 8001b44:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001b48:	813b      	strh	r3, [r7, #8]
		if(block_commutation_active){
 8001b4a:	4b46      	ldr	r3, [pc, #280]	; (8001c64 <estimate_rotor_phase+0x4b8>)
 8001b4c:	781b      	ldrb	r3, [r3, #0]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d003      	beq.n	8001b5a <estimate_rotor_phase+0x3ae>
			motor->rotorphase = offset;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	893a      	ldrh	r2, [r7, #8]
 8001b56:	801a      	strh	r2, [r3, #0]
 8001b58:	e02e      	b.n	8001bb8 <estimate_rotor_phase+0x40c>
		}
		else{
			motor->rotorphase= offset + (CurrentSectorTime*HallSector_phase_span[HallSector])/Prev_Sector_times[HallSector];
 8001b5a:	8a3b      	ldrh	r3, [r7, #16]
 8001b5c:	4a42      	ldr	r2, [pc, #264]	; (8001c68 <estimate_rotor_phase+0x4bc>)
 8001b5e:	7812      	ldrb	r2, [r2, #0]
 8001b60:	4611      	mov	r1, r2
 8001b62:	4a42      	ldr	r2, [pc, #264]	; (8001c6c <estimate_rotor_phase+0x4c0>)
 8001b64:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8001b68:	fb02 f303 	mul.w	r3, r2, r3
 8001b6c:	4a3e      	ldr	r2, [pc, #248]	; (8001c68 <estimate_rotor_phase+0x4bc>)
 8001b6e:	7812      	ldrb	r2, [r2, #0]
 8001b70:	4611      	mov	r1, r2
 8001b72:	4a39      	ldr	r2, [pc, #228]	; (8001c58 <estimate_rotor_phase+0x4ac>)
 8001b74:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8001b78:	fb93 f3f2 	sdiv	r3, r3, r2
 8001b7c:	b29a      	uxth	r2, r3
 8001b7e:	893b      	ldrh	r3, [r7, #8]
 8001b80:	4413      	add	r3, r2
 8001b82:	b29a      	uxth	r2, r3
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	801a      	strh	r2, [r3, #0]
			if(motor->rotorphase > (offset+HallSector_phase_span[HallSector])) motor->rotorphase= offset+HallSector_phase_span[HallSector];
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	881b      	ldrh	r3, [r3, #0]
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	893b      	ldrh	r3, [r7, #8]
 8001b90:	4a35      	ldr	r2, [pc, #212]	; (8001c68 <estimate_rotor_phase+0x4bc>)
 8001b92:	7812      	ldrb	r2, [r2, #0]
 8001b94:	4610      	mov	r0, r2
 8001b96:	4a35      	ldr	r2, [pc, #212]	; (8001c6c <estimate_rotor_phase+0x4c0>)
 8001b98:	f832 2010 	ldrh.w	r2, [r2, r0, lsl #1]
 8001b9c:	4413      	add	r3, r2
 8001b9e:	4299      	cmp	r1, r3
 8001ba0:	dd0a      	ble.n	8001bb8 <estimate_rotor_phase+0x40c>
 8001ba2:	4b31      	ldr	r3, [pc, #196]	; (8001c68 <estimate_rotor_phase+0x4bc>)
 8001ba4:	781b      	ldrb	r3, [r3, #0]
 8001ba6:	461a      	mov	r2, r3
 8001ba8:	4b30      	ldr	r3, [pc, #192]	; (8001c6c <estimate_rotor_phase+0x4c0>)
 8001baa:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8001bae:	893b      	ldrh	r3, [r7, #8]
 8001bb0:	4413      	add	r3, r2
 8001bb2:	b29a      	uxth	r2, r3
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	801a      	strh	r2, [r3, #0]
		}
	}
	
	// Correct for glitches in the rotorphase

	int16_t rate_of_change = 0;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	82bb      	strh	r3, [r7, #20]

	// When the rotorphase passes 360° correct for it
	if(motor->rotorphase-prev_phase<300){
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	881b      	ldrh	r3, [r3, #0]
 8001bc0:	461a      	mov	r2, r3
 8001bc2:	4b2c      	ldr	r3, [pc, #176]	; (8001c74 <estimate_rotor_phase+0x4c8>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	1ad3      	subs	r3, r2, r3
 8001bc8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001bcc:	da0b      	bge.n	8001be6 <estimate_rotor_phase+0x43a>
		rate_of_change = (motor->rotorphase+360)-prev_phase;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	881a      	ldrh	r2, [r3, #0]
 8001bd2:	4b28      	ldr	r3, [pc, #160]	; (8001c74 <estimate_rotor_phase+0x4c8>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	b29b      	uxth	r3, r3
 8001bd8:	1ad3      	subs	r3, r2, r3
 8001bda:	b29b      	uxth	r3, r3
 8001bdc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001be0:	b29b      	uxth	r3, r3
 8001be2:	82bb      	strh	r3, [r7, #20]
 8001be4:	e01c      	b.n	8001c20 <estimate_rotor_phase+0x474>
	}
	else if(motor->rotorphase - prev_phase >300){
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	881b      	ldrh	r3, [r3, #0]
 8001bea:	461a      	mov	r2, r3
 8001bec:	4b21      	ldr	r3, [pc, #132]	; (8001c74 <estimate_rotor_phase+0x4c8>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	1ad3      	subs	r3, r2, r3
 8001bf2:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001bf6:	dd0b      	ble.n	8001c10 <estimate_rotor_phase+0x464>
		rate_of_change = (motor->rotorphase-360)-prev_phase;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	881a      	ldrh	r2, [r3, #0]
 8001bfc:	4b1d      	ldr	r3, [pc, #116]	; (8001c74 <estimate_rotor_phase+0x4c8>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	b29b      	uxth	r3, r3
 8001c02:	1ad3      	subs	r3, r2, r3
 8001c04:	b29b      	uxth	r3, r3
 8001c06:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001c0a:	b29b      	uxth	r3, r3
 8001c0c:	82bb      	strh	r3, [r7, #20]
 8001c0e:	e007      	b.n	8001c20 <estimate_rotor_phase+0x474>
	}
	else{
		rate_of_change = motor->rotorphase-prev_phase;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	881a      	ldrh	r2, [r3, #0]
 8001c14:	4b17      	ldr	r3, [pc, #92]	; (8001c74 <estimate_rotor_phase+0x4c8>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	b29b      	uxth	r3, r3
 8001c1a:	1ad3      	subs	r3, r2, r3
 8001c1c:	b29b      	uxth	r3, r3
 8001c1e:	82bb      	strh	r3, [r7, #20]
	}

	if(rate_of_change>5) motor->corr_rotor_phase = prev_phase + 5;
 8001c20:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001c24:	2b05      	cmp	r3, #5
 8001c26:	dd07      	ble.n	8001c38 <estimate_rotor_phase+0x48c>
 8001c28:	4b12      	ldr	r3, [pc, #72]	; (8001c74 <estimate_rotor_phase+0x4c8>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	b29b      	uxth	r3, r3
 8001c2e:	3305      	adds	r3, #5
 8001c30:	b29a      	uxth	r2, r3
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	805a      	strh	r2, [r3, #2]
 8001c36:	e003      	b.n	8001c40 <estimate_rotor_phase+0x494>
	else{ motor->corr_rotor_phase=motor->rotorphase;}
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	881a      	ldrh	r2, [r3, #0]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	805a      	strh	r2, [r3, #2]

	prev_phase = motor->rotorphase;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	881b      	ldrh	r3, [r3, #0]
 8001c44:	461a      	mov	r2, r3
 8001c46:	4b0b      	ldr	r3, [pc, #44]	; (8001c74 <estimate_rotor_phase+0x4c8>)
 8001c48:	601a      	str	r2, [r3, #0]
}
 8001c4a:	bf00      	nop
 8001c4c:	371c      	adds	r7, #28
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd90      	pop	{r4, r7, pc}
 8001c52:	bf00      	nop
 8001c54:	2000023e 	.word	0x2000023e
 8001c58:	20000218 	.word	0x20000218
 8001c5c:	20000240 	.word	0x20000240
 8001c60:	20000598 	.word	0x20000598
 8001c64:	20000024 	.word	0x20000024
 8001c68:	2000023c 	.word	0x2000023c
 8001c6c:	20000204 	.word	0x20000204
 8001c70:	20000014 	.word	0x20000014
 8001c74:	20000244 	.word	0x20000244

08001c78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b083      	sub	sp, #12
 8001c7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c7e:	4b0f      	ldr	r3, [pc, #60]	; (8001cbc <HAL_MspInit+0x44>)
 8001c80:	699b      	ldr	r3, [r3, #24]
 8001c82:	4a0e      	ldr	r2, [pc, #56]	; (8001cbc <HAL_MspInit+0x44>)
 8001c84:	f043 0301 	orr.w	r3, r3, #1
 8001c88:	6193      	str	r3, [r2, #24]
 8001c8a:	4b0c      	ldr	r3, [pc, #48]	; (8001cbc <HAL_MspInit+0x44>)
 8001c8c:	699b      	ldr	r3, [r3, #24]
 8001c8e:	f003 0301 	and.w	r3, r3, #1
 8001c92:	607b      	str	r3, [r7, #4]
 8001c94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c96:	4b09      	ldr	r3, [pc, #36]	; (8001cbc <HAL_MspInit+0x44>)
 8001c98:	69db      	ldr	r3, [r3, #28]
 8001c9a:	4a08      	ldr	r2, [pc, #32]	; (8001cbc <HAL_MspInit+0x44>)
 8001c9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ca0:	61d3      	str	r3, [r2, #28]
 8001ca2:	4b06      	ldr	r3, [pc, #24]	; (8001cbc <HAL_MspInit+0x44>)
 8001ca4:	69db      	ldr	r3, [r3, #28]
 8001ca6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001caa:	603b      	str	r3, [r7, #0]
 8001cac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cae:	bf00      	nop
 8001cb0:	370c      	adds	r7, #12
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr
 8001cba:	bf00      	nop
 8001cbc:	40021000 	.word	0x40021000

08001cc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001cc4:	e7fe      	b.n	8001cc4 <NMI_Handler+0x4>
	...

08001cc8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  HAL_Delay(100);
 8001ccc:	2064      	movs	r0, #100	; 0x64
 8001cce:	f000 fbd3 	bl	8002478 <HAL_Delay>
	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8001cd2:	2120      	movs	r1, #32
 8001cd4:	4801      	ldr	r0, [pc, #4]	; (8001cdc <HardFault_Handler+0x14>)
 8001cd6:	f002 fbe7 	bl	80044a8 <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 8001cda:	e7f7      	b.n	8001ccc <HardFault_Handler+0x4>
 8001cdc:	48000400 	.word	0x48000400

08001ce0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ce4:	e7fe      	b.n	8001ce4 <MemManage_Handler+0x4>

08001ce6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ce6:	b480      	push	{r7}
 8001ce8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cea:	e7fe      	b.n	8001cea <BusFault_Handler+0x4>

08001cec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cf0:	e7fe      	b.n	8001cf0 <UsageFault_Handler+0x4>

08001cf2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cf2:	b480      	push	{r7}
 8001cf4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cf6:	bf00      	nop
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr

08001d00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d04:	bf00      	nop
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr

08001d0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d0e:	b480      	push	{r7}
 8001d10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d12:	bf00      	nop
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr

08001d1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d20:	f000 fb8a 	bl	8002438 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d24:	bf00      	nop
 8001d26:	bd80      	pop	{r7, pc}

08001d28 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001d2c:	4802      	ldr	r0, [pc, #8]	; (8001d38 <DMA1_Channel1_IRQHandler+0x10>)
 8001d2e:	f002 f927 	bl	8003f80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001d32:	bf00      	nop
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	200004bc 	.word	0x200004bc

08001d3c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001d40:	4802      	ldr	r0, [pc, #8]	; (8001d4c <DMA1_Channel4_IRQHandler+0x10>)
 8001d42:	f002 f91d 	bl	8003f80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001d46:	bf00      	nop
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	20000630 	.word	0x20000630

08001d50 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 interrupt.
  */
void ADC1_IRQHandler(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */
  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001d54:	4802      	ldr	r0, [pc, #8]	; (8001d60 <ADC1_IRQHandler+0x10>)
 8001d56:	f000 fdfd 	bl	8002954 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8001d5a:	bf00      	nop
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	2000046c 	.word	0x2000046c

08001d64 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break and TIM15 interrupts.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001d68:	4803      	ldr	r0, [pc, #12]	; (8001d78 <TIM1_BRK_TIM15_IRQHandler+0x14>)
 8001d6a:	f005 ff53 	bl	8007c14 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 8001d6e:	4803      	ldr	r0, [pc, #12]	; (8001d7c <TIM1_BRK_TIM15_IRQHandler+0x18>)
 8001d70:	f005 ff50 	bl	8007c14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8001d74:	bf00      	nop
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	200005e4 	.word	0x200005e4
 8001d7c:	2000054c 	.word	0x2000054c

08001d80 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001d84:	4802      	ldr	r0, [pc, #8]	; (8001d90 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001d86:	f005 ff45 	bl	8007c14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001d8a:	bf00      	nop
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	200005e4 	.word	0x200005e4

08001d94 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001d98:	4802      	ldr	r0, [pc, #8]	; (8001da4 <USART1_IRQHandler+0x10>)
 8001d9a:	f007 f843 	bl	8008e24 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001d9e:	bf00      	nop
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	20000674 	.word	0x20000674

08001da8 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority remap interrupt.
  */
void USB_LP_IRQHandler(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001dac:	4802      	ldr	r0, [pc, #8]	; (8001db8 <USB_LP_IRQHandler+0x10>)
 8001dae:	f002 fdbf 	bl	8004930 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8001db2:	bf00      	nop
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	20001390 	.word	0x20001390

08001dbc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001dc0:	4b06      	ldr	r3, [pc, #24]	; (8001ddc <SystemInit+0x20>)
 8001dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dc6:	4a05      	ldr	r2, [pc, #20]	; (8001ddc <SystemInit+0x20>)
 8001dc8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001dcc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001dd0:	bf00      	nop
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr
 8001dda:	bf00      	nop
 8001ddc:	e000ed00 	.word	0xe000ed00

08001de0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim15;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b09a      	sub	sp, #104	; 0x68
 8001de4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001de6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001dea:	2200      	movs	r2, #0
 8001dec:	601a      	str	r2, [r3, #0]
 8001dee:	605a      	str	r2, [r3, #4]
 8001df0:	609a      	str	r2, [r3, #8]
 8001df2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001df4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001df8:	2200      	movs	r2, #0
 8001dfa:	601a      	str	r2, [r3, #0]
 8001dfc:	605a      	str	r2, [r3, #4]
 8001dfe:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e00:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001e04:	2200      	movs	r2, #0
 8001e06:	601a      	str	r2, [r3, #0]
 8001e08:	605a      	str	r2, [r3, #4]
 8001e0a:	609a      	str	r2, [r3, #8]
 8001e0c:	60da      	str	r2, [r3, #12]
 8001e0e:	611a      	str	r2, [r3, #16]
 8001e10:	615a      	str	r2, [r3, #20]
 8001e12:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001e14:	1d3b      	adds	r3, r7, #4
 8001e16:	222c      	movs	r2, #44	; 0x2c
 8001e18:	2100      	movs	r1, #0
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f00b feea 	bl	800dbf4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001e20:	4b51      	ldr	r3, [pc, #324]	; (8001f68 <MX_TIM1_Init+0x188>)
 8001e22:	4a52      	ldr	r2, [pc, #328]	; (8001f6c <MX_TIM1_Init+0x18c>)
 8001e24:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001e26:	4b50      	ldr	r3, [pc, #320]	; (8001f68 <MX_TIM1_Init+0x188>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001e2c:	4b4e      	ldr	r3, [pc, #312]	; (8001f68 <MX_TIM1_Init+0x188>)
 8001e2e:	2220      	movs	r2, #32
 8001e30:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001e32:	4b4d      	ldr	r3, [pc, #308]	; (8001f68 <MX_TIM1_Init+0x188>)
 8001e34:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e38:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e3a:	4b4b      	ldr	r3, [pc, #300]	; (8001f68 <MX_TIM1_Init+0x188>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 6;
 8001e40:	4b49      	ldr	r3, [pc, #292]	; (8001f68 <MX_TIM1_Init+0x188>)
 8001e42:	2206      	movs	r2, #6
 8001e44:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e46:	4b48      	ldr	r3, [pc, #288]	; (8001f68 <MX_TIM1_Init+0x188>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001e4c:	4846      	ldr	r0, [pc, #280]	; (8001f68 <MX_TIM1_Init+0x188>)
 8001e4e:	f005 fc11 	bl	8007674 <HAL_TIM_Base_Init>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d001      	beq.n	8001e5c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001e58:	f7ff fa4a 	bl	80012f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e60:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001e62:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001e66:	4619      	mov	r1, r3
 8001e68:	483f      	ldr	r0, [pc, #252]	; (8001f68 <MX_TIM1_Init+0x188>)
 8001e6a:	f006 f907 	bl	800807c <HAL_TIM_ConfigClockSource>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d001      	beq.n	8001e78 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001e74:	f7ff fa3c 	bl	80012f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001e78:	483b      	ldr	r0, [pc, #236]	; (8001f68 <MX_TIM1_Init+0x188>)
 8001e7a:	f005 fc52 	bl	8007722 <HAL_TIM_PWM_Init>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d001      	beq.n	8001e88 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001e84:	f7ff fa34 	bl	80012f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_UPDATE;
 8001e8c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001e90:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8001e92:	2380      	movs	r3, #128	; 0x80
 8001e94:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001e96:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	4832      	ldr	r0, [pc, #200]	; (8001f68 <MX_TIM1_Init+0x188>)
 8001e9e:	f006 fe51 	bl	8008b44 <HAL_TIMEx_MasterConfigSynchronization>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d001      	beq.n	8001eac <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 8001ea8:	f7ff fa22 	bl	80012f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001eac:	2360      	movs	r3, #96	; 0x60
 8001eae:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 32768;
 8001eb0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001eb4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001eca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001ece:	2200      	movs	r2, #0
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	4825      	ldr	r0, [pc, #148]	; (8001f68 <MX_TIM1_Init+0x188>)
 8001ed4:	f005 ffbe 	bl	8007e54 <HAL_TIM_PWM_ConfigChannel>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d001      	beq.n	8001ee2 <MX_TIM1_Init+0x102>
  {
    Error_Handler();
 8001ede:	f7ff fa07 	bl	80012f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001ee2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001ee6:	2204      	movs	r2, #4
 8001ee8:	4619      	mov	r1, r3
 8001eea:	481f      	ldr	r0, [pc, #124]	; (8001f68 <MX_TIM1_Init+0x188>)
 8001eec:	f005 ffb2 	bl	8007e54 <HAL_TIM_PWM_ConfigChannel>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d001      	beq.n	8001efa <MX_TIM1_Init+0x11a>
  {
    Error_Handler();
 8001ef6:	f7ff f9fb 	bl	80012f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001efa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001efe:	2208      	movs	r2, #8
 8001f00:	4619      	mov	r1, r3
 8001f02:	4819      	ldr	r0, [pc, #100]	; (8001f68 <MX_TIM1_Init+0x188>)
 8001f04:	f005 ffa6 	bl	8007e54 <HAL_TIM_PWM_ConfigChannel>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d001      	beq.n	8001f12 <MX_TIM1_Init+0x132>
  {
    Error_Handler();
 8001f0e:	f7ff f9ef 	bl	80012f0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001f12:	2300      	movs	r3, #0
 8001f14:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001f16:	2300      	movs	r3, #0
 8001f18:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 8001f22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f26:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001f28:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f2c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001f32:	2300      	movs	r3, #0
 8001f34:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001f36:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f3a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001f40:	2300      	movs	r3, #0
 8001f42:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001f44:	1d3b      	adds	r3, r7, #4
 8001f46:	4619      	mov	r1, r3
 8001f48:	4807      	ldr	r0, [pc, #28]	; (8001f68 <MX_TIM1_Init+0x188>)
 8001f4a:	f006 fe61 	bl	8008c10 <HAL_TIMEx_ConfigBreakDeadTime>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d001      	beq.n	8001f58 <MX_TIM1_Init+0x178>
  {
    Error_Handler();
 8001f54:	f7ff f9cc 	bl	80012f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001f58:	4803      	ldr	r0, [pc, #12]	; (8001f68 <MX_TIM1_Init+0x188>)
 8001f5a:	f000 f8ef 	bl	800213c <HAL_TIM_MspPostInit>

}
 8001f5e:	bf00      	nop
 8001f60:	3768      	adds	r7, #104	; 0x68
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	200005e4 	.word	0x200005e4
 8001f6c:	40012c00 	.word	0x40012c00

08001f70 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b084      	sub	sp, #16
 8001f74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f76:	1d3b      	adds	r3, r7, #4
 8001f78:	2200      	movs	r2, #0
 8001f7a:	601a      	str	r2, [r3, #0]
 8001f7c:	605a      	str	r2, [r3, #4]
 8001f7e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001f80:	4b14      	ldr	r3, [pc, #80]	; (8001fd4 <MX_TIM6_Init+0x64>)
 8001f82:	4a15      	ldr	r2, [pc, #84]	; (8001fd8 <MX_TIM6_Init+0x68>)
 8001f84:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 107;
 8001f86:	4b13      	ldr	r3, [pc, #76]	; (8001fd4 <MX_TIM6_Init+0x64>)
 8001f88:	226b      	movs	r2, #107	; 0x6b
 8001f8a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f8c:	4b11      	ldr	r3, [pc, #68]	; (8001fd4 <MX_TIM6_Init+0x64>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8001f92:	4b10      	ldr	r3, [pc, #64]	; (8001fd4 <MX_TIM6_Init+0x64>)
 8001f94:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f98:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f9a:	4b0e      	ldr	r3, [pc, #56]	; (8001fd4 <MX_TIM6_Init+0x64>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001fa0:	480c      	ldr	r0, [pc, #48]	; (8001fd4 <MX_TIM6_Init+0x64>)
 8001fa2:	f005 fb67 	bl	8007674 <HAL_TIM_Base_Init>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d001      	beq.n	8001fb0 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001fac:	f7ff f9a0 	bl	80012f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001fb8:	1d3b      	adds	r3, r7, #4
 8001fba:	4619      	mov	r1, r3
 8001fbc:	4805      	ldr	r0, [pc, #20]	; (8001fd4 <MX_TIM6_Init+0x64>)
 8001fbe:	f006 fdc1 	bl	8008b44 <HAL_TIMEx_MasterConfigSynchronization>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d001      	beq.n	8001fcc <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001fc8:	f7ff f992 	bl	80012f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001fcc:	bf00      	nop
 8001fce:	3710      	adds	r7, #16
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	20000598 	.word	0x20000598
 8001fd8:	40001000 	.word	0x40001000

08001fdc <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b088      	sub	sp, #32
 8001fe0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001fe2:	f107 0310 	add.w	r3, r7, #16
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	601a      	str	r2, [r3, #0]
 8001fea:	605a      	str	r2, [r3, #4]
 8001fec:	609a      	str	r2, [r3, #8]
 8001fee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ff0:	1d3b      	adds	r3, r7, #4
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	601a      	str	r2, [r3, #0]
 8001ff6:	605a      	str	r2, [r3, #4]
 8001ff8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001ffa:	4b1f      	ldr	r3, [pc, #124]	; (8002078 <MX_TIM15_Init+0x9c>)
 8001ffc:	4a1f      	ldr	r2, [pc, #124]	; (800207c <MX_TIM15_Init+0xa0>)
 8001ffe:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8002000:	4b1d      	ldr	r3, [pc, #116]	; (8002078 <MX_TIM15_Init+0x9c>)
 8002002:	2200      	movs	r2, #0
 8002004:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002006:	4b1c      	ldr	r3, [pc, #112]	; (8002078 <MX_TIM15_Init+0x9c>)
 8002008:	2200      	movs	r2, #0
 800200a:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 800200c:	4b1a      	ldr	r3, [pc, #104]	; (8002078 <MX_TIM15_Init+0x9c>)
 800200e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002012:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002014:	4b18      	ldr	r3, [pc, #96]	; (8002078 <MX_TIM15_Init+0x9c>)
 8002016:	2200      	movs	r2, #0
 8002018:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800201a:	4b17      	ldr	r3, [pc, #92]	; (8002078 <MX_TIM15_Init+0x9c>)
 800201c:	2200      	movs	r2, #0
 800201e:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002020:	4b15      	ldr	r3, [pc, #84]	; (8002078 <MX_TIM15_Init+0x9c>)
 8002022:	2200      	movs	r2, #0
 8002024:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8002026:	4814      	ldr	r0, [pc, #80]	; (8002078 <MX_TIM15_Init+0x9c>)
 8002028:	f005 fb24 	bl	8007674 <HAL_TIM_Base_Init>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d001      	beq.n	8002036 <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 8002032:	f7ff f95d 	bl	80012f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002036:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800203a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 800203c:	f107 0310 	add.w	r3, r7, #16
 8002040:	4619      	mov	r1, r3
 8002042:	480d      	ldr	r0, [pc, #52]	; (8002078 <MX_TIM15_Init+0x9c>)
 8002044:	f006 f81a 	bl	800807c <HAL_TIM_ConfigClockSource>
 8002048:	4603      	mov	r3, r0
 800204a:	2b00      	cmp	r3, #0
 800204c:	d001      	beq.n	8002052 <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 800204e:	f7ff f94f 	bl	80012f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002052:	2300      	movs	r3, #0
 8002054:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002056:	2300      	movs	r3, #0
 8002058:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800205a:	1d3b      	adds	r3, r7, #4
 800205c:	4619      	mov	r1, r3
 800205e:	4806      	ldr	r0, [pc, #24]	; (8002078 <MX_TIM15_Init+0x9c>)
 8002060:	f006 fd70 	bl	8008b44 <HAL_TIMEx_MasterConfigSynchronization>
 8002064:	4603      	mov	r3, r0
 8002066:	2b00      	cmp	r3, #0
 8002068:	d001      	beq.n	800206e <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 800206a:	f7ff f941 	bl	80012f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 800206e:	bf00      	nop
 8002070:	3720      	adds	r7, #32
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	2000054c 	.word	0x2000054c
 800207c:	40014000 	.word	0x40014000

08002080 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b086      	sub	sp, #24
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a27      	ldr	r2, [pc, #156]	; (800212c <HAL_TIM_Base_MspInit+0xac>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d11c      	bne.n	80020cc <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002092:	4b27      	ldr	r3, [pc, #156]	; (8002130 <HAL_TIM_Base_MspInit+0xb0>)
 8002094:	699b      	ldr	r3, [r3, #24]
 8002096:	4a26      	ldr	r2, [pc, #152]	; (8002130 <HAL_TIM_Base_MspInit+0xb0>)
 8002098:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800209c:	6193      	str	r3, [r2, #24]
 800209e:	4b24      	ldr	r3, [pc, #144]	; (8002130 <HAL_TIM_Base_MspInit+0xb0>)
 80020a0:	699b      	ldr	r3, [r3, #24]
 80020a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020a6:	617b      	str	r3, [r7, #20]
 80020a8:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 80020aa:	2200      	movs	r2, #0
 80020ac:	2100      	movs	r1, #0
 80020ae:	2018      	movs	r0, #24
 80020b0:	f001 fe13 	bl	8003cda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80020b4:	2018      	movs	r0, #24
 80020b6:	f001 fe2c 	bl	8003d12 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80020ba:	2200      	movs	r2, #0
 80020bc:	2100      	movs	r1, #0
 80020be:	2019      	movs	r0, #25
 80020c0:	f001 fe0b 	bl	8003cda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80020c4:	2019      	movs	r0, #25
 80020c6:	f001 fe24 	bl	8003d12 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 80020ca:	e02a      	b.n	8002122 <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM6)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a18      	ldr	r2, [pc, #96]	; (8002134 <HAL_TIM_Base_MspInit+0xb4>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d10c      	bne.n	80020f0 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80020d6:	4b16      	ldr	r3, [pc, #88]	; (8002130 <HAL_TIM_Base_MspInit+0xb0>)
 80020d8:	69db      	ldr	r3, [r3, #28]
 80020da:	4a15      	ldr	r2, [pc, #84]	; (8002130 <HAL_TIM_Base_MspInit+0xb0>)
 80020dc:	f043 0310 	orr.w	r3, r3, #16
 80020e0:	61d3      	str	r3, [r2, #28]
 80020e2:	4b13      	ldr	r3, [pc, #76]	; (8002130 <HAL_TIM_Base_MspInit+0xb0>)
 80020e4:	69db      	ldr	r3, [r3, #28]
 80020e6:	f003 0310 	and.w	r3, r3, #16
 80020ea:	613b      	str	r3, [r7, #16]
 80020ec:	693b      	ldr	r3, [r7, #16]
}
 80020ee:	e018      	b.n	8002122 <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM15)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a10      	ldr	r2, [pc, #64]	; (8002138 <HAL_TIM_Base_MspInit+0xb8>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d113      	bne.n	8002122 <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80020fa:	4b0d      	ldr	r3, [pc, #52]	; (8002130 <HAL_TIM_Base_MspInit+0xb0>)
 80020fc:	699b      	ldr	r3, [r3, #24]
 80020fe:	4a0c      	ldr	r2, [pc, #48]	; (8002130 <HAL_TIM_Base_MspInit+0xb0>)
 8002100:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002104:	6193      	str	r3, [r2, #24]
 8002106:	4b0a      	ldr	r3, [pc, #40]	; (8002130 <HAL_TIM_Base_MspInit+0xb0>)
 8002108:	699b      	ldr	r3, [r3, #24]
 800210a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800210e:	60fb      	str	r3, [r7, #12]
 8002110:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8002112:	2200      	movs	r2, #0
 8002114:	2100      	movs	r1, #0
 8002116:	2018      	movs	r0, #24
 8002118:	f001 fddf 	bl	8003cda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 800211c:	2018      	movs	r0, #24
 800211e:	f001 fdf8 	bl	8003d12 <HAL_NVIC_EnableIRQ>
}
 8002122:	bf00      	nop
 8002124:	3718      	adds	r7, #24
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	40012c00 	.word	0x40012c00
 8002130:	40021000 	.word	0x40021000
 8002134:	40001000 	.word	0x40001000
 8002138:	40014000 	.word	0x40014000

0800213c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b08a      	sub	sp, #40	; 0x28
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002144:	f107 0314 	add.w	r3, r7, #20
 8002148:	2200      	movs	r2, #0
 800214a:	601a      	str	r2, [r3, #0]
 800214c:	605a      	str	r2, [r3, #4]
 800214e:	609a      	str	r2, [r3, #8]
 8002150:	60da      	str	r2, [r3, #12]
 8002152:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a29      	ldr	r2, [pc, #164]	; (8002200 <HAL_TIM_MspPostInit+0xc4>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d14b      	bne.n	80021f6 <HAL_TIM_MspPostInit+0xba>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800215e:	4b29      	ldr	r3, [pc, #164]	; (8002204 <HAL_TIM_MspPostInit+0xc8>)
 8002160:	695b      	ldr	r3, [r3, #20]
 8002162:	4a28      	ldr	r2, [pc, #160]	; (8002204 <HAL_TIM_MspPostInit+0xc8>)
 8002164:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002168:	6153      	str	r3, [r2, #20]
 800216a:	4b26      	ldr	r3, [pc, #152]	; (8002204 <HAL_TIM_MspPostInit+0xc8>)
 800216c:	695b      	ldr	r3, [r3, #20]
 800216e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002172:	613b      	str	r3, [r7, #16]
 8002174:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002176:	4b23      	ldr	r3, [pc, #140]	; (8002204 <HAL_TIM_MspPostInit+0xc8>)
 8002178:	695b      	ldr	r3, [r3, #20]
 800217a:	4a22      	ldr	r2, [pc, #136]	; (8002204 <HAL_TIM_MspPostInit+0xc8>)
 800217c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002180:	6153      	str	r3, [r2, #20]
 8002182:	4b20      	ldr	r3, [pc, #128]	; (8002204 <HAL_TIM_MspPostInit+0xc8>)
 8002184:	695b      	ldr	r3, [r3, #20]
 8002186:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800218a:	60fb      	str	r3, [r7, #12]
 800218c:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = UHI_Pin|VHI_Pin;
 800218e:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8002192:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002194:	2302      	movs	r3, #2
 8002196:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002198:	2300      	movs	r3, #0
 800219a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800219c:	2300      	movs	r3, #0
 800219e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80021a0:	2306      	movs	r3, #6
 80021a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021a4:	f107 0314 	add.w	r3, r7, #20
 80021a8:	4619      	mov	r1, r3
 80021aa:	4817      	ldr	r0, [pc, #92]	; (8002208 <HAL_TIM_MspPostInit+0xcc>)
 80021ac:	f001 ffda 	bl	8004164 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = WHI_Pin;
 80021b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80021b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021b6:	2302      	movs	r3, #2
 80021b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ba:	2300      	movs	r3, #0
 80021bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021be:	2300      	movs	r3, #0
 80021c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 80021c2:	2304      	movs	r3, #4
 80021c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(WHI_GPIO_Port, &GPIO_InitStruct);
 80021c6:	f107 0314 	add.w	r3, r7, #20
 80021ca:	4619      	mov	r1, r3
 80021cc:	480e      	ldr	r0, [pc, #56]	; (8002208 <HAL_TIM_MspPostInit+0xcc>)
 80021ce:	f001 ffc9 	bl	8004164 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULI_Pin|VLI_Pin|WLI_Pin;
 80021d2:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80021d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021d8:	2302      	movs	r3, #2
 80021da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021dc:	2300      	movs	r3, #0
 80021de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021e0:	2300      	movs	r3, #0
 80021e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80021e4:	2306      	movs	r3, #6
 80021e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021e8:	f107 0314 	add.w	r3, r7, #20
 80021ec:	4619      	mov	r1, r3
 80021ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021f2:	f001 ffb7 	bl	8004164 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80021f6:	bf00      	nop
 80021f8:	3728      	adds	r7, #40	; 0x28
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	40012c00 	.word	0x40012c00
 8002204:	40021000 	.word	0x40021000
 8002208:	48000400 	.word	0x48000400

0800220c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002210:	4b14      	ldr	r3, [pc, #80]	; (8002264 <MX_USART1_UART_Init+0x58>)
 8002212:	4a15      	ldr	r2, [pc, #84]	; (8002268 <MX_USART1_UART_Init+0x5c>)
 8002214:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 256000;
 8002216:	4b13      	ldr	r3, [pc, #76]	; (8002264 <MX_USART1_UART_Init+0x58>)
 8002218:	f44f 327a 	mov.w	r2, #256000	; 0x3e800
 800221c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800221e:	4b11      	ldr	r3, [pc, #68]	; (8002264 <MX_USART1_UART_Init+0x58>)
 8002220:	2200      	movs	r2, #0
 8002222:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002224:	4b0f      	ldr	r3, [pc, #60]	; (8002264 <MX_USART1_UART_Init+0x58>)
 8002226:	2200      	movs	r2, #0
 8002228:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800222a:	4b0e      	ldr	r3, [pc, #56]	; (8002264 <MX_USART1_UART_Init+0x58>)
 800222c:	2200      	movs	r2, #0
 800222e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002230:	4b0c      	ldr	r3, [pc, #48]	; (8002264 <MX_USART1_UART_Init+0x58>)
 8002232:	220c      	movs	r2, #12
 8002234:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002236:	4b0b      	ldr	r3, [pc, #44]	; (8002264 <MX_USART1_UART_Init+0x58>)
 8002238:	2200      	movs	r2, #0
 800223a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800223c:	4b09      	ldr	r3, [pc, #36]	; (8002264 <MX_USART1_UART_Init+0x58>)
 800223e:	2200      	movs	r2, #0
 8002240:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002242:	4b08      	ldr	r3, [pc, #32]	; (8002264 <MX_USART1_UART_Init+0x58>)
 8002244:	2200      	movs	r2, #0
 8002246:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002248:	4b06      	ldr	r3, [pc, #24]	; (8002264 <MX_USART1_UART_Init+0x58>)
 800224a:	2200      	movs	r2, #0
 800224c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800224e:	4805      	ldr	r0, [pc, #20]	; (8002264 <MX_USART1_UART_Init+0x58>)
 8002250:	f006 fd99 	bl	8008d86 <HAL_UART_Init>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d001      	beq.n	800225e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800225a:	f7ff f849 	bl	80012f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800225e:	bf00      	nop
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	20000674 	.word	0x20000674
 8002268:	40013800 	.word	0x40013800

0800226c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b08a      	sub	sp, #40	; 0x28
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002274:	f107 0314 	add.w	r3, r7, #20
 8002278:	2200      	movs	r2, #0
 800227a:	601a      	str	r2, [r3, #0]
 800227c:	605a      	str	r2, [r3, #4]
 800227e:	609a      	str	r2, [r3, #8]
 8002280:	60da      	str	r2, [r3, #12]
 8002282:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a2e      	ldr	r2, [pc, #184]	; (8002344 <HAL_UART_MspInit+0xd8>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d155      	bne.n	800233a <HAL_UART_MspInit+0xce>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800228e:	4b2e      	ldr	r3, [pc, #184]	; (8002348 <HAL_UART_MspInit+0xdc>)
 8002290:	699b      	ldr	r3, [r3, #24]
 8002292:	4a2d      	ldr	r2, [pc, #180]	; (8002348 <HAL_UART_MspInit+0xdc>)
 8002294:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002298:	6193      	str	r3, [r2, #24]
 800229a:	4b2b      	ldr	r3, [pc, #172]	; (8002348 <HAL_UART_MspInit+0xdc>)
 800229c:	699b      	ldr	r3, [r3, #24]
 800229e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022a2:	613b      	str	r3, [r7, #16]
 80022a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022a6:	4b28      	ldr	r3, [pc, #160]	; (8002348 <HAL_UART_MspInit+0xdc>)
 80022a8:	695b      	ldr	r3, [r3, #20]
 80022aa:	4a27      	ldr	r2, [pc, #156]	; (8002348 <HAL_UART_MspInit+0xdc>)
 80022ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022b0:	6153      	str	r3, [r2, #20]
 80022b2:	4b25      	ldr	r3, [pc, #148]	; (8002348 <HAL_UART_MspInit+0xdc>)
 80022b4:	695b      	ldr	r3, [r3, #20]
 80022b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022ba:	60fb      	str	r3, [r7, #12]
 80022bc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80022be:	23c0      	movs	r3, #192	; 0xc0
 80022c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022c2:	2302      	movs	r3, #2
 80022c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c6:	2300      	movs	r3, #0
 80022c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80022ca:	2303      	movs	r3, #3
 80022cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80022ce:	2307      	movs	r3, #7
 80022d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022d2:	f107 0314 	add.w	r3, r7, #20
 80022d6:	4619      	mov	r1, r3
 80022d8:	481c      	ldr	r0, [pc, #112]	; (800234c <HAL_UART_MspInit+0xe0>)
 80022da:	f001 ff43 	bl	8004164 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 80022de:	4b1c      	ldr	r3, [pc, #112]	; (8002350 <HAL_UART_MspInit+0xe4>)
 80022e0:	4a1c      	ldr	r2, [pc, #112]	; (8002354 <HAL_UART_MspInit+0xe8>)
 80022e2:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80022e4:	4b1a      	ldr	r3, [pc, #104]	; (8002350 <HAL_UART_MspInit+0xe4>)
 80022e6:	2210      	movs	r2, #16
 80022e8:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80022ea:	4b19      	ldr	r3, [pc, #100]	; (8002350 <HAL_UART_MspInit+0xe4>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80022f0:	4b17      	ldr	r3, [pc, #92]	; (8002350 <HAL_UART_MspInit+0xe4>)
 80022f2:	2280      	movs	r2, #128	; 0x80
 80022f4:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80022f6:	4b16      	ldr	r3, [pc, #88]	; (8002350 <HAL_UART_MspInit+0xe4>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80022fc:	4b14      	ldr	r3, [pc, #80]	; (8002350 <HAL_UART_MspInit+0xe4>)
 80022fe:	2200      	movs	r2, #0
 8002300:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002302:	4b13      	ldr	r3, [pc, #76]	; (8002350 <HAL_UART_MspInit+0xe4>)
 8002304:	2200      	movs	r2, #0
 8002306:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002308:	4b11      	ldr	r3, [pc, #68]	; (8002350 <HAL_UART_MspInit+0xe4>)
 800230a:	2200      	movs	r2, #0
 800230c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800230e:	4810      	ldr	r0, [pc, #64]	; (8002350 <HAL_UART_MspInit+0xe4>)
 8002310:	f001 fd19 	bl	8003d46 <HAL_DMA_Init>
 8002314:	4603      	mov	r3, r0
 8002316:	2b00      	cmp	r3, #0
 8002318:	d001      	beq.n	800231e <HAL_UART_MspInit+0xb2>
    {
      Error_Handler();
 800231a:	f7fe ffe9 	bl	80012f0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4a0b      	ldr	r2, [pc, #44]	; (8002350 <HAL_UART_MspInit+0xe4>)
 8002322:	66da      	str	r2, [r3, #108]	; 0x6c
 8002324:	4a0a      	ldr	r2, [pc, #40]	; (8002350 <HAL_UART_MspInit+0xe4>)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800232a:	2200      	movs	r2, #0
 800232c:	2100      	movs	r1, #0
 800232e:	2025      	movs	r0, #37	; 0x25
 8002330:	f001 fcd3 	bl	8003cda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002334:	2025      	movs	r0, #37	; 0x25
 8002336:	f001 fcec 	bl	8003d12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800233a:	bf00      	nop
 800233c:	3728      	adds	r7, #40	; 0x28
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	40013800 	.word	0x40013800
 8002348:	40021000 	.word	0x40021000
 800234c:	48000400 	.word	0x48000400
 8002350:	20000630 	.word	0x20000630
 8002354:	40020044 	.word	0x40020044

08002358 <Reset_Handler>:
    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:

  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002358:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002390 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800235c:	480d      	ldr	r0, [pc, #52]	; (8002394 <LoopForever+0x6>)
  ldr r1, =_edata
 800235e:	490e      	ldr	r1, [pc, #56]	; (8002398 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002360:	4a0e      	ldr	r2, [pc, #56]	; (800239c <LoopForever+0xe>)
  movs r3, #0
 8002362:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002364:	e002      	b.n	800236c <LoopCopyDataInit>

08002366 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002366:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002368:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800236a:	3304      	adds	r3, #4

0800236c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800236c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800236e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002370:	d3f9      	bcc.n	8002366 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002372:	4a0b      	ldr	r2, [pc, #44]	; (80023a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002374:	4c0b      	ldr	r4, [pc, #44]	; (80023a4 <LoopForever+0x16>)
  movs r3, #0
 8002376:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002378:	e001      	b.n	800237e <LoopFillZerobss>

0800237a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800237a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800237c:	3204      	adds	r2, #4

0800237e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800237e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002380:	d3fb      	bcc.n	800237a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002382:	f7ff fd1b 	bl	8001dbc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002386:	f00b fc11 	bl	800dbac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800238a:	f7fe febd 	bl	8001108 <main>

0800238e <LoopForever>:

LoopForever:
    b LoopForever
 800238e:	e7fe      	b.n	800238e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002390:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8002394:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002398:	200001a4 	.word	0x200001a4
  ldr r2, =_sidata
 800239c:	0800e000 	.word	0x0800e000
  ldr r2, =_sbss
 80023a0:	200001a4 	.word	0x200001a4
  ldr r4, =_ebss
 80023a4:	2000167c 	.word	0x2000167c

080023a8 <CAN_RX1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80023a8:	e7fe      	b.n	80023a8 <CAN_RX1_IRQHandler>
	...

080023ac <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023b0:	4b08      	ldr	r3, [pc, #32]	; (80023d4 <HAL_Init+0x28>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a07      	ldr	r2, [pc, #28]	; (80023d4 <HAL_Init+0x28>)
 80023b6:	f043 0310 	orr.w	r3, r3, #16
 80023ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023bc:	2003      	movs	r0, #3
 80023be:	f001 fc81 	bl	8003cc4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80023c2:	200f      	movs	r0, #15
 80023c4:	f000 f808 	bl	80023d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80023c8:	f7ff fc56 	bl	8001c78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023cc:	2300      	movs	r3, #0
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	40022000 	.word	0x40022000

080023d8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b082      	sub	sp, #8
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80023e0:	4b12      	ldr	r3, [pc, #72]	; (800242c <HAL_InitTick+0x54>)
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	4b12      	ldr	r3, [pc, #72]	; (8002430 <HAL_InitTick+0x58>)
 80023e6:	781b      	ldrb	r3, [r3, #0]
 80023e8:	4619      	mov	r1, r3
 80023ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80023f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80023f6:	4618      	mov	r0, r3
 80023f8:	f001 fc99 	bl	8003d2e <HAL_SYSTICK_Config>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d001      	beq.n	8002406 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e00e      	b.n	8002424 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2b0f      	cmp	r3, #15
 800240a:	d80a      	bhi.n	8002422 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800240c:	2200      	movs	r2, #0
 800240e:	6879      	ldr	r1, [r7, #4]
 8002410:	f04f 30ff 	mov.w	r0, #4294967295
 8002414:	f001 fc61 	bl	8003cda <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002418:	4a06      	ldr	r2, [pc, #24]	; (8002434 <HAL_InitTick+0x5c>)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800241e:	2300      	movs	r3, #0
 8002420:	e000      	b.n	8002424 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
}
 8002424:	4618      	mov	r0, r3
 8002426:	3708      	adds	r7, #8
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}
 800242c:	20000028 	.word	0x20000028
 8002430:	20000030 	.word	0x20000030
 8002434:	2000002c 	.word	0x2000002c

08002438 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002438:	b480      	push	{r7}
 800243a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800243c:	4b06      	ldr	r3, [pc, #24]	; (8002458 <HAL_IncTick+0x20>)
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	461a      	mov	r2, r3
 8002442:	4b06      	ldr	r3, [pc, #24]	; (800245c <HAL_IncTick+0x24>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4413      	add	r3, r2
 8002448:	4a04      	ldr	r2, [pc, #16]	; (800245c <HAL_IncTick+0x24>)
 800244a:	6013      	str	r3, [r2, #0]
}
 800244c:	bf00      	nop
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr
 8002456:	bf00      	nop
 8002458:	20000030 	.word	0x20000030
 800245c:	200006f8 	.word	0x200006f8

08002460 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002460:	b480      	push	{r7}
 8002462:	af00      	add	r7, sp, #0
  return uwTick;  
 8002464:	4b03      	ldr	r3, [pc, #12]	; (8002474 <HAL_GetTick+0x14>)
 8002466:	681b      	ldr	r3, [r3, #0]
}
 8002468:	4618      	mov	r0, r3
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr
 8002472:	bf00      	nop
 8002474:	200006f8 	.word	0x200006f8

08002478 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b084      	sub	sp, #16
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002480:	f7ff ffee 	bl	8002460 <HAL_GetTick>
 8002484:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002490:	d005      	beq.n	800249e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002492:	4b0a      	ldr	r3, [pc, #40]	; (80024bc <HAL_Delay+0x44>)
 8002494:	781b      	ldrb	r3, [r3, #0]
 8002496:	461a      	mov	r2, r3
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	4413      	add	r3, r2
 800249c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800249e:	bf00      	nop
 80024a0:	f7ff ffde 	bl	8002460 <HAL_GetTick>
 80024a4:	4602      	mov	r2, r0
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	68fa      	ldr	r2, [r7, #12]
 80024ac:	429a      	cmp	r2, r3
 80024ae:	d8f7      	bhi.n	80024a0 <HAL_Delay+0x28>
  {
  }
}
 80024b0:	bf00      	nop
 80024b2:	bf00      	nop
 80024b4:	3710      	adds	r7, #16
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	20000030 	.word	0x20000030

080024c0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b083      	sub	sp, #12
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80024c8:	bf00      	nop
 80024ca:	370c      	adds	r7, #12
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr

080024d4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b083      	sub	sp, #12
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80024dc:	bf00      	nop
 80024de:	370c      	adds	r7, #12
 80024e0:	46bd      	mov	sp, r7
 80024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e6:	4770      	bx	lr

080024e8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b083      	sub	sp, #12
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 80024f0:	bf00      	nop
 80024f2:	370c      	adds	r7, #12
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr

080024fc <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b083      	sub	sp, #12
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002504:	bf00      	nop
 8002506:	370c      	adds	r7, #12
 8002508:	46bd      	mov	sp, r7
 800250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250e:	4770      	bx	lr

08002510 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b09a      	sub	sp, #104	; 0x68
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002518:	2300      	movs	r3, #0
 800251a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 800251e:	2300      	movs	r3, #0
 8002520:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8002522:	2300      	movs	r3, #0
 8002524:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d101      	bne.n	8002530 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	e169      	b.n	8002804 <HAL_ADC_Init+0x2f4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	691b      	ldr	r3, [r3, #16]
 8002534:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800253a:	f003 0310 	and.w	r3, r3, #16
 800253e:	2b00      	cmp	r3, #0
 8002540:	d176      	bne.n	8002630 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002546:	2b00      	cmp	r3, #0
 8002548:	d152      	bne.n	80025f0 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2200      	movs	r2, #0
 800254e:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2200      	movs	r2, #0
 8002554:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2200      	movs	r2, #0
 800255a:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2200      	movs	r2, #0
 8002560:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002564:	6878      	ldr	r0, [r7, #4]
 8002566:	f7fe fb39 	bl	8000bdc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002574:	2b00      	cmp	r3, #0
 8002576:	d13b      	bne.n	80025f0 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8002578:	6878      	ldr	r0, [r7, #4]
 800257a:	f001 fa6d 	bl	8003a58 <ADC_Disable>
 800257e:	4603      	mov	r3, r0
 8002580:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002588:	f003 0310 	and.w	r3, r3, #16
 800258c:	2b00      	cmp	r3, #0
 800258e:	d12f      	bne.n	80025f0 <HAL_ADC_Init+0xe0>
 8002590:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002594:	2b00      	cmp	r3, #0
 8002596:	d12b      	bne.n	80025f0 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80025a0:	f023 0302 	bic.w	r3, r3, #2
 80025a4:	f043 0202 	orr.w	r2, r3, #2
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	689a      	ldr	r2, [r3, #8]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80025ba:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	689a      	ldr	r2, [r3, #8]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80025ca:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80025cc:	4b8f      	ldr	r3, [pc, #572]	; (800280c <HAL_ADC_Init+0x2fc>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a8f      	ldr	r2, [pc, #572]	; (8002810 <HAL_ADC_Init+0x300>)
 80025d2:	fba2 2303 	umull	r2, r3, r2, r3
 80025d6:	0c9a      	lsrs	r2, r3, #18
 80025d8:	4613      	mov	r3, r2
 80025da:	009b      	lsls	r3, r3, #2
 80025dc:	4413      	add	r3, r2
 80025de:	005b      	lsls	r3, r3, #1
 80025e0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80025e2:	e002      	b.n	80025ea <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	3b01      	subs	r3, #1
 80025e8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d1f9      	bne.n	80025e4 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d007      	beq.n	800260e <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002608:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800260c:	d110      	bne.n	8002630 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002612:	f023 0312 	bic.w	r3, r3, #18
 8002616:	f043 0210 	orr.w	r2, r3, #16
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002622:	f043 0201 	orr.w	r2, r3, #1
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002634:	f003 0310 	and.w	r3, r3, #16
 8002638:	2b00      	cmp	r3, #0
 800263a:	f040 80d6 	bne.w	80027ea <HAL_ADC_Init+0x2da>
 800263e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002642:	2b00      	cmp	r3, #0
 8002644:	f040 80d1 	bne.w	80027ea <HAL_ADC_Init+0x2da>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8002652:	2b00      	cmp	r3, #0
 8002654:	f040 80c9 	bne.w	80027ea <HAL_ADC_Init+0x2da>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002660:	f043 0202 	orr.w	r2, r3, #2
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002668:	4b6a      	ldr	r3, [pc, #424]	; (8002814 <HAL_ADC_Init+0x304>)
 800266a:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800266c:	2300      	movs	r3, #0
 800266e:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	f003 0303 	and.w	r3, r3, #3
 800267a:	2b01      	cmp	r3, #1
 800267c:	d108      	bne.n	8002690 <HAL_ADC_Init+0x180>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 0301 	and.w	r3, r3, #1
 8002688:	2b01      	cmp	r3, #1
 800268a:	d101      	bne.n	8002690 <HAL_ADC_Init+0x180>
 800268c:	2301      	movs	r3, #1
 800268e:	e000      	b.n	8002692 <HAL_ADC_Init+0x182>
 8002690:	2300      	movs	r3, #0
 8002692:	2b00      	cmp	r3, #0
 8002694:	d11c      	bne.n	80026d0 <HAL_ADC_Init+0x1c0>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002696:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002698:	2b00      	cmp	r3, #0
 800269a:	d010      	beq.n	80026be <HAL_ADC_Init+0x1ae>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	f003 0303 	and.w	r3, r3, #3
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d107      	bne.n	80026b8 <HAL_ADC_Init+0x1a8>
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 0301 	and.w	r3, r3, #1
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d101      	bne.n	80026b8 <HAL_ADC_Init+0x1a8>
 80026b4:	2301      	movs	r3, #1
 80026b6:	e000      	b.n	80026ba <HAL_ADC_Init+0x1aa>
 80026b8:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d108      	bne.n	80026d0 <HAL_ADC_Init+0x1c0>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80026be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	431a      	orrs	r2, r3
 80026cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026ce:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	7e5b      	ldrb	r3, [r3, #25]
 80026d4:	035b      	lsls	r3, r3, #13
 80026d6:	687a      	ldr	r2, [r7, #4]
 80026d8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80026da:	2a01      	cmp	r2, #1
 80026dc:	d002      	beq.n	80026e4 <HAL_ADC_Init+0x1d4>
 80026de:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80026e2:	e000      	b.n	80026e6 <HAL_ADC_Init+0x1d6>
 80026e4:	2200      	movs	r2, #0
 80026e6:	431a      	orrs	r2, r3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	68db      	ldr	r3, [r3, #12]
 80026ec:	431a      	orrs	r2, r3
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	4313      	orrs	r3, r2
 80026f4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80026f6:	4313      	orrs	r3, r2
 80026f8:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002700:	2b01      	cmp	r3, #1
 8002702:	d11b      	bne.n	800273c <HAL_ADC_Init+0x22c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	7e5b      	ldrb	r3, [r3, #25]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d109      	bne.n	8002720 <HAL_ADC_Init+0x210>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002710:	3b01      	subs	r3, #1
 8002712:	045a      	lsls	r2, r3, #17
 8002714:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002716:	4313      	orrs	r3, r2
 8002718:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800271c:	663b      	str	r3, [r7, #96]	; 0x60
 800271e:	e00d      	b.n	800273c <HAL_ADC_Init+0x22c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002724:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002728:	f043 0220 	orr.w	r2, r3, #32
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002734:	f043 0201 	orr.w	r2, r3, #1
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002740:	2b01      	cmp	r3, #1
 8002742:	d007      	beq.n	8002754 <HAL_ADC_Init+0x244>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800274c:	4313      	orrs	r3, r2
 800274e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002750:	4313      	orrs	r3, r2
 8002752:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	f003 030c 	and.w	r3, r3, #12
 800275e:	2b00      	cmp	r3, #0
 8002760:	d114      	bne.n	800278c <HAL_ADC_Init+0x27c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	687a      	ldr	r2, [r7, #4]
 800276a:	6812      	ldr	r2, [r2, #0]
 800276c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002770:	f023 0302 	bic.w	r3, r3, #2
 8002774:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	7e1b      	ldrb	r3, [r3, #24]
 800277a:	039a      	lsls	r2, r3, #14
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002782:	005b      	lsls	r3, r3, #1
 8002784:	4313      	orrs	r3, r2
 8002786:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002788:	4313      	orrs	r3, r2
 800278a:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	68da      	ldr	r2, [r3, #12]
 8002792:	4b21      	ldr	r3, [pc, #132]	; (8002818 <HAL_ADC_Init+0x308>)
 8002794:	4013      	ands	r3, r2
 8002796:	687a      	ldr	r2, [r7, #4]
 8002798:	6812      	ldr	r2, [r2, #0]
 800279a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800279c:	430b      	orrs	r3, r1
 800279e:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	691b      	ldr	r3, [r3, #16]
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	d10c      	bne.n	80027c2 <HAL_ADC_Init+0x2b2>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ae:	f023 010f 	bic.w	r1, r3, #15
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	69db      	ldr	r3, [r3, #28]
 80027b6:	1e5a      	subs	r2, r3, #1
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	430a      	orrs	r2, r1
 80027be:	631a      	str	r2, [r3, #48]	; 0x30
 80027c0:	e007      	b.n	80027d2 <HAL_ADC_Init+0x2c2>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f022 020f 	bic.w	r2, r2, #15
 80027d0:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2200      	movs	r2, #0
 80027d6:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027dc:	f023 0303 	bic.w	r3, r3, #3
 80027e0:	f043 0201 	orr.w	r2, r3, #1
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	641a      	str	r2, [r3, #64]	; 0x40
 80027e8:	e00a      	b.n	8002800 <HAL_ADC_Init+0x2f0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ee:	f023 0312 	bic.w	r3, r3, #18
 80027f2:	f043 0210 	orr.w	r2, r3, #16
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80027fa:	2301      	movs	r3, #1
 80027fc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8002800:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002804:	4618      	mov	r0, r3
 8002806:	3768      	adds	r7, #104	; 0x68
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}
 800280c:	20000028 	.word	0x20000028
 8002810:	431bde83 	.word	0x431bde83
 8002814:	50000300 	.word	0x50000300
 8002818:	fff0c007 	.word	0xfff0c007

0800281c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b086      	sub	sp, #24
 8002820:	af00      	add	r7, sp, #0
 8002822:	60f8      	str	r0, [r7, #12]
 8002824:	60b9      	str	r1, [r7, #8]
 8002826:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002828:	2300      	movs	r3, #0
 800282a:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	f003 0304 	and.w	r3, r3, #4
 8002836:	2b00      	cmp	r3, #0
 8002838:	d17e      	bne.n	8002938 <HAL_ADC_Start_DMA+0x11c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002840:	2b01      	cmp	r3, #1
 8002842:	d101      	bne.n	8002848 <HAL_ADC_Start_DMA+0x2c>
 8002844:	2302      	movs	r3, #2
 8002846:	e07a      	b.n	800293e <HAL_ADC_Start_DMA+0x122>
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	2201      	movs	r2, #1
 800284c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002850:	68f8      	ldr	r0, [r7, #12]
 8002852:	f001 f89d 	bl	8003990 <ADC_Enable>
 8002856:	4603      	mov	r3, r0
 8002858:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800285a:	7dfb      	ldrb	r3, [r7, #23]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d166      	bne.n	800292e <HAL_ADC_Start_DMA+0x112>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002864:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002868:	f023 0301 	bic.w	r3, r3, #1
 800286c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	641a      	str	r2, [r3, #64]	; 0x40
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002878:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	68db      	ldr	r3, [r3, #12]
 8002886:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800288a:	2b00      	cmp	r3, #0
 800288c:	d007      	beq.n	800289e <HAL_ADC_Start_DMA+0x82>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002892:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002896:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	641a      	str	r2, [r3, #64]	; 0x40
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028aa:	d106      	bne.n	80028ba <HAL_ADC_Start_DMA+0x9e>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028b0:	f023 0206 	bic.w	r2, r3, #6
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	645a      	str	r2, [r3, #68]	; 0x44
 80028b8:	e002      	b.n	80028c0 <HAL_ADC_Start_DMA+0xa4>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	2200      	movs	r2, #0
 80028be:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	2200      	movs	r2, #0
 80028c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028cc:	4a1e      	ldr	r2, [pc, #120]	; (8002948 <HAL_ADC_Start_DMA+0x12c>)
 80028ce:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028d4:	4a1d      	ldr	r2, [pc, #116]	; (800294c <HAL_ADC_Start_DMA+0x130>)
 80028d6:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028dc:	4a1c      	ldr	r2, [pc, #112]	; (8002950 <HAL_ADC_Start_DMA+0x134>)
 80028de:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	221c      	movs	r2, #28
 80028e6:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	685a      	ldr	r2, [r3, #4]
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f042 0210 	orr.w	r2, r2, #16
 80028f6:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	68da      	ldr	r2, [r3, #12]
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f042 0201 	orr.w	r2, r2, #1
 8002906:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	3340      	adds	r3, #64	; 0x40
 8002912:	4619      	mov	r1, r3
 8002914:	68ba      	ldr	r2, [r7, #8]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	f001 fa5c 	bl	8003dd4 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	689a      	ldr	r2, [r3, #8]
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f042 0204 	orr.w	r2, r2, #4
 800292a:	609a      	str	r2, [r3, #8]
 800292c:	e006      	b.n	800293c <HAL_ADC_Start_DMA+0x120>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	2200      	movs	r2, #0
 8002932:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002936:	e001      	b.n	800293c <HAL_ADC_Start_DMA+0x120>
      __HAL_UNLOCK(hadc);
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002938:	2302      	movs	r3, #2
 800293a:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800293c:	7dfb      	ldrb	r3, [r7, #23]
}
 800293e:	4618      	mov	r0, r3
 8002940:	3718      	adds	r7, #24
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	080038c5 	.word	0x080038c5
 800294c:	0800393f 	.word	0x0800393f
 8002950:	0800395b 	.word	0x0800395b

08002954 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b086      	sub	sp, #24
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 800295c:	2300      	movs	r3, #0
 800295e:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8002960:	2300      	movs	r3, #0
 8002962:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cfgr_jqm = 0x0U;
 8002964:	2300      	movs	r3, #0
 8002966:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 0304 	and.w	r3, r3, #4
 8002972:	2b04      	cmp	r3, #4
 8002974:	d106      	bne.n	8002984 <HAL_ADC_IRQHandler+0x30>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	f003 0304 	and.w	r3, r3, #4
 8002980:	2b04      	cmp	r3, #4
 8002982:	d00d      	beq.n	80029a0 <HAL_ADC_IRQHandler+0x4c>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 0308 	and.w	r3, r3, #8
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 800298e:	2b08      	cmp	r3, #8
 8002990:	d15e      	bne.n	8002a50 <HAL_ADC_IRQHandler+0xfc>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f003 0308 	and.w	r3, r3, #8
 800299c:	2b08      	cmp	r3, #8
 800299e:	d157      	bne.n	8002a50 <HAL_ADC_IRQHandler+0xfc>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a4:	f003 0310 	and.w	r3, r3, #16
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d105      	bne.n	80029b8 <HAL_ADC_IRQHandler+0x64>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	641a      	str	r2, [r3, #64]	; 0x40
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	68db      	ldr	r3, [r3, #12]
 80029be:	613b      	str	r3, [r7, #16]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	68db      	ldr	r3, [r3, #12]
 80029c6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d139      	bne.n	8002a42 <HAL_ADC_IRQHandler+0xee>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d134      	bne.n	8002a42 <HAL_ADC_IRQHandler+0xee>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 0308 	and.w	r3, r3, #8
 80029e2:	2b08      	cmp	r3, #8
 80029e4:	d12d      	bne.n	8002a42 <HAL_ADC_IRQHandler+0xee>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	f003 0304 	and.w	r3, r3, #4
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d11a      	bne.n	8002a2a <HAL_ADC_IRQHandler+0xd6>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	685a      	ldr	r2, [r3, #4]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f022 020c 	bic.w	r2, r2, #12
 8002a02:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a08:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a14:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d112      	bne.n	8002a42 <HAL_ADC_IRQHandler+0xee>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a20:	f043 0201 	orr.w	r2, r3, #1
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	641a      	str	r2, [r3, #64]	; 0x40
 8002a28:	e00b      	b.n	8002a42 <HAL_ADC_IRQHandler+0xee>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2e:	f043 0210 	orr.w	r2, r3, #16
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a3a:	f043 0201 	orr.w	r2, r3, #1
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f7ff fd3c 	bl	80024c0 <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	220c      	movs	r2, #12
 8002a4e:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 0320 	and.w	r3, r3, #32
 8002a5a:	2b20      	cmp	r3, #32
 8002a5c:	d106      	bne.n	8002a6c <HAL_ADC_IRQHandler+0x118>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	f003 0320 	and.w	r3, r3, #32
 8002a68:	2b20      	cmp	r3, #32
 8002a6a:	d00d      	beq.n	8002a88 <HAL_ADC_IRQHandler+0x134>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 8002a76:	2b40      	cmp	r3, #64	; 0x40
 8002a78:	d16d      	bne.n	8002b56 <HAL_ADC_IRQHandler+0x202>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a84:	2b40      	cmp	r3, #64	; 0x40
 8002a86:	d166      	bne.n	8002b56 <HAL_ADC_IRQHandler+0x202>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	641a      	str	r2, [r3, #64]	; 0x40
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	68db      	ldr	r3, [r3, #12]
 8002a9a:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aa2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d14e      	bne.n	8002b48 <HAL_ADC_IRQHandler+0x1f4>
    {
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d00b      	beq.n	8002acc <HAL_ADC_IRQHandler+0x178>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	68db      	ldr	r3, [r3, #12]
 8002aba:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d142      	bne.n	8002b48 <HAL_ADC_IRQHandler+0x1f4>
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d13d      	bne.n	8002b48 <HAL_ADC_IRQHandler+0x1f4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ad6:	2b40      	cmp	r3, #64	; 0x40
 8002ad8:	d136      	bne.n	8002b48 <HAL_ADC_IRQHandler+0x1f4>
          /* Get relevant register CFGR in ADC instance of ADC master or slave  */
          /* in function of multimode state (for devices with multimode         */
          /* available).                                                        */
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
          {
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	60fb      	str	r3, [r7, #12]
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d12d      	bne.n	8002b48 <HAL_ADC_IRQHandler+0x1f4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	f003 0308 	and.w	r3, r3, #8
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d11a      	bne.n	8002b30 <HAL_ADC_IRQHandler+0x1dc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	685a      	ldr	r2, [r3, #4]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002b08:	605a      	str	r2, [r3, #4]
              
              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	641a      	str	r2, [r3, #64]	; 0x40
              
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d112      	bne.n	8002b48 <HAL_ADC_IRQHandler+0x1f4>
              { 
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b26:	f043 0201 	orr.w	r2, r3, #1
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	641a      	str	r2, [r3, #64]	; 0x40
 8002b2e:	e00b      	b.n	8002b48 <HAL_ADC_IRQHandler+0x1f4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b34:	f043 0210 	orr.w	r2, r3, #16
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	641a      	str	r2, [r3, #64]	; 0x40
              
              /* Set ADC error code to ADC IP internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b40:	f043 0201 	orr.w	r2, r3, #1
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002b48:	6878      	ldr	r0, [r7, #4]
 8002b4a:	f000 f8cb 	bl	8002ce4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	2260      	movs	r2, #96	; 0x60
 8002b54:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD1) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD1))
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b60:	2b80      	cmp	r3, #128	; 0x80
 8002b62:	d113      	bne.n	8002b8c <HAL_ADC_IRQHandler+0x238>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b6e:	2b80      	cmp	r3, #128	; 0x80
 8002b70:	d10c      	bne.n	8002b8c <HAL_ADC_IRQHandler+0x238>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b76:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	f7ff fcb2 	bl	80024e8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	2280      	movs	r2, #128	; 0x80
 8002b8a:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD2) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD2))
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b9a:	d115      	bne.n	8002bc8 <HAL_ADC_IRQHandler+0x274>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ba6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002baa:	d10d      	bne.n	8002bc8 <HAL_ADC_IRQHandler+0x274>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb0:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002bb8:	6878      	ldr	r0, [r7, #4]
 8002bba:	f000 f8a7 	bl	8002d0c <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002bc6:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD3) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD3)) 
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bd2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002bd6:	d115      	bne.n	8002c04 <HAL_ADC_IRQHandler+0x2b0>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002be2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002be6:	d10d      	bne.n	8002c04 <HAL_ADC_IRQHandler+0x2b0>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bec:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002bf4:	6878      	ldr	r0, [r7, #4]
 8002bf6:	f000 f893 	bl	8002d20 <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c02:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 0310 	and.w	r3, r3, #16
 8002c0e:	2b10      	cmp	r3, #16
 8002c10:	d13d      	bne.n	8002c8e <HAL_ADC_IRQHandler+0x33a>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	f003 0310 	and.w	r3, r3, #16
 8002c1c:	2b10      	cmp	r3, #16
 8002c1e:	d136      	bne.n	8002c8e <HAL_ADC_IRQHandler+0x33a>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d102      	bne.n	8002c2e <HAL_ADC_IRQHandler+0x2da>
    {
      overrun_error = 1U;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	617b      	str	r3, [r7, #20]
 8002c2c:	e019      	b.n	8002c62 <HAL_ADC_IRQHandler+0x30e>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c2e:	4b2c      	ldr	r3, [pc, #176]	; (8002ce0 <HAL_ADC_IRQHandler+0x38c>)
 8002c30:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	f003 031f 	and.w	r3, r3, #31
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d109      	bne.n	8002c52 <HAL_ADC_IRQHandler+0x2fe>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	68db      	ldr	r3, [r3, #12]
 8002c44:	f003 0301 	and.w	r3, r3, #1
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d10a      	bne.n	8002c62 <HAL_ADC_IRQHandler+0x30e>
        {
          overrun_error = 1U;  
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	617b      	str	r3, [r7, #20]
 8002c50:	e007      	b.n	8002c62 <HAL_ADC_IRQHandler+0x30e>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d001      	beq.n	8002c62 <HAL_ADC_IRQHandler+0x30e>
        {
          overrun_error = 1U;  
 8002c5e:	2301      	movs	r3, #1
 8002c60:	617b      	str	r3, [r7, #20]
        }
      }
    }
    
    if (overrun_error == 1U)
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	d10e      	bne.n	8002c86 <HAL_ADC_IRQHandler+0x332>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c78:	f043 0202 	orr.w	r2, r3, #2
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002c80:	6878      	ldr	r0, [r7, #4]
 8002c82:	f7ff fc3b 	bl	80024fc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	2210      	movs	r2, #16
 8002c8c:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JQOVF) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JQOVF))
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c9c:	d11b      	bne.n	8002cd6 <HAL_ADC_IRQHandler+0x382>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ca8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cac:	d113      	bne.n	8002cd6 <HAL_ADC_IRQHandler+0x382>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb2:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cbe:	f043 0208 	orr.w	r2, r3, #8
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002cce:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002cd0:	6878      	ldr	r0, [r7, #4]
 8002cd2:	f000 f811 	bl	8002cf8 <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 8002cd6:	bf00      	nop
 8002cd8:	3718      	adds	r7, #24
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}
 8002cde:	bf00      	nop
 8002ce0:	50000300 	.word	0x50000300

08002ce4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b083      	sub	sp, #12
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8002cec:	bf00      	nop
 8002cee:	370c      	adds	r7, #12
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr

08002cf8 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b083      	sub	sp, #12
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 8002d00:	bf00      	nop
 8002d02:	370c      	adds	r7, #12
 8002d04:	46bd      	mov	sp, r7
 8002d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0a:	4770      	bx	lr

08002d0c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b083      	sub	sp, #12
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 8002d14:	bf00      	nop
 8002d16:	370c      	adds	r7, #12
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1e:	4770      	bx	lr

08002d20 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b083      	sub	sp, #12
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 8002d28:	bf00      	nop
 8002d2a:	370c      	adds	r7, #12
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d32:	4770      	bx	lr

08002d34 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b09b      	sub	sp, #108	; 0x6c
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
 8002d3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8002d44:	2300      	movs	r3, #0
 8002d46:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d101      	bne.n	8002d56 <HAL_ADC_ConfigChannel+0x22>
 8002d52:	2302      	movs	r3, #2
 8002d54:	e299      	b.n	800328a <HAL_ADC_ConfigChannel+0x556>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2201      	movs	r2, #1
 8002d5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	f003 0304 	and.w	r3, r3, #4
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	f040 827d 	bne.w	8003268 <HAL_ADC_ConfigChannel+0x534>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	2b04      	cmp	r3, #4
 8002d74:	d81c      	bhi.n	8002db0 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	685a      	ldr	r2, [r3, #4]
 8002d80:	4613      	mov	r3, r2
 8002d82:	005b      	lsls	r3, r3, #1
 8002d84:	4413      	add	r3, r2
 8002d86:	005b      	lsls	r3, r3, #1
 8002d88:	461a      	mov	r2, r3
 8002d8a:	231f      	movs	r3, #31
 8002d8c:	4093      	lsls	r3, r2
 8002d8e:	43db      	mvns	r3, r3
 8002d90:	4019      	ands	r1, r3
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	6818      	ldr	r0, [r3, #0]
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	685a      	ldr	r2, [r3, #4]
 8002d9a:	4613      	mov	r3, r2
 8002d9c:	005b      	lsls	r3, r3, #1
 8002d9e:	4413      	add	r3, r2
 8002da0:	005b      	lsls	r3, r3, #1
 8002da2:	fa00 f203 	lsl.w	r2, r0, r3
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	430a      	orrs	r2, r1
 8002dac:	631a      	str	r2, [r3, #48]	; 0x30
 8002dae:	e063      	b.n	8002e78 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	2b09      	cmp	r3, #9
 8002db6:	d81e      	bhi.n	8002df6 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	685a      	ldr	r2, [r3, #4]
 8002dc2:	4613      	mov	r3, r2
 8002dc4:	005b      	lsls	r3, r3, #1
 8002dc6:	4413      	add	r3, r2
 8002dc8:	005b      	lsls	r3, r3, #1
 8002dca:	3b1e      	subs	r3, #30
 8002dcc:	221f      	movs	r2, #31
 8002dce:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd2:	43db      	mvns	r3, r3
 8002dd4:	4019      	ands	r1, r3
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	6818      	ldr	r0, [r3, #0]
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	685a      	ldr	r2, [r3, #4]
 8002dde:	4613      	mov	r3, r2
 8002de0:	005b      	lsls	r3, r3, #1
 8002de2:	4413      	add	r3, r2
 8002de4:	005b      	lsls	r3, r3, #1
 8002de6:	3b1e      	subs	r3, #30
 8002de8:	fa00 f203 	lsl.w	r2, r0, r3
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	430a      	orrs	r2, r1
 8002df2:	635a      	str	r2, [r3, #52]	; 0x34
 8002df4:	e040      	b.n	8002e78 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	2b0e      	cmp	r3, #14
 8002dfc:	d81e      	bhi.n	8002e3c <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	685a      	ldr	r2, [r3, #4]
 8002e08:	4613      	mov	r3, r2
 8002e0a:	005b      	lsls	r3, r3, #1
 8002e0c:	4413      	add	r3, r2
 8002e0e:	005b      	lsls	r3, r3, #1
 8002e10:	3b3c      	subs	r3, #60	; 0x3c
 8002e12:	221f      	movs	r2, #31
 8002e14:	fa02 f303 	lsl.w	r3, r2, r3
 8002e18:	43db      	mvns	r3, r3
 8002e1a:	4019      	ands	r1, r3
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	6818      	ldr	r0, [r3, #0]
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	685a      	ldr	r2, [r3, #4]
 8002e24:	4613      	mov	r3, r2
 8002e26:	005b      	lsls	r3, r3, #1
 8002e28:	4413      	add	r3, r2
 8002e2a:	005b      	lsls	r3, r3, #1
 8002e2c:	3b3c      	subs	r3, #60	; 0x3c
 8002e2e:	fa00 f203 	lsl.w	r2, r0, r3
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	430a      	orrs	r2, r1
 8002e38:	639a      	str	r2, [r3, #56]	; 0x38
 8002e3a:	e01d      	b.n	8002e78 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	685a      	ldr	r2, [r3, #4]
 8002e46:	4613      	mov	r3, r2
 8002e48:	005b      	lsls	r3, r3, #1
 8002e4a:	4413      	add	r3, r2
 8002e4c:	005b      	lsls	r3, r3, #1
 8002e4e:	3b5a      	subs	r3, #90	; 0x5a
 8002e50:	221f      	movs	r2, #31
 8002e52:	fa02 f303 	lsl.w	r3, r2, r3
 8002e56:	43db      	mvns	r3, r3
 8002e58:	4019      	ands	r1, r3
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	6818      	ldr	r0, [r3, #0]
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	685a      	ldr	r2, [r3, #4]
 8002e62:	4613      	mov	r3, r2
 8002e64:	005b      	lsls	r3, r3, #1
 8002e66:	4413      	add	r3, r2
 8002e68:	005b      	lsls	r3, r3, #1
 8002e6a:	3b5a      	subs	r3, #90	; 0x5a
 8002e6c:	fa00 f203 	lsl.w	r2, r0, r3
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	430a      	orrs	r2, r1
 8002e76:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	f003 030c 	and.w	r3, r3, #12
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	f040 80e5 	bne.w	8003052 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	2b09      	cmp	r3, #9
 8002e8e:	d91c      	bls.n	8002eca <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	6999      	ldr	r1, [r3, #24]
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	4613      	mov	r3, r2
 8002e9c:	005b      	lsls	r3, r3, #1
 8002e9e:	4413      	add	r3, r2
 8002ea0:	3b1e      	subs	r3, #30
 8002ea2:	2207      	movs	r2, #7
 8002ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea8:	43db      	mvns	r3, r3
 8002eaa:	4019      	ands	r1, r3
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	6898      	ldr	r0, [r3, #8]
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	681a      	ldr	r2, [r3, #0]
 8002eb4:	4613      	mov	r3, r2
 8002eb6:	005b      	lsls	r3, r3, #1
 8002eb8:	4413      	add	r3, r2
 8002eba:	3b1e      	subs	r3, #30
 8002ebc:	fa00 f203 	lsl.w	r2, r0, r3
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	430a      	orrs	r2, r1
 8002ec6:	619a      	str	r2, [r3, #24]
 8002ec8:	e019      	b.n	8002efe <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	6959      	ldr	r1, [r3, #20]
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	4613      	mov	r3, r2
 8002ed6:	005b      	lsls	r3, r3, #1
 8002ed8:	4413      	add	r3, r2
 8002eda:	2207      	movs	r2, #7
 8002edc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee0:	43db      	mvns	r3, r3
 8002ee2:	4019      	ands	r1, r3
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	6898      	ldr	r0, [r3, #8]
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	4613      	mov	r3, r2
 8002eee:	005b      	lsls	r3, r3, #1
 8002ef0:	4413      	add	r3, r2
 8002ef2:	fa00 f203 	lsl.w	r2, r0, r3
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	430a      	orrs	r2, r1
 8002efc:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	695a      	ldr	r2, [r3, #20]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	68db      	ldr	r3, [r3, #12]
 8002f08:	08db      	lsrs	r3, r3, #3
 8002f0a:	f003 0303 	and.w	r3, r3, #3
 8002f0e:	005b      	lsls	r3, r3, #1
 8002f10:	fa02 f303 	lsl.w	r3, r2, r3
 8002f14:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	691b      	ldr	r3, [r3, #16]
 8002f1a:	3b01      	subs	r3, #1
 8002f1c:	2b03      	cmp	r3, #3
 8002f1e:	d84f      	bhi.n	8002fc0 <HAL_ADC_ConfigChannel+0x28c>
 8002f20:	a201      	add	r2, pc, #4	; (adr r2, 8002f28 <HAL_ADC_ConfigChannel+0x1f4>)
 8002f22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f26:	bf00      	nop
 8002f28:	08002f39 	.word	0x08002f39
 8002f2c:	08002f5b 	.word	0x08002f5b
 8002f30:	08002f7d 	.word	0x08002f7d
 8002f34:	08002f9f 	.word	0x08002f9f
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002f3e:	4b99      	ldr	r3, [pc, #612]	; (80031a4 <HAL_ADC_ConfigChannel+0x470>)
 8002f40:	4013      	ands	r3, r2
 8002f42:	683a      	ldr	r2, [r7, #0]
 8002f44:	6812      	ldr	r2, [r2, #0]
 8002f46:	0691      	lsls	r1, r2, #26
 8002f48:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002f4a:	430a      	orrs	r2, r1
 8002f4c:	431a      	orrs	r2, r3
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002f56:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002f58:	e07e      	b.n	8003058 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002f60:	4b90      	ldr	r3, [pc, #576]	; (80031a4 <HAL_ADC_ConfigChannel+0x470>)
 8002f62:	4013      	ands	r3, r2
 8002f64:	683a      	ldr	r2, [r7, #0]
 8002f66:	6812      	ldr	r2, [r2, #0]
 8002f68:	0691      	lsls	r1, r2, #26
 8002f6a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002f6c:	430a      	orrs	r2, r1
 8002f6e:	431a      	orrs	r2, r3
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002f78:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002f7a:	e06d      	b.n	8003058 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002f82:	4b88      	ldr	r3, [pc, #544]	; (80031a4 <HAL_ADC_ConfigChannel+0x470>)
 8002f84:	4013      	ands	r3, r2
 8002f86:	683a      	ldr	r2, [r7, #0]
 8002f88:	6812      	ldr	r2, [r2, #0]
 8002f8a:	0691      	lsls	r1, r2, #26
 8002f8c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002f8e:	430a      	orrs	r2, r1
 8002f90:	431a      	orrs	r2, r3
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002f9a:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002f9c:	e05c      	b.n	8003058 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002fa4:	4b7f      	ldr	r3, [pc, #508]	; (80031a4 <HAL_ADC_ConfigChannel+0x470>)
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	683a      	ldr	r2, [r7, #0]
 8002faa:	6812      	ldr	r2, [r2, #0]
 8002fac:	0691      	lsls	r1, r2, #26
 8002fae:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002fb0:	430a      	orrs	r2, r1
 8002fb2:	431a      	orrs	r2, r3
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002fbc:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002fbe:	e04b      	b.n	8003058 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fc6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	069b      	lsls	r3, r3, #26
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	d107      	bne.n	8002fe4 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002fe2:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002fea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	069b      	lsls	r3, r3, #26
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d107      	bne.n	8003008 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003006:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800300e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	069b      	lsls	r3, r3, #26
 8003018:	429a      	cmp	r2, r3
 800301a:	d107      	bne.n	800302c <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800302a:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003032:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	069b      	lsls	r3, r3, #26
 800303c:	429a      	cmp	r2, r3
 800303e:	d10a      	bne.n	8003056 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800304e:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8003050:	e001      	b.n	8003056 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8003052:	bf00      	nop
 8003054:	e000      	b.n	8003058 <HAL_ADC_ConfigChannel+0x324>
      break;
 8003056:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	f003 0303 	and.w	r3, r3, #3
 8003062:	2b01      	cmp	r3, #1
 8003064:	d108      	bne.n	8003078 <HAL_ADC_ConfigChannel+0x344>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 0301 	and.w	r3, r3, #1
 8003070:	2b01      	cmp	r3, #1
 8003072:	d101      	bne.n	8003078 <HAL_ADC_ConfigChannel+0x344>
 8003074:	2301      	movs	r3, #1
 8003076:	e000      	b.n	800307a <HAL_ADC_ConfigChannel+0x346>
 8003078:	2300      	movs	r3, #0
 800307a:	2b00      	cmp	r3, #0
 800307c:	f040 80ff 	bne.w	800327e <HAL_ADC_ConfigChannel+0x54a>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	2b01      	cmp	r3, #1
 8003086:	d00f      	beq.n	80030a8 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	2201      	movs	r2, #1
 8003096:	fa02 f303 	lsl.w	r3, r2, r3
 800309a:	43da      	mvns	r2, r3
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	400a      	ands	r2, r1
 80030a2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80030a6:	e049      	b.n	800313c <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	2201      	movs	r2, #1
 80030b6:	409a      	lsls	r2, r3
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	430a      	orrs	r2, r1
 80030be:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	2b09      	cmp	r3, #9
 80030c8:	d91c      	bls.n	8003104 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	6999      	ldr	r1, [r3, #24]
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	4613      	mov	r3, r2
 80030d6:	005b      	lsls	r3, r3, #1
 80030d8:	4413      	add	r3, r2
 80030da:	3b1b      	subs	r3, #27
 80030dc:	2207      	movs	r2, #7
 80030de:	fa02 f303 	lsl.w	r3, r2, r3
 80030e2:	43db      	mvns	r3, r3
 80030e4:	4019      	ands	r1, r3
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	6898      	ldr	r0, [r3, #8]
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	4613      	mov	r3, r2
 80030f0:	005b      	lsls	r3, r3, #1
 80030f2:	4413      	add	r3, r2
 80030f4:	3b1b      	subs	r3, #27
 80030f6:	fa00 f203 	lsl.w	r2, r0, r3
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	430a      	orrs	r2, r1
 8003100:	619a      	str	r2, [r3, #24]
 8003102:	e01b      	b.n	800313c <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	6959      	ldr	r1, [r3, #20]
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	1c5a      	adds	r2, r3, #1
 8003110:	4613      	mov	r3, r2
 8003112:	005b      	lsls	r3, r3, #1
 8003114:	4413      	add	r3, r2
 8003116:	2207      	movs	r2, #7
 8003118:	fa02 f303 	lsl.w	r3, r2, r3
 800311c:	43db      	mvns	r3, r3
 800311e:	4019      	ands	r1, r3
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	6898      	ldr	r0, [r3, #8]
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	1c5a      	adds	r2, r3, #1
 800312a:	4613      	mov	r3, r2
 800312c:	005b      	lsls	r3, r3, #1
 800312e:	4413      	add	r3, r2
 8003130:	fa00 f203 	lsl.w	r2, r0, r3
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	430a      	orrs	r2, r1
 800313a:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800313c:	4b1a      	ldr	r3, [pc, #104]	; (80031a8 <HAL_ADC_ConfigChannel+0x474>)
 800313e:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	2b10      	cmp	r3, #16
 8003146:	d105      	bne.n	8003154 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8003148:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003150:	2b00      	cmp	r3, #0
 8003152:	d014      	beq.n	800317e <HAL_ADC_ConfigChannel+0x44a>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8003158:	2b11      	cmp	r3, #17
 800315a:	d105      	bne.n	8003168 <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800315c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8003164:	2b00      	cmp	r3, #0
 8003166:	d00a      	beq.n	800317e <HAL_ADC_ConfigChannel+0x44a>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800316c:	2b12      	cmp	r3, #18
 800316e:	f040 8086 	bne.w	800327e <HAL_ADC_ConfigChannel+0x54a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8003172:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800317a:	2b00      	cmp	r3, #0
 800317c:	d17f      	bne.n	800327e <HAL_ADC_ConfigChannel+0x54a>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800317e:	2300      	movs	r3, #0
 8003180:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	f003 0303 	and.w	r3, r3, #3
 800318c:	2b01      	cmp	r3, #1
 800318e:	d10d      	bne.n	80031ac <HAL_ADC_ConfigChannel+0x478>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 0301 	and.w	r3, r3, #1
 800319a:	2b01      	cmp	r3, #1
 800319c:	d106      	bne.n	80031ac <HAL_ADC_ConfigChannel+0x478>
 800319e:	2301      	movs	r3, #1
 80031a0:	e005      	b.n	80031ae <HAL_ADC_ConfigChannel+0x47a>
 80031a2:	bf00      	nop
 80031a4:	83fff000 	.word	0x83fff000
 80031a8:	50000300 	.word	0x50000300
 80031ac:	2300      	movs	r3, #0
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d150      	bne.n	8003254 <HAL_ADC_ConfigChannel+0x520>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80031b2:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d010      	beq.n	80031da <HAL_ADC_ConfigChannel+0x4a6>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	f003 0303 	and.w	r3, r3, #3
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d107      	bne.n	80031d4 <HAL_ADC_ConfigChannel+0x4a0>
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f003 0301 	and.w	r3, r3, #1
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d101      	bne.n	80031d4 <HAL_ADC_ConfigChannel+0x4a0>
 80031d0:	2301      	movs	r3, #1
 80031d2:	e000      	b.n	80031d6 <HAL_ADC_ConfigChannel+0x4a2>
 80031d4:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d13c      	bne.n	8003254 <HAL_ADC_ConfigChannel+0x520>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	2b10      	cmp	r3, #16
 80031e0:	d11d      	bne.n	800321e <HAL_ADC_ConfigChannel+0x4ea>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80031ea:	d118      	bne.n	800321e <HAL_ADC_ConfigChannel+0x4ea>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80031ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80031f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031f6:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80031f8:	4b27      	ldr	r3, [pc, #156]	; (8003298 <HAL_ADC_ConfigChannel+0x564>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a27      	ldr	r2, [pc, #156]	; (800329c <HAL_ADC_ConfigChannel+0x568>)
 80031fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003202:	0c9a      	lsrs	r2, r3, #18
 8003204:	4613      	mov	r3, r2
 8003206:	009b      	lsls	r3, r3, #2
 8003208:	4413      	add	r3, r2
 800320a:	005b      	lsls	r3, r3, #1
 800320c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800320e:	e002      	b.n	8003216 <HAL_ADC_ConfigChannel+0x4e2>
          {
            wait_loop_index--;
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	3b01      	subs	r3, #1
 8003214:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d1f9      	bne.n	8003210 <HAL_ADC_ConfigChannel+0x4dc>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800321c:	e02e      	b.n	800327c <HAL_ADC_ConfigChannel+0x548>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	2b11      	cmp	r3, #17
 8003224:	d10b      	bne.n	800323e <HAL_ADC_ConfigChannel+0x50a>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800322e:	d106      	bne.n	800323e <HAL_ADC_ConfigChannel+0x50a>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8003230:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8003238:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800323a:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800323c:	e01e      	b.n	800327c <HAL_ADC_ConfigChannel+0x548>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	2b12      	cmp	r3, #18
 8003244:	d11a      	bne.n	800327c <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8003246:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800324e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003250:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003252:	e013      	b.n	800327c <HAL_ADC_ConfigChannel+0x548>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003258:	f043 0220 	orr.w	r2, r3, #32
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8003266:	e00a      	b.n	800327e <HAL_ADC_ConfigChannel+0x54a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800326c:	f043 0220 	orr.w	r2, r3, #32
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800327a:	e000      	b.n	800327e <HAL_ADC_ConfigChannel+0x54a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800327c:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2200      	movs	r2, #0
 8003282:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003286:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800328a:	4618      	mov	r0, r3
 800328c:	376c      	adds	r7, #108	; 0x6c
 800328e:	46bd      	mov	sp, r7
 8003290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003294:	4770      	bx	lr
 8003296:	bf00      	nop
 8003298:	20000028 	.word	0x20000028
 800329c:	431bde83 	.word	0x431bde83

080032a0 <HAL_ADCEx_InjectedConfigChannel>:
  * @param  sConfigInjected Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b09d      	sub	sp, #116	; 0x74
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
 80032a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032aa:	2300      	movs	r3, #0
 80032ac:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80032b0:	2300      	movs	r3, #0
 80032b2:	60fb      	str	r3, [r7, #12]
  
  /* Injected context queue feature: temporary JSQR variables defined in      */
  /* static to be passed over calls of this function                          */
  uint32_t tmp_JSQR_ContextQueueBeingBuilt = 0U;
 80032b4:	2300      	movs	r3, #0
 80032b6:	66bb      	str	r3, [r7, #104]	; 0x68
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfigInjected->InjectedChannel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d101      	bne.n	80032c6 <HAL_ADCEx_InjectedConfigChannel+0x26>
 80032c2:	2302      	movs	r3, #2
 80032c4:	e2f3      	b.n	80038ae <HAL_ADCEx_InjectedConfigChannel+0x60e>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2201      	movs	r2, #1
 80032ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */
  
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	691b      	ldr	r3, [r3, #16]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d003      	beq.n	80032de <HAL_ADCEx_InjectedConfigChannel+0x3e>
      (sConfigInjected->InjectedNbrOfConversion == 1U)  )
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	699b      	ldr	r3, [r3, #24]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d132      	bne.n	8003344 <HAL_ADCEx_InjectedConfigChannel+0xa4>
    /*    (scan mode disabled, only rank 1 used)                              */
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - channel set to rank 1 (scan mode disabled, only rank 1 used)        */
    
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d124      	bne.n	8003330 <HAL_ADCEx_InjectedConfigChannel+0x90>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	6a1b      	ldr	r3, [r3, #32]
 80032ea:	2b01      	cmp	r3, #1
 80032ec:	d00c      	beq.n	8003308 <HAL_ADCEx_InjectedConfigChannel+0x68>
      {
        SET_BIT(tmp_JSQR_ContextQueueBeingBuilt, ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1) |
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	021a      	lsls	r2, r3, #8
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	6a1b      	ldr	r3, [r3, #32]
 80032f8:	431a      	orrs	r2, r3
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032fe:	4313      	orrs	r3, r2
 8003300:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003302:	4313      	orrs	r3, r2
 8003304:	66bb      	str	r3, [r7, #104]	; 0x68
 8003306:	e005      	b.n	8003314 <HAL_ADCEx_InjectedConfigChannel+0x74>
                                                 ADC_JSQR_JEXTSEL_SET(hadc, sConfigInjected->ExternalTrigInjecConv) |
                                                 sConfigInjected->ExternalTrigInjecConvEdge                          );
      }
      else
      {
        SET_BIT(tmp_JSQR_ContextQueueBeingBuilt, ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1) );
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	021b      	lsls	r3, r3, #8
 800330e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003310:	4313      	orrs	r3, r2
 8003312:	66bb      	str	r3, [r7, #104]	; 0x68
      }
      
      /* Update ADC register JSQR */
      MODIFY_REG(hadc->Instance->JSQR           ,
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800331a:	4b9c      	ldr	r3, [pc, #624]	; (800358c <HAL_ADCEx_InjectedConfigChannel+0x2ec>)
 800331c:	4013      	ands	r3, r2
 800331e:	687a      	ldr	r2, [r7, #4]
 8003320:	6812      	ldr	r2, [r2, #0]
 8003322:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003324:	430b      	orrs	r3, r1
 8003326:	64d3      	str	r3, [r2, #76]	; 0x4c
                 ADC_JSQR_JEXTSEL |
                 ADC_JSQR_JL                    ,
                 tmp_JSQR_ContextQueueBeingBuilt );
      
      /* For debug and informative reasons, hadc handle saves JSQR setting */
      hadc->InjectionConfig.ContextQueue = tmp_JSQR_ContextQueueBeingBuilt;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800332c:	649a      	str	r2, [r3, #72]	; 0x48
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 800332e:	e060      	b.n	80033f2 <HAL_ADCEx_InjectedConfigChannel+0x152>
    /* If another injected rank than rank1 was intended to be set, and could  */
    /* not due to ScanConvMode disabled, error is reported.                   */
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003334:	f043 0220 	orr.w	r2, r3, #32
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	641a      	str	r2, [r3, #64]	; 0x40
      
      tmp_hal_status = HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8003342:	e056      	b.n	80033f2 <HAL_ADCEx_InjectedConfigChannel+0x152>
    /* Procedure to define injected context register JSQR over successive     */
    /* calls of this function, for each injected channel rank:                */
    
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger                      */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003348:	2b00      	cmp	r3, #0
 800334a:	d121      	bne.n	8003390 <HAL_ADCEx_InjectedConfigChannel+0xf0>
    {
      /* Initialize number of channels that will be configured on the context */
      /*  being built                                                         */
      hadc->InjectionConfig.ChannelCount = sConfigInjected->InjectedNbrOfConversion;
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	699a      	ldr	r2, [r3, #24]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	64da      	str	r2, [r3, #76]	; 0x4c
      /* Initialize value that will be set into register JSQR */
      hadc->InjectionConfig.ContextQueue = 0x00000000U;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2200      	movs	r2, #0
 8003358:	649a      	str	r2, [r3, #72]	; 0x48
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	6a1b      	ldr	r3, [r3, #32]
 800335e:	2b01      	cmp	r3, #1
 8003360:	d00e      	beq.n	8003380 <HAL_ADCEx_InjectedConfigChannel+0xe0>
      {
        SET_BIT(hadc->InjectionConfig.ContextQueue, (sConfigInjected->InjectedNbrOfConversion - 1U)           |
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	699b      	ldr	r3, [r3, #24]
 800336a:	1e59      	subs	r1, r3, #1
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	6a1b      	ldr	r3, [r3, #32]
 8003370:	4319      	orrs	r1, r3
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003376:	430b      	orrs	r3, r1
 8003378:	431a      	orrs	r2, r3
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	649a      	str	r2, [r3, #72]	; 0x48
 800337e:	e007      	b.n	8003390 <HAL_ADCEx_InjectedConfigChannel+0xf0>
                                                    ADC_JSQR_JEXTSEL_SET(hadc, sConfigInjected->ExternalTrigInjecConv) |
                                                    sConfigInjected->ExternalTrigInjecConvEdge                          );        
      }
      else
      {
        SET_BIT(hadc->InjectionConfig.ContextQueue, (sConfigInjected->InjectedNbrOfConversion - 1U) );        
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	699b      	ldr	r3, [r3, #24]
 8003388:	3b01      	subs	r3, #1
 800338a:	431a      	orrs	r2, r3
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	649a      	str	r2, [r3, #72]	; 0x48

      /* 2. Continue setting of context under definition with parameter       */
      /*    related to each channel: channel rank sequence                    */
      
      /* Set the JSQx bits for the selected rank */
      MODIFY_REG(hadc->InjectionConfig.ContextQueue                                          ,
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	685a      	ldr	r2, [r3, #4]
 8003398:	4613      	mov	r3, r2
 800339a:	005b      	lsls	r3, r3, #1
 800339c:	4413      	add	r3, r2
 800339e:	005b      	lsls	r3, r3, #1
 80033a0:	3302      	adds	r3, #2
 80033a2:	221f      	movs	r2, #31
 80033a4:	fa02 f303 	lsl.w	r3, r2, r3
 80033a8:	43db      	mvns	r3, r3
 80033aa:	4019      	ands	r1, r3
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	6818      	ldr	r0, [r3, #0]
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	685a      	ldr	r2, [r3, #4]
 80033b4:	4613      	mov	r3, r2
 80033b6:	005b      	lsls	r3, r3, #1
 80033b8:	4413      	add	r3, r2
 80033ba:	005b      	lsls	r3, r3, #1
 80033bc:	3302      	adds	r3, #2
 80033be:	fa00 f303 	lsl.w	r3, r0, r3
 80033c2:	ea41 0203 	orr.w	r2, r1, r3
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	649a      	str	r2, [r3, #72]	; 0x48
                 ADC_JSQR_RK(ADC_SQR3_SQ10, sConfigInjected->InjectedRank)                   ,
                 ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank) );
      
      /* Decrease channel count after setting into temporary JSQR variable */
      hadc->InjectionConfig.ChannelCount --;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033ce:	1e5a      	subs	r2, r3, #1
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	64da      	str	r2, [r3, #76]	; 0x4c
      
      /* 3. End of context setting: If last channel set, then write context   */
      /*    into register JSQR and make it enter into queue                   */
      if (hadc->InjectionConfig.ChannelCount == 0U)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d10a      	bne.n	80033f2 <HAL_ADCEx_InjectedConfigChannel+0x152>
      {
        /* Update ADC register JSQR */
        MODIFY_REG(hadc->Instance->JSQR              ,
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80033e2:	4b6a      	ldr	r3, [pc, #424]	; (800358c <HAL_ADCEx_InjectedConfigChannel+0x2ec>)
 80033e4:	4013      	ands	r3, r2
 80033e6:	687a      	ldr	r2, [r7, #4]
 80033e8:	6c91      	ldr	r1, [r2, #72]	; 0x48
 80033ea:	687a      	ldr	r2, [r7, #4]
 80033ec:	6812      	ldr	r2, [r2, #0]
 80033ee:	430b      	orrs	r3, r1
 80033f0:	64d3      	str	r3, [r2, #76]	; 0x4c
  /* conversion on going on injected group:                                   */
  /*  - Injected context queue: Queue disable (active context is kept) or     */
  /*    enable (context decremented, up to 2 contexts queued)                 */
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	f003 0308 	and.w	r3, r3, #8
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d12d      	bne.n	800345c <HAL_ADCEx_InjectedConfigChannel+0x1bc>
  {     
    /* If auto-injected mode is disabled: no constraint                       */
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	7f5b      	ldrb	r3, [r3, #29]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d110      	bne.n	800342a <HAL_ADCEx_InjectedConfigChannel+0x18a>
    {
      MODIFY_REG(hadc->Instance->CFGR                                                            ,
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	68db      	ldr	r3, [r3, #12]
 800340e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	7f9b      	ldrb	r3, [r3, #30]
 8003416:	055a      	lsls	r2, r3, #21
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	7f1b      	ldrb	r3, [r3, #28]
 800341c:	051b      	lsls	r3, r3, #20
 800341e:	431a      	orrs	r2, r3
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	430a      	orrs	r2, r1
 8003426:	60da      	str	r2, [r3, #12]
 8003428:	e018      	b.n	800345c <HAL_ADCEx_InjectedConfigChannel+0x1bc>
    }
    /* If auto-injected mode is enabled: Injected discontinuous setting is    */
    /* discarded.                                                             */
    else
    {
      MODIFY_REG(hadc->Instance->CFGR                                                ,
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	7f9b      	ldrb	r3, [r3, #30]
 8003438:	055a      	lsls	r2, r3, #21
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	430a      	orrs	r2, r1
 8003440:	60da      	str	r2, [r3, #12]
                 ADC_CFGR_JDISCEN                                                    ,
                 ADC_CFGR_INJECT_CONTEXT_QUEUE((uint32_t)sConfigInjected->QueueInjectedContext) );
      
      /* If injected discontinuous mode was intended to be set and could not  */
      /* due to auto-injected enabled, error is reported.                     */
      if (sConfigInjected->InjectedDiscontinuousConvMode == ENABLE)
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	7f1b      	ldrb	r3, [r3, #28]
 8003446:	2b01      	cmp	r3, #1
 8003448:	d108      	bne.n	800345c <HAL_ADCEx_InjectedConfigChannel+0x1bc>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344e:	f043 0220 	orr.w	r2, r3, #32
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  /* conversion on going on regular and injected groups:                      */
  /*  - Automatic injected conversion: can be enabled if injected group       */
  /*    external triggers are disabled.                                       */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	f003 030c 	and.w	r3, r3, #12
 8003466:	2b00      	cmp	r3, #0
 8003468:	f040 8110 	bne.w	800368c <HAL_ADCEx_InjectedConfigChannel+0x3ec>
  {    
    /* If injected group external triggers are disabled (set to injected      */
    /* software start): no constraint                                         */
    if (sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	6a1b      	ldr	r3, [r3, #32]
 8003470:	2b01      	cmp	r3, #1
 8003472:	d10c      	bne.n	800348e <HAL_ADCEx_InjectedConfigChannel+0x1ee>
    {
      MODIFY_REG(hadc->Instance->CFGR                                              ,
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	68db      	ldr	r3, [r3, #12]
 800347a:	f023 7100 	bic.w	r1, r3, #33554432	; 0x2000000
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	7f5b      	ldrb	r3, [r3, #29]
 8003482:	065a      	lsls	r2, r3, #25
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	430a      	orrs	r2, r1
 800348a:	60da      	str	r2, [r3, #12]
 800348c:	e014      	b.n	80034b8 <HAL_ADCEx_InjectedConfigChannel+0x218>
    /* If Automatic injected conversion was intended to be set and could not  */
    /* due to injected group external triggers enabled, error is reported.    */
    else
    {
      /* Disable Automatic injected conversion */
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	68da      	ldr	r2, [r3, #12]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 800349c:	60da      	str	r2, [r3, #12]
      
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	7f5b      	ldrb	r3, [r3, #29]
 80034a2:	2b01      	cmp	r3, #1
 80034a4:	d108      	bne.n	80034b8 <HAL_ADCEx_InjectedConfigChannel+0x218>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034aa:	f043 0220 	orr.w	r2, r3, #32
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    }
      

    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	2b09      	cmp	r3, #9
 80034be:	d91c      	bls.n	80034fa <HAL_ADCEx_InjectedConfigChannel+0x25a>
    {
      MODIFY_REG(hadc->Instance->SMPR2                                                             ,
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	6999      	ldr	r1, [r3, #24]
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	4613      	mov	r3, r2
 80034cc:	005b      	lsls	r3, r3, #1
 80034ce:	4413      	add	r3, r2
 80034d0:	3b1e      	subs	r3, #30
 80034d2:	2207      	movs	r2, #7
 80034d4:	fa02 f303 	lsl.w	r3, r2, r3
 80034d8:	43db      	mvns	r3, r3
 80034da:	4019      	ands	r1, r3
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	6898      	ldr	r0, [r3, #8]
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	4613      	mov	r3, r2
 80034e6:	005b      	lsls	r3, r3, #1
 80034e8:	4413      	add	r3, r2
 80034ea:	3b1e      	subs	r3, #30
 80034ec:	fa00 f203 	lsl.w	r2, r0, r3
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	430a      	orrs	r2, r1
 80034f6:	619a      	str	r2, [r3, #24]
 80034f8:	e019      	b.n	800352e <HAL_ADCEx_InjectedConfigChannel+0x28e>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfigInjected->InjectedChannel)                      ,
                 ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                                                             ,
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	6959      	ldr	r1, [r3, #20]
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	681a      	ldr	r2, [r3, #0]
 8003504:	4613      	mov	r3, r2
 8003506:	005b      	lsls	r3, r3, #1
 8003508:	4413      	add	r3, r2
 800350a:	2207      	movs	r2, #7
 800350c:	fa02 f303 	lsl.w	r3, r2, r3
 8003510:	43db      	mvns	r3, r3
 8003512:	4019      	ands	r1, r3
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	6898      	ldr	r0, [r3, #8]
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	4613      	mov	r3, r2
 800351e:	005b      	lsls	r3, r3, #1
 8003520:	4413      	add	r3, r2
 8003522:	fa00 f203 	lsl.w	r2, r0, r3
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	430a      	orrs	r2, r1
 800352c:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */
    
    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	695a      	ldr	r2, [r3, #20]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	68db      	ldr	r3, [r3, #12]
 8003538:	08db      	lsrs	r3, r3, #3
 800353a:	f003 0303 	and.w	r3, r3, #3
 800353e:	005b      	lsls	r3, r3, #1
 8003540:	fa02 f303 	lsl.w	r3, r2, r3
 8003544:	667b      	str	r3, [r7, #100]	; 0x64
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfigInjected->InjectedOffsetNumber)
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	691b      	ldr	r3, [r3, #16]
 800354a:	3b01      	subs	r3, #1
 800354c:	2b03      	cmp	r3, #3
 800354e:	d854      	bhi.n	80035fa <HAL_ADCEx_InjectedConfigChannel+0x35a>
 8003550:	a201      	add	r2, pc, #4	; (adr r2, 8003558 <HAL_ADCEx_InjectedConfigChannel+0x2b8>)
 8003552:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003556:	bf00      	nop
 8003558:	08003569 	.word	0x08003569
 800355c:	08003595 	.word	0x08003595
 8003560:	080035b7 	.word	0x080035b7
 8003564:	080035d9 	.word	0x080035d9
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1                               ,
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800356e:	4b08      	ldr	r3, [pc, #32]	; (8003590 <HAL_ADCEx_InjectedConfigChannel+0x2f0>)
 8003570:	4013      	ands	r3, r2
 8003572:	683a      	ldr	r2, [r7, #0]
 8003574:	6812      	ldr	r2, [r2, #0]
 8003576:	0691      	lsls	r1, r2, #26
 8003578:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800357a:	430a      	orrs	r2, r1
 800357c:	431a      	orrs	r2, r3
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003586:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                                   ,
                 ADC_OFR1_OFFSET1_EN                               |
                 ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel) |
                 tmpOffsetShifted                                    );
      break;
 8003588:	e083      	b.n	8003692 <HAL_ADCEx_InjectedConfigChannel+0x3f2>
 800358a:	bf00      	nop
 800358c:	82082000 	.word	0x82082000
 8003590:	83fff000 	.word	0x83fff000
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2                               ,
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800359a:	4b9a      	ldr	r3, [pc, #616]	; (8003804 <HAL_ADCEx_InjectedConfigChannel+0x564>)
 800359c:	4013      	ands	r3, r2
 800359e:	683a      	ldr	r2, [r7, #0]
 80035a0:	6812      	ldr	r2, [r2, #0]
 80035a2:	0691      	lsls	r1, r2, #26
 80035a4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80035a6:	430a      	orrs	r2, r1
 80035a8:	431a      	orrs	r2, r3
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80035b2:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                                   ,
                 ADC_OFR2_OFFSET2_EN                               |
                 ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel) |
                 tmpOffsetShifted                                    );
      break;
 80035b4:	e06d      	b.n	8003692 <HAL_ADCEx_InjectedConfigChannel+0x3f2>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3                               ,
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80035bc:	4b91      	ldr	r3, [pc, #580]	; (8003804 <HAL_ADCEx_InjectedConfigChannel+0x564>)
 80035be:	4013      	ands	r3, r2
 80035c0:	683a      	ldr	r2, [r7, #0]
 80035c2:	6812      	ldr	r2, [r2, #0]
 80035c4:	0691      	lsls	r1, r2, #26
 80035c6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80035c8:	430a      	orrs	r2, r1
 80035ca:	431a      	orrs	r2, r3
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80035d4:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                                   ,
                 ADC_OFR3_OFFSET3_EN                               |
                 ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel) |
                 tmpOffsetShifted                                    );
      break;
 80035d6:	e05c      	b.n	8003692 <HAL_ADCEx_InjectedConfigChannel+0x3f2>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4                               ,
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80035de:	4b89      	ldr	r3, [pc, #548]	; (8003804 <HAL_ADCEx_InjectedConfigChannel+0x564>)
 80035e0:	4013      	ands	r3, r2
 80035e2:	683a      	ldr	r2, [r7, #0]
 80035e4:	6812      	ldr	r2, [r2, #0]
 80035e6:	0691      	lsls	r1, r2, #26
 80035e8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80035ea:	430a      	orrs	r2, r1
 80035ec:	431a      	orrs	r2, r3
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80035f6:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                                   ,
                 ADC_OFR4_OFFSET4_EN                               |
                 ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel) |
                 tmpOffsetShifted                                    );
      break;
 80035f8:	e04b      	b.n	8003692 <HAL_ADCEx_InjectedConfigChannel+0x3f2>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003600:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	069b      	lsls	r3, r3, #26
 800360a:	429a      	cmp	r2, r3
 800360c:	d107      	bne.n	800361e <HAL_ADCEx_InjectedConfigChannel+0x37e>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800361c:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003624:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	069b      	lsls	r3, r3, #26
 800362e:	429a      	cmp	r2, r3
 8003630:	d107      	bne.n	8003642 <HAL_ADCEx_InjectedConfigChannel+0x3a2>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003640:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003648:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	069b      	lsls	r3, r3, #26
 8003652:	429a      	cmp	r2, r3
 8003654:	d107      	bne.n	8003666 <HAL_ADCEx_InjectedConfigChannel+0x3c6>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003664:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800366c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	069b      	lsls	r3, r3, #26
 8003676:	429a      	cmp	r2, r3
 8003678:	d10a      	bne.n	8003690 <HAL_ADCEx_InjectedConfigChannel+0x3f0>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003688:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 800368a:	e001      	b.n	8003690 <HAL_ADCEx_InjectedConfigChannel+0x3f0>
    }
    
  }
 800368c:	bf00      	nop
 800368e:	e000      	b.n	8003692 <HAL_ADCEx_InjectedConfigChannel+0x3f2>
      break;
 8003690:	bf00      	nop
  
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	f003 0303 	and.w	r3, r3, #3
 800369c:	2b01      	cmp	r3, #1
 800369e:	d108      	bne.n	80036b2 <HAL_ADCEx_InjectedConfigChannel+0x412>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f003 0301 	and.w	r3, r3, #1
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d101      	bne.n	80036b2 <HAL_ADCEx_InjectedConfigChannel+0x412>
 80036ae:	2301      	movs	r3, #1
 80036b0:	e000      	b.n	80036b4 <HAL_ADCEx_InjectedConfigChannel+0x414>
 80036b2:	2300      	movs	r3, #0
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	f040 80f4 	bne.w	80038a2 <HAL_ADCEx_InjectedConfigChannel+0x602>
  {
    /* Configuration of differential mode */
    if (sConfigInjected->InjectedSingleDiff != ADC_DIFFERENTIAL_ENDED)
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	68db      	ldr	r3, [r3, #12]
 80036be:	2b01      	cmp	r3, #1
 80036c0:	d00f      	beq.n	80036e2 <HAL_ADCEx_InjectedConfigChannel+0x442>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfigInjected->InjectedChannel));
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	2201      	movs	r2, #1
 80036d0:	fa02 f303 	lsl.w	r3, r2, r3
 80036d4:	43da      	mvns	r2, r3
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	400a      	ands	r2, r1
 80036dc:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80036e0:	e049      	b.n	8003776 <HAL_ADCEx_InjectedConfigChannel+0x4d6>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfigInjected->InjectedChannel));
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	2201      	movs	r2, #1
 80036f0:	409a      	lsls	r2, r3
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	430a      	orrs	r2, r1
 80036f8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	2b09      	cmp	r3, #9
 8003702:	d91c      	bls.n	800373e <HAL_ADCEx_InjectedConfigChannel+0x49e>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	6999      	ldr	r1, [r3, #24]
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	4613      	mov	r3, r2
 8003710:	005b      	lsls	r3, r3, #1
 8003712:	4413      	add	r3, r2
 8003714:	3b1b      	subs	r3, #27
 8003716:	2207      	movs	r2, #7
 8003718:	fa02 f303 	lsl.w	r3, r2, r3
 800371c:	43db      	mvns	r3, r3
 800371e:	4019      	ands	r1, r3
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	6898      	ldr	r0, [r3, #8]
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	4613      	mov	r3, r2
 800372a:	005b      	lsls	r3, r3, #1
 800372c:	4413      	add	r3, r2
 800372e:	3b1b      	subs	r3, #27
 8003730:	fa00 f203 	lsl.w	r2, r0, r3
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	430a      	orrs	r2, r1
 800373a:	619a      	str	r2, [r3, #24]
 800373c:	e01b      	b.n	8003776 <HAL_ADCEx_InjectedConfigChannel+0x4d6>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfigInjected->InjectedChannel +1U),
                   ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	6959      	ldr	r1, [r3, #20]
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	1c5a      	adds	r2, r3, #1
 800374a:	4613      	mov	r3, r2
 800374c:	005b      	lsls	r3, r3, #1
 800374e:	4413      	add	r3, r2
 8003750:	2207      	movs	r2, #7
 8003752:	fa02 f303 	lsl.w	r3, r2, r3
 8003756:	43db      	mvns	r3, r3
 8003758:	4019      	ands	r1, r3
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	6898      	ldr	r0, [r3, #8]
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	1c5a      	adds	r2, r3, #1
 8003764:	4613      	mov	r3, r2
 8003766:	005b      	lsls	r3, r3, #1
 8003768:	4413      	add	r3, r2
 800376a:	fa00 f203 	lsl.w	r2, r0, r3
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	430a      	orrs	r2, r1
 8003774:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003776:	4b24      	ldr	r3, [pc, #144]	; (8003808 <HAL_ADCEx_InjectedConfigChannel+0x568>)
 8003778:	663b      	str	r3, [r7, #96]	; 0x60
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) &&
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	2b10      	cmp	r3, #16
 8003780:	d105      	bne.n	800378e <HAL_ADCEx_InjectedConfigChannel+0x4ee>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8003782:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) &&
 800378a:	2b00      	cmp	r3, #0
 800378c:	d013      	beq.n	80037b6 <HAL_ADCEx_InjectedConfigChannel+0x516>
        ( (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)       &&
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8003792:	2b11      	cmp	r3, #17
 8003794:	d105      	bne.n	80037a2 <HAL_ADCEx_InjectedConfigChannel+0x502>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8003796:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)       &&
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d009      	beq.n	80037b6 <HAL_ADCEx_InjectedConfigChannel+0x516>
        ( (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)    &&
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80037a6:	2b12      	cmp	r3, #18
 80037a8:	d17b      	bne.n	80038a2 <HAL_ADCEx_InjectedConfigChannel+0x602>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80037aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)    &&
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d175      	bne.n	80038a2 <HAL_ADCEx_InjectedConfigChannel+0x602>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80037b6:	2300      	movs	r3, #0
 80037b8:	613b      	str	r3, [r7, #16]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	f003 0303 	and.w	r3, r3, #3
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d108      	bne.n	80037da <HAL_ADCEx_InjectedConfigChannel+0x53a>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f003 0301 	and.w	r3, r3, #1
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d101      	bne.n	80037da <HAL_ADCEx_InjectedConfigChannel+0x53a>
 80037d6:	2301      	movs	r3, #1
 80037d8:	e000      	b.n	80037dc <HAL_ADCEx_InjectedConfigChannel+0x53c>
 80037da:	2300      	movs	r3, #0
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d155      	bne.n	800388c <HAL_ADCEx_InjectedConfigChannel+0x5ec>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80037e0:	693b      	ldr	r3, [r7, #16]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d015      	beq.n	8003812 <HAL_ADCEx_InjectedConfigChannel+0x572>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	f003 0303 	and.w	r3, r3, #3
 80037ee:	2b01      	cmp	r3, #1
 80037f0:	d10c      	bne.n	800380c <HAL_ADCEx_InjectedConfigChannel+0x56c>
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f003 0301 	and.w	r3, r3, #1
 80037fa:	2b01      	cmp	r3, #1
 80037fc:	d106      	bne.n	800380c <HAL_ADCEx_InjectedConfigChannel+0x56c>
 80037fe:	2301      	movs	r3, #1
 8003800:	e005      	b.n	800380e <HAL_ADCEx_InjectedConfigChannel+0x56e>
 8003802:	bf00      	nop
 8003804:	83fff000 	.word	0x83fff000
 8003808:	50000300 	.word	0x50000300
 800380c:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800380e:	2b00      	cmp	r3, #0
 8003810:	d13c      	bne.n	800388c <HAL_ADCEx_InjectedConfigChannel+0x5ec>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	2b10      	cmp	r3, #16
 8003818:	d11d      	bne.n	8003856 <HAL_ADCEx_InjectedConfigChannel+0x5b6>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003822:	d118      	bne.n	8003856 <HAL_ADCEx_InjectedConfigChannel+0x5b6>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8003824:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800382c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800382e:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003830:	4b22      	ldr	r3, [pc, #136]	; (80038bc <HAL_ADCEx_InjectedConfigChannel+0x61c>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a22      	ldr	r2, [pc, #136]	; (80038c0 <HAL_ADCEx_InjectedConfigChannel+0x620>)
 8003836:	fba2 2303 	umull	r2, r3, r2, r3
 800383a:	0c9a      	lsrs	r2, r3, #18
 800383c:	4613      	mov	r3, r2
 800383e:	009b      	lsls	r3, r3, #2
 8003840:	4413      	add	r3, r2
 8003842:	005b      	lsls	r3, r3, #1
 8003844:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0U)
 8003846:	e002      	b.n	800384e <HAL_ADCEx_InjectedConfigChannel+0x5ae>
          {
            wait_loop_index--;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	3b01      	subs	r3, #1
 800384c:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0U)
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d1f9      	bne.n	8003848 <HAL_ADCEx_InjectedConfigChannel+0x5a8>
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003854:	e024      	b.n	80038a0 <HAL_ADCEx_InjectedConfigChannel+0x600>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	2b11      	cmp	r3, #17
 800385c:	d10b      	bne.n	8003876 <HAL_ADCEx_InjectedConfigChannel+0x5d6>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003866:	d106      	bne.n	8003876 <HAL_ADCEx_InjectedConfigChannel+0x5d6>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8003868:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8003870:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003872:	609a      	str	r2, [r3, #8]
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003874:	e014      	b.n	80038a0 <HAL_ADCEx_InjectedConfigChannel+0x600>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	2b12      	cmp	r3, #18
 800387c:	d110      	bne.n	80038a0 <HAL_ADCEx_InjectedConfigChannel+0x600>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 800387e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003886:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003888:	609a      	str	r2, [r3, #8]
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800388a:	e009      	b.n	80038a0 <HAL_ADCEx_InjectedConfigChannel+0x600>
      /* and other ADC of the common group are enabled, internal              */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003890:	f043 0220 	orr.w	r2, r3, #32
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800389e:	e000      	b.n	80038a2 <HAL_ADCEx_InjectedConfigChannel+0x602>
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80038a0:	bf00      	nop
    }
    
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2200      	movs	r2, #0
 80038a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80038aa:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	3774      	adds	r7, #116	; 0x74
 80038b2:	46bd      	mov	sp, r7
 80038b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b8:	4770      	bx	lr
 80038ba:	bf00      	nop
 80038bc:	20000028 	.word	0x20000028
 80038c0:	431bde83 	.word	0x431bde83

080038c4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b084      	sub	sp, #16
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d0:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d126      	bne.n	800392c <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	68db      	ldr	r3, [r3, #12]
 80038f0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d115      	bne.n	8003924 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d111      	bne.n	8003924 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003904:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003910:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003914:	2b00      	cmp	r3, #0
 8003916:	d105      	bne.n	8003924 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800391c:	f043 0201 	orr.w	r2, r3, #1
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8003924:	68f8      	ldr	r0, [r7, #12]
 8003926:	f7fe fdcb 	bl	80024c0 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800392a:	e004      	b.n	8003936 <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	4798      	blx	r3
}
 8003936:	bf00      	nop
 8003938:	3710      	adds	r7, #16
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}

0800393e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800393e:	b580      	push	{r7, lr}
 8003940:	b084      	sub	sp, #16
 8003942:	af00      	add	r7, sp, #0
 8003944:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800394a:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800394c:	68f8      	ldr	r0, [r7, #12]
 800394e:	f7fe fdc1 	bl	80024d4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 8003952:	bf00      	nop
 8003954:	3710      	adds	r7, #16
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}

0800395a <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800395a:	b580      	push	{r7, lr}
 800395c:	b084      	sub	sp, #16
 800395e:	af00      	add	r7, sp, #0
 8003960:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003966:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800396c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003978:	f043 0204 	orr.w	r2, r3, #4
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003980:	68f8      	ldr	r0, [r7, #12]
 8003982:	f7fe fdbb 	bl	80024fc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003986:	bf00      	nop
 8003988:	3710      	adds	r7, #16
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}
	...

08003990 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b084      	sub	sp, #16
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003998:	2300      	movs	r3, #0
 800399a:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	f003 0303 	and.w	r3, r3, #3
 80039a6:	2b01      	cmp	r3, #1
 80039a8:	d108      	bne.n	80039bc <ADC_Enable+0x2c>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f003 0301 	and.w	r3, r3, #1
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	d101      	bne.n	80039bc <ADC_Enable+0x2c>
 80039b8:	2301      	movs	r3, #1
 80039ba:	e000      	b.n	80039be <ADC_Enable+0x2e>
 80039bc:	2300      	movs	r3, #0
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d143      	bne.n	8003a4a <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	689a      	ldr	r2, [r3, #8]
 80039c8:	4b22      	ldr	r3, [pc, #136]	; (8003a54 <ADC_Enable+0xc4>)
 80039ca:	4013      	ands	r3, r2
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d00d      	beq.n	80039ec <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d4:	f043 0210 	orr.w	r2, r3, #16
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039e0:	f043 0201 	orr.w	r2, r3, #1
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	e02f      	b.n	8003a4c <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	689a      	ldr	r2, [r3, #8]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f042 0201 	orr.w	r2, r2, #1
 80039fa:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 80039fc:	f7fe fd30 	bl	8002460 <HAL_GetTick>
 8003a00:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003a02:	e01b      	b.n	8003a3c <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003a04:	f7fe fd2c 	bl	8002460 <HAL_GetTick>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	1ad3      	subs	r3, r2, r3
 8003a0e:	2b02      	cmp	r3, #2
 8003a10:	d914      	bls.n	8003a3c <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f003 0301 	and.w	r3, r3, #1
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d00d      	beq.n	8003a3c <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a24:	f043 0210 	orr.w	r2, r3, #16
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a30:	f043 0201 	orr.w	r2, r3, #1
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	e007      	b.n	8003a4c <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f003 0301 	and.w	r3, r3, #1
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d1dc      	bne.n	8003a04 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003a4a:	2300      	movs	r3, #0
}
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	3710      	adds	r7, #16
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bd80      	pop	{r7, pc}
 8003a54:	8000003f 	.word	0x8000003f

08003a58 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b084      	sub	sp, #16
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003a60:	2300      	movs	r3, #0
 8003a62:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	f003 0303 	and.w	r3, r3, #3
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	d108      	bne.n	8003a84 <ADC_Disable+0x2c>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f003 0301 	and.w	r3, r3, #1
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d101      	bne.n	8003a84 <ADC_Disable+0x2c>
 8003a80:	2301      	movs	r3, #1
 8003a82:	e000      	b.n	8003a86 <ADC_Disable+0x2e>
 8003a84:	2300      	movs	r3, #0
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d047      	beq.n	8003b1a <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	f003 030d 	and.w	r3, r3, #13
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	d10f      	bne.n	8003ab8 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	689a      	ldr	r2, [r3, #8]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f042 0202 	orr.w	r2, r2, #2
 8003aa6:	609a      	str	r2, [r3, #8]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	2203      	movs	r2, #3
 8003aae:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8003ab0:	f7fe fcd6 	bl	8002460 <HAL_GetTick>
 8003ab4:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003ab6:	e029      	b.n	8003b0c <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003abc:	f043 0210 	orr.w	r2, r3, #16
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ac8:	f043 0201 	orr.w	r2, r3, #1
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	e023      	b.n	8003b1c <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003ad4:	f7fe fcc4 	bl	8002460 <HAL_GetTick>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	1ad3      	subs	r3, r2, r3
 8003ade:	2b02      	cmp	r3, #2
 8003ae0:	d914      	bls.n	8003b0c <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	f003 0301 	and.w	r3, r3, #1
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d10d      	bne.n	8003b0c <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af4:	f043 0210 	orr.w	r2, r3, #16
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b00:	f043 0201 	orr.w	r2, r3, #1
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	e007      	b.n	8003b1c <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	f003 0301 	and.w	r3, r3, #1
 8003b16:	2b01      	cmp	r3, #1
 8003b18:	d0dc      	beq.n	8003ad4 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003b1a:	2300      	movs	r3, #0
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	3710      	adds	r7, #16
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}

08003b24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b085      	sub	sp, #20
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	f003 0307 	and.w	r3, r3, #7
 8003b32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b34:	4b0c      	ldr	r3, [pc, #48]	; (8003b68 <__NVIC_SetPriorityGrouping+0x44>)
 8003b36:	68db      	ldr	r3, [r3, #12]
 8003b38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b3a:	68ba      	ldr	r2, [r7, #8]
 8003b3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003b40:	4013      	ands	r3, r2
 8003b42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003b4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003b50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b56:	4a04      	ldr	r2, [pc, #16]	; (8003b68 <__NVIC_SetPriorityGrouping+0x44>)
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	60d3      	str	r3, [r2, #12]
}
 8003b5c:	bf00      	nop
 8003b5e:	3714      	adds	r7, #20
 8003b60:	46bd      	mov	sp, r7
 8003b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b66:	4770      	bx	lr
 8003b68:	e000ed00 	.word	0xe000ed00

08003b6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b70:	4b04      	ldr	r3, [pc, #16]	; (8003b84 <__NVIC_GetPriorityGrouping+0x18>)
 8003b72:	68db      	ldr	r3, [r3, #12]
 8003b74:	0a1b      	lsrs	r3, r3, #8
 8003b76:	f003 0307 	and.w	r3, r3, #7
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b82:	4770      	bx	lr
 8003b84:	e000ed00 	.word	0xe000ed00

08003b88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b083      	sub	sp, #12
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	4603      	mov	r3, r0
 8003b90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	db0b      	blt.n	8003bb2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b9a:	79fb      	ldrb	r3, [r7, #7]
 8003b9c:	f003 021f 	and.w	r2, r3, #31
 8003ba0:	4907      	ldr	r1, [pc, #28]	; (8003bc0 <__NVIC_EnableIRQ+0x38>)
 8003ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ba6:	095b      	lsrs	r3, r3, #5
 8003ba8:	2001      	movs	r0, #1
 8003baa:	fa00 f202 	lsl.w	r2, r0, r2
 8003bae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003bb2:	bf00      	nop
 8003bb4:	370c      	adds	r7, #12
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbc:	4770      	bx	lr
 8003bbe:	bf00      	nop
 8003bc0:	e000e100 	.word	0xe000e100

08003bc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b083      	sub	sp, #12
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	4603      	mov	r3, r0
 8003bcc:	6039      	str	r1, [r7, #0]
 8003bce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003bd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	db0a      	blt.n	8003bee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	b2da      	uxtb	r2, r3
 8003bdc:	490c      	ldr	r1, [pc, #48]	; (8003c10 <__NVIC_SetPriority+0x4c>)
 8003bde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003be2:	0112      	lsls	r2, r2, #4
 8003be4:	b2d2      	uxtb	r2, r2
 8003be6:	440b      	add	r3, r1
 8003be8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003bec:	e00a      	b.n	8003c04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	b2da      	uxtb	r2, r3
 8003bf2:	4908      	ldr	r1, [pc, #32]	; (8003c14 <__NVIC_SetPriority+0x50>)
 8003bf4:	79fb      	ldrb	r3, [r7, #7]
 8003bf6:	f003 030f 	and.w	r3, r3, #15
 8003bfa:	3b04      	subs	r3, #4
 8003bfc:	0112      	lsls	r2, r2, #4
 8003bfe:	b2d2      	uxtb	r2, r2
 8003c00:	440b      	add	r3, r1
 8003c02:	761a      	strb	r2, [r3, #24]
}
 8003c04:	bf00      	nop
 8003c06:	370c      	adds	r7, #12
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0e:	4770      	bx	lr
 8003c10:	e000e100 	.word	0xe000e100
 8003c14:	e000ed00 	.word	0xe000ed00

08003c18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b089      	sub	sp, #36	; 0x24
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	60f8      	str	r0, [r7, #12]
 8003c20:	60b9      	str	r1, [r7, #8]
 8003c22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	f003 0307 	and.w	r3, r3, #7
 8003c2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c2c:	69fb      	ldr	r3, [r7, #28]
 8003c2e:	f1c3 0307 	rsb	r3, r3, #7
 8003c32:	2b04      	cmp	r3, #4
 8003c34:	bf28      	it	cs
 8003c36:	2304      	movcs	r3, #4
 8003c38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c3a:	69fb      	ldr	r3, [r7, #28]
 8003c3c:	3304      	adds	r3, #4
 8003c3e:	2b06      	cmp	r3, #6
 8003c40:	d902      	bls.n	8003c48 <NVIC_EncodePriority+0x30>
 8003c42:	69fb      	ldr	r3, [r7, #28]
 8003c44:	3b03      	subs	r3, #3
 8003c46:	e000      	b.n	8003c4a <NVIC_EncodePriority+0x32>
 8003c48:	2300      	movs	r3, #0
 8003c4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c4c:	f04f 32ff 	mov.w	r2, #4294967295
 8003c50:	69bb      	ldr	r3, [r7, #24]
 8003c52:	fa02 f303 	lsl.w	r3, r2, r3
 8003c56:	43da      	mvns	r2, r3
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	401a      	ands	r2, r3
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c60:	f04f 31ff 	mov.w	r1, #4294967295
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	fa01 f303 	lsl.w	r3, r1, r3
 8003c6a:	43d9      	mvns	r1, r3
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c70:	4313      	orrs	r3, r2
         );
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	3724      	adds	r7, #36	; 0x24
 8003c76:	46bd      	mov	sp, r7
 8003c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7c:	4770      	bx	lr
	...

08003c80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b082      	sub	sp, #8
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	3b01      	subs	r3, #1
 8003c8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c90:	d301      	bcc.n	8003c96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003c92:	2301      	movs	r3, #1
 8003c94:	e00f      	b.n	8003cb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c96:	4a0a      	ldr	r2, [pc, #40]	; (8003cc0 <SysTick_Config+0x40>)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	3b01      	subs	r3, #1
 8003c9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003c9e:	210f      	movs	r1, #15
 8003ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ca4:	f7ff ff8e 	bl	8003bc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ca8:	4b05      	ldr	r3, [pc, #20]	; (8003cc0 <SysTick_Config+0x40>)
 8003caa:	2200      	movs	r2, #0
 8003cac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003cae:	4b04      	ldr	r3, [pc, #16]	; (8003cc0 <SysTick_Config+0x40>)
 8003cb0:	2207      	movs	r2, #7
 8003cb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003cb4:	2300      	movs	r3, #0
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	3708      	adds	r7, #8
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}
 8003cbe:	bf00      	nop
 8003cc0:	e000e010 	.word	0xe000e010

08003cc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b082      	sub	sp, #8
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ccc:	6878      	ldr	r0, [r7, #4]
 8003cce:	f7ff ff29 	bl	8003b24 <__NVIC_SetPriorityGrouping>
}
 8003cd2:	bf00      	nop
 8003cd4:	3708      	adds	r7, #8
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}

08003cda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003cda:	b580      	push	{r7, lr}
 8003cdc:	b086      	sub	sp, #24
 8003cde:	af00      	add	r7, sp, #0
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	60b9      	str	r1, [r7, #8]
 8003ce4:	607a      	str	r2, [r7, #4]
 8003ce6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003cec:	f7ff ff3e 	bl	8003b6c <__NVIC_GetPriorityGrouping>
 8003cf0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003cf2:	687a      	ldr	r2, [r7, #4]
 8003cf4:	68b9      	ldr	r1, [r7, #8]
 8003cf6:	6978      	ldr	r0, [r7, #20]
 8003cf8:	f7ff ff8e 	bl	8003c18 <NVIC_EncodePriority>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d02:	4611      	mov	r1, r2
 8003d04:	4618      	mov	r0, r3
 8003d06:	f7ff ff5d 	bl	8003bc4 <__NVIC_SetPriority>
}
 8003d0a:	bf00      	nop
 8003d0c:	3718      	adds	r7, #24
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}

08003d12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d12:	b580      	push	{r7, lr}
 8003d14:	b082      	sub	sp, #8
 8003d16:	af00      	add	r7, sp, #0
 8003d18:	4603      	mov	r3, r0
 8003d1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d20:	4618      	mov	r0, r3
 8003d22:	f7ff ff31 	bl	8003b88 <__NVIC_EnableIRQ>
}
 8003d26:	bf00      	nop
 8003d28:	3708      	adds	r7, #8
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}

08003d2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003d2e:	b580      	push	{r7, lr}
 8003d30:	b082      	sub	sp, #8
 8003d32:	af00      	add	r7, sp, #0
 8003d34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f7ff ffa2 	bl	8003c80 <SysTick_Config>
 8003d3c:	4603      	mov	r3, r0
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	3708      	adds	r7, #8
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}

08003d46 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8003d46:	b580      	push	{r7, lr}
 8003d48:	b084      	sub	sp, #16
 8003d4a:	af00      	add	r7, sp, #0
 8003d4c:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d101      	bne.n	8003d5c <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	e037      	b.n	8003dcc <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2202      	movs	r2, #2
 8003d60:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003d72:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003d76:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003d80:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	68db      	ldr	r3, [r3, #12]
 8003d86:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	695b      	ldr	r3, [r3, #20]
 8003d92:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d98:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	69db      	ldr	r3, [r3, #28]
 8003d9e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003da0:	68fa      	ldr	r2, [r7, #12]
 8003da2:	4313      	orrs	r3, r2
 8003da4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	68fa      	ldr	r2, [r7, #12]
 8003dac:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	f000 f9b8 	bl	8004124 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2200      	movs	r2, #0
 8003db8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2201      	movs	r2, #1
 8003dbe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8003dca:	2300      	movs	r3, #0
}  
 8003dcc:	4618      	mov	r0, r3
 8003dce:	3710      	adds	r7, #16
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}

08003dd4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b086      	sub	sp, #24
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	60f8      	str	r0, [r7, #12]
 8003ddc:	60b9      	str	r1, [r7, #8]
 8003dde:	607a      	str	r2, [r7, #4]
 8003de0:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8003de2:	2300      	movs	r3, #0
 8003de4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d101      	bne.n	8003df4 <HAL_DMA_Start_IT+0x20>
 8003df0:	2302      	movs	r3, #2
 8003df2:	e04a      	b.n	8003e8a <HAL_DMA_Start_IT+0xb6>
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2201      	movs	r2, #1
 8003df8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003e02:	2b01      	cmp	r3, #1
 8003e04:	d13a      	bne.n	8003e7c <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2202      	movs	r2, #2
 8003e0a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2200      	movs	r2, #0
 8003e12:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f022 0201 	bic.w	r2, r2, #1
 8003e22:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	687a      	ldr	r2, [r7, #4]
 8003e28:	68b9      	ldr	r1, [r7, #8]
 8003e2a:	68f8      	ldr	r0, [r7, #12]
 8003e2c:	f000 f94b 	bl	80040c6 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d008      	beq.n	8003e4a <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f042 020e 	orr.w	r2, r2, #14
 8003e46:	601a      	str	r2, [r3, #0]
 8003e48:	e00f      	b.n	8003e6a <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	681a      	ldr	r2, [r3, #0]
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f042 020a 	orr.w	r2, r2, #10
 8003e58:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	681a      	ldr	r2, [r3, #0]
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f022 0204 	bic.w	r2, r2, #4
 8003e68:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	681a      	ldr	r2, [r3, #0]
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f042 0201 	orr.w	r2, r2, #1
 8003e78:	601a      	str	r2, [r3, #0]
 8003e7a:	e005      	b.n	8003e88 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8003e84:	2302      	movs	r3, #2
 8003e86:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8003e88:	7dfb      	ldrb	r3, [r7, #23]
} 
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	3718      	adds	r7, #24
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}

08003e92 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003e92:	b480      	push	{r7}
 8003e94:	b083      	sub	sp, #12
 8003e96:	af00      	add	r7, sp, #0
 8003e98:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003ea0:	2b02      	cmp	r3, #2
 8003ea2:	d008      	beq.n	8003eb6 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2204      	movs	r2, #4
 8003ea8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2200      	movs	r2, #0
 8003eae:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e020      	b.n	8003ef8 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f022 020e 	bic.w	r2, r2, #14
 8003ec4:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f022 0201 	bic.w	r2, r2, #1
 8003ed4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ede:	2101      	movs	r1, #1
 8003ee0:	fa01 f202 	lsl.w	r2, r1, r2
 8003ee4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2201      	movs	r2, #1
 8003eea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8003ef6:	2300      	movs	r3, #0
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	370c      	adds	r7, #12
 8003efc:	46bd      	mov	sp, r7
 8003efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f02:	4770      	bx	lr

08003f04 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b084      	sub	sp, #16
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003f16:	2b02      	cmp	r3, #2
 8003f18:	d005      	beq.n	8003f26 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2204      	movs	r2, #4
 8003f1e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	73fb      	strb	r3, [r7, #15]
 8003f24:	e027      	b.n	8003f76 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f022 020e 	bic.w	r2, r2, #14
 8003f34:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f022 0201 	bic.w	r2, r2, #1
 8003f44:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f4e:	2101      	movs	r1, #1
 8003f50:	fa01 f202 	lsl.w	r2, r1, r2
 8003f54:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2201      	movs	r2, #1
 8003f5a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2200      	movs	r2, #0
 8003f62:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d003      	beq.n	8003f76 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	4798      	blx	r3
    } 
  }
  return status;
 8003f76:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	3710      	adds	r7, #16
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bd80      	pop	{r7, pc}

08003f80 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b084      	sub	sp, #16
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f9c:	2204      	movs	r2, #4
 8003f9e:	409a      	lsls	r2, r3
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	4013      	ands	r3, r2
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d024      	beq.n	8003ff2 <HAL_DMA_IRQHandler+0x72>
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	f003 0304 	and.w	r3, r3, #4
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d01f      	beq.n	8003ff2 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f003 0320 	and.w	r3, r3, #32
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d107      	bne.n	8003fd0 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f022 0204 	bic.w	r2, r2, #4
 8003fce:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fd8:	2104      	movs	r1, #4
 8003fda:	fa01 f202 	lsl.w	r2, r1, r2
 8003fde:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d06a      	beq.n	80040be <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fec:	6878      	ldr	r0, [r7, #4]
 8003fee:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8003ff0:	e065      	b.n	80040be <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff6:	2202      	movs	r2, #2
 8003ff8:	409a      	lsls	r2, r3
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	4013      	ands	r3, r2
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d02c      	beq.n	800405c <HAL_DMA_IRQHandler+0xdc>
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	f003 0302 	and.w	r3, r3, #2
 8004008:	2b00      	cmp	r3, #0
 800400a:	d027      	beq.n	800405c <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f003 0320 	and.w	r3, r3, #32
 8004016:	2b00      	cmp	r3, #0
 8004018:	d10b      	bne.n	8004032 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	681a      	ldr	r2, [r3, #0]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f022 020a 	bic.w	r2, r2, #10
 8004028:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2201      	movs	r2, #1
 800402e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800403a:	2102      	movs	r1, #2
 800403c:	fa01 f202 	lsl.w	r2, r1, r2
 8004040:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2200      	movs	r2, #0
 8004046:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800404e:	2b00      	cmp	r3, #0
 8004050:	d035      	beq.n	80040be <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 800405a:	e030      	b.n	80040be <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004060:	2208      	movs	r2, #8
 8004062:	409a      	lsls	r2, r3
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	4013      	ands	r3, r2
 8004068:	2b00      	cmp	r3, #0
 800406a:	d028      	beq.n	80040be <HAL_DMA_IRQHandler+0x13e>
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	f003 0308 	and.w	r3, r3, #8
 8004072:	2b00      	cmp	r3, #0
 8004074:	d023      	beq.n	80040be <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	681a      	ldr	r2, [r3, #0]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f022 020e 	bic.w	r2, r2, #14
 8004084:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800408e:	2101      	movs	r1, #1
 8004090:	fa01 f202 	lsl.w	r2, r1, r2
 8004094:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2201      	movs	r2, #1
 800409a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2201      	movs	r2, #1
 80040a0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2200      	movs	r2, #0
 80040a8:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d004      	beq.n	80040be <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040b8:	6878      	ldr	r0, [r7, #4]
 80040ba:	4798      	blx	r3
    }
  }
}  
 80040bc:	e7ff      	b.n	80040be <HAL_DMA_IRQHandler+0x13e>
 80040be:	bf00      	nop
 80040c0:	3710      	adds	r7, #16
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}

080040c6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80040c6:	b480      	push	{r7}
 80040c8:	b085      	sub	sp, #20
 80040ca:	af00      	add	r7, sp, #0
 80040cc:	60f8      	str	r0, [r7, #12]
 80040ce:	60b9      	str	r1, [r7, #8]
 80040d0:	607a      	str	r2, [r7, #4]
 80040d2:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040dc:	2101      	movs	r1, #1
 80040de:	fa01 f202 	lsl.w	r2, r1, r2
 80040e2:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	683a      	ldr	r2, [r7, #0]
 80040ea:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	2b10      	cmp	r3, #16
 80040f2:	d108      	bne.n	8004106 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	687a      	ldr	r2, [r7, #4]
 80040fa:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	68ba      	ldr	r2, [r7, #8]
 8004102:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004104:	e007      	b.n	8004116 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	68ba      	ldr	r2, [r7, #8]
 800410c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	687a      	ldr	r2, [r7, #4]
 8004114:	60da      	str	r2, [r3, #12]
}
 8004116:	bf00      	nop
 8004118:	3714      	adds	r7, #20
 800411a:	46bd      	mov	sp, r7
 800411c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004120:	4770      	bx	lr
	...

08004124 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004124:	b480      	push	{r7}
 8004126:	b083      	sub	sp, #12
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	461a      	mov	r2, r3
 8004132:	4b09      	ldr	r3, [pc, #36]	; (8004158 <DMA_CalcBaseAndBitshift+0x34>)
 8004134:	4413      	add	r3, r2
 8004136:	4a09      	ldr	r2, [pc, #36]	; (800415c <DMA_CalcBaseAndBitshift+0x38>)
 8004138:	fba2 2303 	umull	r2, r3, r2, r3
 800413c:	091b      	lsrs	r3, r3, #4
 800413e:	009a      	lsls	r2, r3, #2
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	4a06      	ldr	r2, [pc, #24]	; (8004160 <DMA_CalcBaseAndBitshift+0x3c>)
 8004148:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 800414a:	bf00      	nop
 800414c:	370c      	adds	r7, #12
 800414e:	46bd      	mov	sp, r7
 8004150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004154:	4770      	bx	lr
 8004156:	bf00      	nop
 8004158:	bffdfff8 	.word	0xbffdfff8
 800415c:	cccccccd 	.word	0xcccccccd
 8004160:	40020000 	.word	0x40020000

08004164 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004164:	b480      	push	{r7}
 8004166:	b087      	sub	sp, #28
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
 800416c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800416e:	2300      	movs	r3, #0
 8004170:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004172:	e14e      	b.n	8004412 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	681a      	ldr	r2, [r3, #0]
 8004178:	2101      	movs	r1, #1
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	fa01 f303 	lsl.w	r3, r1, r3
 8004180:	4013      	ands	r3, r2
 8004182:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2b00      	cmp	r3, #0
 8004188:	f000 8140 	beq.w	800440c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	f003 0303 	and.w	r3, r3, #3
 8004194:	2b01      	cmp	r3, #1
 8004196:	d005      	beq.n	80041a4 <HAL_GPIO_Init+0x40>
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	f003 0303 	and.w	r3, r3, #3
 80041a0:	2b02      	cmp	r3, #2
 80041a2:	d130      	bne.n	8004206 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	005b      	lsls	r3, r3, #1
 80041ae:	2203      	movs	r2, #3
 80041b0:	fa02 f303 	lsl.w	r3, r2, r3
 80041b4:	43db      	mvns	r3, r3
 80041b6:	693a      	ldr	r2, [r7, #16]
 80041b8:	4013      	ands	r3, r2
 80041ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	68da      	ldr	r2, [r3, #12]
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	005b      	lsls	r3, r3, #1
 80041c4:	fa02 f303 	lsl.w	r3, r2, r3
 80041c8:	693a      	ldr	r2, [r7, #16]
 80041ca:	4313      	orrs	r3, r2
 80041cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	693a      	ldr	r2, [r7, #16]
 80041d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80041da:	2201      	movs	r2, #1
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	fa02 f303 	lsl.w	r3, r2, r3
 80041e2:	43db      	mvns	r3, r3
 80041e4:	693a      	ldr	r2, [r7, #16]
 80041e6:	4013      	ands	r3, r2
 80041e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	091b      	lsrs	r3, r3, #4
 80041f0:	f003 0201 	and.w	r2, r3, #1
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	fa02 f303 	lsl.w	r3, r2, r3
 80041fa:	693a      	ldr	r2, [r7, #16]
 80041fc:	4313      	orrs	r3, r2
 80041fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	693a      	ldr	r2, [r7, #16]
 8004204:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	f003 0303 	and.w	r3, r3, #3
 800420e:	2b03      	cmp	r3, #3
 8004210:	d017      	beq.n	8004242 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	68db      	ldr	r3, [r3, #12]
 8004216:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	005b      	lsls	r3, r3, #1
 800421c:	2203      	movs	r2, #3
 800421e:	fa02 f303 	lsl.w	r3, r2, r3
 8004222:	43db      	mvns	r3, r3
 8004224:	693a      	ldr	r2, [r7, #16]
 8004226:	4013      	ands	r3, r2
 8004228:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	689a      	ldr	r2, [r3, #8]
 800422e:	697b      	ldr	r3, [r7, #20]
 8004230:	005b      	lsls	r3, r3, #1
 8004232:	fa02 f303 	lsl.w	r3, r2, r3
 8004236:	693a      	ldr	r2, [r7, #16]
 8004238:	4313      	orrs	r3, r2
 800423a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	693a      	ldr	r2, [r7, #16]
 8004240:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	f003 0303 	and.w	r3, r3, #3
 800424a:	2b02      	cmp	r3, #2
 800424c:	d123      	bne.n	8004296 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	08da      	lsrs	r2, r3, #3
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	3208      	adds	r2, #8
 8004256:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800425a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	f003 0307 	and.w	r3, r3, #7
 8004262:	009b      	lsls	r3, r3, #2
 8004264:	220f      	movs	r2, #15
 8004266:	fa02 f303 	lsl.w	r3, r2, r3
 800426a:	43db      	mvns	r3, r3
 800426c:	693a      	ldr	r2, [r7, #16]
 800426e:	4013      	ands	r3, r2
 8004270:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	691a      	ldr	r2, [r3, #16]
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	f003 0307 	and.w	r3, r3, #7
 800427c:	009b      	lsls	r3, r3, #2
 800427e:	fa02 f303 	lsl.w	r3, r2, r3
 8004282:	693a      	ldr	r2, [r7, #16]
 8004284:	4313      	orrs	r3, r2
 8004286:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	08da      	lsrs	r2, r3, #3
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	3208      	adds	r2, #8
 8004290:	6939      	ldr	r1, [r7, #16]
 8004292:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	005b      	lsls	r3, r3, #1
 80042a0:	2203      	movs	r2, #3
 80042a2:	fa02 f303 	lsl.w	r3, r2, r3
 80042a6:	43db      	mvns	r3, r3
 80042a8:	693a      	ldr	r2, [r7, #16]
 80042aa:	4013      	ands	r3, r2
 80042ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	f003 0203 	and.w	r2, r3, #3
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	005b      	lsls	r3, r3, #1
 80042ba:	fa02 f303 	lsl.w	r3, r2, r3
 80042be:	693a      	ldr	r2, [r7, #16]
 80042c0:	4313      	orrs	r3, r2
 80042c2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	693a      	ldr	r2, [r7, #16]
 80042c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	f000 809a 	beq.w	800440c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80042d8:	4b55      	ldr	r3, [pc, #340]	; (8004430 <HAL_GPIO_Init+0x2cc>)
 80042da:	699b      	ldr	r3, [r3, #24]
 80042dc:	4a54      	ldr	r2, [pc, #336]	; (8004430 <HAL_GPIO_Init+0x2cc>)
 80042de:	f043 0301 	orr.w	r3, r3, #1
 80042e2:	6193      	str	r3, [r2, #24]
 80042e4:	4b52      	ldr	r3, [pc, #328]	; (8004430 <HAL_GPIO_Init+0x2cc>)
 80042e6:	699b      	ldr	r3, [r3, #24]
 80042e8:	f003 0301 	and.w	r3, r3, #1
 80042ec:	60bb      	str	r3, [r7, #8]
 80042ee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80042f0:	4a50      	ldr	r2, [pc, #320]	; (8004434 <HAL_GPIO_Init+0x2d0>)
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	089b      	lsrs	r3, r3, #2
 80042f6:	3302      	adds	r3, #2
 80042f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042fc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	f003 0303 	and.w	r3, r3, #3
 8004304:	009b      	lsls	r3, r3, #2
 8004306:	220f      	movs	r2, #15
 8004308:	fa02 f303 	lsl.w	r3, r2, r3
 800430c:	43db      	mvns	r3, r3
 800430e:	693a      	ldr	r2, [r7, #16]
 8004310:	4013      	ands	r3, r2
 8004312:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800431a:	d013      	beq.n	8004344 <HAL_GPIO_Init+0x1e0>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	4a46      	ldr	r2, [pc, #280]	; (8004438 <HAL_GPIO_Init+0x2d4>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d00d      	beq.n	8004340 <HAL_GPIO_Init+0x1dc>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	4a45      	ldr	r2, [pc, #276]	; (800443c <HAL_GPIO_Init+0x2d8>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d007      	beq.n	800433c <HAL_GPIO_Init+0x1d8>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	4a44      	ldr	r2, [pc, #272]	; (8004440 <HAL_GPIO_Init+0x2dc>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d101      	bne.n	8004338 <HAL_GPIO_Init+0x1d4>
 8004334:	2303      	movs	r3, #3
 8004336:	e006      	b.n	8004346 <HAL_GPIO_Init+0x1e2>
 8004338:	2305      	movs	r3, #5
 800433a:	e004      	b.n	8004346 <HAL_GPIO_Init+0x1e2>
 800433c:	2302      	movs	r3, #2
 800433e:	e002      	b.n	8004346 <HAL_GPIO_Init+0x1e2>
 8004340:	2301      	movs	r3, #1
 8004342:	e000      	b.n	8004346 <HAL_GPIO_Init+0x1e2>
 8004344:	2300      	movs	r3, #0
 8004346:	697a      	ldr	r2, [r7, #20]
 8004348:	f002 0203 	and.w	r2, r2, #3
 800434c:	0092      	lsls	r2, r2, #2
 800434e:	4093      	lsls	r3, r2
 8004350:	693a      	ldr	r2, [r7, #16]
 8004352:	4313      	orrs	r3, r2
 8004354:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004356:	4937      	ldr	r1, [pc, #220]	; (8004434 <HAL_GPIO_Init+0x2d0>)
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	089b      	lsrs	r3, r3, #2
 800435c:	3302      	adds	r3, #2
 800435e:	693a      	ldr	r2, [r7, #16]
 8004360:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004364:	4b37      	ldr	r3, [pc, #220]	; (8004444 <HAL_GPIO_Init+0x2e0>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	43db      	mvns	r3, r3
 800436e:	693a      	ldr	r2, [r7, #16]
 8004370:	4013      	ands	r3, r2
 8004372:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800437c:	2b00      	cmp	r3, #0
 800437e:	d003      	beq.n	8004388 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8004380:	693a      	ldr	r2, [r7, #16]
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	4313      	orrs	r3, r2
 8004386:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004388:	4a2e      	ldr	r2, [pc, #184]	; (8004444 <HAL_GPIO_Init+0x2e0>)
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800438e:	4b2d      	ldr	r3, [pc, #180]	; (8004444 <HAL_GPIO_Init+0x2e0>)
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	43db      	mvns	r3, r3
 8004398:	693a      	ldr	r2, [r7, #16]
 800439a:	4013      	ands	r3, r2
 800439c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d003      	beq.n	80043b2 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80043aa:	693a      	ldr	r2, [r7, #16]
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	4313      	orrs	r3, r2
 80043b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80043b2:	4a24      	ldr	r2, [pc, #144]	; (8004444 <HAL_GPIO_Init+0x2e0>)
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80043b8:	4b22      	ldr	r3, [pc, #136]	; (8004444 <HAL_GPIO_Init+0x2e0>)
 80043ba:	689b      	ldr	r3, [r3, #8]
 80043bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	43db      	mvns	r3, r3
 80043c2:	693a      	ldr	r2, [r7, #16]
 80043c4:	4013      	ands	r3, r2
 80043c6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d003      	beq.n	80043dc <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80043d4:	693a      	ldr	r2, [r7, #16]
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	4313      	orrs	r3, r2
 80043da:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80043dc:	4a19      	ldr	r2, [pc, #100]	; (8004444 <HAL_GPIO_Init+0x2e0>)
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80043e2:	4b18      	ldr	r3, [pc, #96]	; (8004444 <HAL_GPIO_Init+0x2e0>)
 80043e4:	68db      	ldr	r3, [r3, #12]
 80043e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	43db      	mvns	r3, r3
 80043ec:	693a      	ldr	r2, [r7, #16]
 80043ee:	4013      	ands	r3, r2
 80043f0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d003      	beq.n	8004406 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80043fe:	693a      	ldr	r2, [r7, #16]
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	4313      	orrs	r3, r2
 8004404:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004406:	4a0f      	ldr	r2, [pc, #60]	; (8004444 <HAL_GPIO_Init+0x2e0>)
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	3301      	adds	r3, #1
 8004410:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	681a      	ldr	r2, [r3, #0]
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	fa22 f303 	lsr.w	r3, r2, r3
 800441c:	2b00      	cmp	r3, #0
 800441e:	f47f aea9 	bne.w	8004174 <HAL_GPIO_Init+0x10>
  }
}
 8004422:	bf00      	nop
 8004424:	bf00      	nop
 8004426:	371c      	adds	r7, #28
 8004428:	46bd      	mov	sp, r7
 800442a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442e:	4770      	bx	lr
 8004430:	40021000 	.word	0x40021000
 8004434:	40010000 	.word	0x40010000
 8004438:	48000400 	.word	0x48000400
 800443c:	48000800 	.word	0x48000800
 8004440:	48000c00 	.word	0x48000c00
 8004444:	40010400 	.word	0x40010400

08004448 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004448:	b480      	push	{r7}
 800444a:	b085      	sub	sp, #20
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
 8004450:	460b      	mov	r3, r1
 8004452:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	691a      	ldr	r2, [r3, #16]
 8004458:	887b      	ldrh	r3, [r7, #2]
 800445a:	4013      	ands	r3, r2
 800445c:	2b00      	cmp	r3, #0
 800445e:	d002      	beq.n	8004466 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004460:	2301      	movs	r3, #1
 8004462:	73fb      	strb	r3, [r7, #15]
 8004464:	e001      	b.n	800446a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004466:	2300      	movs	r3, #0
 8004468:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800446a:	7bfb      	ldrb	r3, [r7, #15]
}
 800446c:	4618      	mov	r0, r3
 800446e:	3714      	adds	r7, #20
 8004470:	46bd      	mov	sp, r7
 8004472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004476:	4770      	bx	lr

08004478 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004478:	b480      	push	{r7}
 800447a:	b083      	sub	sp, #12
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
 8004480:	460b      	mov	r3, r1
 8004482:	807b      	strh	r3, [r7, #2]
 8004484:	4613      	mov	r3, r2
 8004486:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004488:	787b      	ldrb	r3, [r7, #1]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d003      	beq.n	8004496 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800448e:	887a      	ldrh	r2, [r7, #2]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004494:	e002      	b.n	800449c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004496:	887a      	ldrh	r2, [r7, #2]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800449c:	bf00      	nop
 800449e:	370c      	adds	r7, #12
 80044a0:	46bd      	mov	sp, r7
 80044a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a6:	4770      	bx	lr

080044a8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b085      	sub	sp, #20
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
 80044b0:	460b      	mov	r3, r1
 80044b2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	695b      	ldr	r3, [r3, #20]
 80044b8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80044ba:	887a      	ldrh	r2, [r7, #2]
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	4013      	ands	r3, r2
 80044c0:	041a      	lsls	r2, r3, #16
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	43d9      	mvns	r1, r3
 80044c6:	887b      	ldrh	r3, [r7, #2]
 80044c8:	400b      	ands	r3, r1
 80044ca:	431a      	orrs	r2, r3
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	619a      	str	r2, [r3, #24]
}
 80044d0:	bf00      	nop
 80044d2:	3714      	adds	r7, #20
 80044d4:	46bd      	mov	sp, r7
 80044d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044da:	4770      	bx	lr

080044dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b082      	sub	sp, #8
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d101      	bne.n	80044ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	e081      	b.n	80045f2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044f4:	b2db      	uxtb	r3, r3
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d106      	bne.n	8004508 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2200      	movs	r2, #0
 80044fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	f7fc fdae 	bl	8001064 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2224      	movs	r2, #36	; 0x24
 800450c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	681a      	ldr	r2, [r3, #0]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f022 0201 	bic.w	r2, r2, #1
 800451e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	685a      	ldr	r2, [r3, #4]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800452c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	689a      	ldr	r2, [r3, #8]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800453c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	68db      	ldr	r3, [r3, #12]
 8004542:	2b01      	cmp	r3, #1
 8004544:	d107      	bne.n	8004556 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	689a      	ldr	r2, [r3, #8]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004552:	609a      	str	r2, [r3, #8]
 8004554:	e006      	b.n	8004564 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	689a      	ldr	r2, [r3, #8]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004562:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	68db      	ldr	r3, [r3, #12]
 8004568:	2b02      	cmp	r3, #2
 800456a:	d104      	bne.n	8004576 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004574:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	687a      	ldr	r2, [r7, #4]
 800457e:	6812      	ldr	r2, [r2, #0]
 8004580:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004584:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004588:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	68da      	ldr	r2, [r3, #12]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004598:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	691a      	ldr	r2, [r3, #16]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	695b      	ldr	r3, [r3, #20]
 80045a2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	699b      	ldr	r3, [r3, #24]
 80045aa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	430a      	orrs	r2, r1
 80045b2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	69d9      	ldr	r1, [r3, #28]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6a1a      	ldr	r2, [r3, #32]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	430a      	orrs	r2, r1
 80045c2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	681a      	ldr	r2, [r3, #0]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f042 0201 	orr.w	r2, r2, #1
 80045d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2200      	movs	r2, #0
 80045d8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2220      	movs	r2, #32
 80045de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2200      	movs	r2, #0
 80045e6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2200      	movs	r2, #0
 80045ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80045f0:	2300      	movs	r3, #0
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	3708      	adds	r7, #8
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}

080045fa <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80045fa:	b480      	push	{r7}
 80045fc:	b083      	sub	sp, #12
 80045fe:	af00      	add	r7, sp, #0
 8004600:	6078      	str	r0, [r7, #4]
 8004602:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800460a:	b2db      	uxtb	r3, r3
 800460c:	2b20      	cmp	r3, #32
 800460e:	d138      	bne.n	8004682 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004616:	2b01      	cmp	r3, #1
 8004618:	d101      	bne.n	800461e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800461a:	2302      	movs	r3, #2
 800461c:	e032      	b.n	8004684 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2201      	movs	r2, #1
 8004622:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2224      	movs	r2, #36	; 0x24
 800462a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	681a      	ldr	r2, [r3, #0]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f022 0201 	bic.w	r2, r2, #1
 800463c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	681a      	ldr	r2, [r3, #0]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800464c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	6819      	ldr	r1, [r3, #0]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	683a      	ldr	r2, [r7, #0]
 800465a:	430a      	orrs	r2, r1
 800465c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	681a      	ldr	r2, [r3, #0]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f042 0201 	orr.w	r2, r2, #1
 800466c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2220      	movs	r2, #32
 8004672:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2200      	movs	r2, #0
 800467a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800467e:	2300      	movs	r3, #0
 8004680:	e000      	b.n	8004684 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004682:	2302      	movs	r3, #2
  }
}
 8004684:	4618      	mov	r0, r3
 8004686:	370c      	adds	r7, #12
 8004688:	46bd      	mov	sp, r7
 800468a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468e:	4770      	bx	lr

08004690 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004690:	b480      	push	{r7}
 8004692:	b085      	sub	sp, #20
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
 8004698:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046a0:	b2db      	uxtb	r3, r3
 80046a2:	2b20      	cmp	r3, #32
 80046a4:	d139      	bne.n	800471a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80046ac:	2b01      	cmp	r3, #1
 80046ae:	d101      	bne.n	80046b4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80046b0:	2302      	movs	r3, #2
 80046b2:	e033      	b.n	800471c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2201      	movs	r2, #1
 80046b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2224      	movs	r2, #36	; 0x24
 80046c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	681a      	ldr	r2, [r3, #0]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f022 0201 	bic.w	r2, r2, #1
 80046d2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80046e2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	021b      	lsls	r3, r3, #8
 80046e8:	68fa      	ldr	r2, [r7, #12]
 80046ea:	4313      	orrs	r3, r2
 80046ec:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	68fa      	ldr	r2, [r7, #12]
 80046f4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f042 0201 	orr.w	r2, r2, #1
 8004704:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2220      	movs	r2, #32
 800470a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2200      	movs	r2, #0
 8004712:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004716:	2300      	movs	r3, #0
 8004718:	e000      	b.n	800471c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800471a:	2302      	movs	r3, #2
  }
}
 800471c:	4618      	mov	r0, r3
 800471e:	3714      	adds	r7, #20
 8004720:	46bd      	mov	sp, r7
 8004722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004726:	4770      	bx	lr

08004728 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004728:	b5f0      	push	{r4, r5, r6, r7, lr}
 800472a:	b08b      	sub	sp, #44	; 0x2c
 800472c:	af06      	add	r7, sp, #24
 800472e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d101      	bne.n	800473a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004736:	2301      	movs	r3, #1
 8004738:	e0d0      	b.n	80048dc <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8004740:	b2db      	uxtb	r3, r3
 8004742:	2b00      	cmp	r3, #0
 8004744:	d106      	bne.n	8004754 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2200      	movs	r2, #0
 800474a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f008 ff74 	bl	800d63c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2203      	movs	r2, #3
 8004758:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4618      	mov	r0, r3
 8004762:	f005 fa06 	bl	8009b72 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004766:	2300      	movs	r3, #0
 8004768:	73fb      	strb	r3, [r7, #15]
 800476a:	e04c      	b.n	8004806 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800476c:	7bfb      	ldrb	r3, [r7, #15]
 800476e:	6879      	ldr	r1, [r7, #4]
 8004770:	1c5a      	adds	r2, r3, #1
 8004772:	4613      	mov	r3, r2
 8004774:	009b      	lsls	r3, r3, #2
 8004776:	4413      	add	r3, r2
 8004778:	00db      	lsls	r3, r3, #3
 800477a:	440b      	add	r3, r1
 800477c:	3301      	adds	r3, #1
 800477e:	2201      	movs	r2, #1
 8004780:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004782:	7bfb      	ldrb	r3, [r7, #15]
 8004784:	6879      	ldr	r1, [r7, #4]
 8004786:	1c5a      	adds	r2, r3, #1
 8004788:	4613      	mov	r3, r2
 800478a:	009b      	lsls	r3, r3, #2
 800478c:	4413      	add	r3, r2
 800478e:	00db      	lsls	r3, r3, #3
 8004790:	440b      	add	r3, r1
 8004792:	7bfa      	ldrb	r2, [r7, #15]
 8004794:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004796:	7bfa      	ldrb	r2, [r7, #15]
 8004798:	7bfb      	ldrb	r3, [r7, #15]
 800479a:	b298      	uxth	r0, r3
 800479c:	6879      	ldr	r1, [r7, #4]
 800479e:	4613      	mov	r3, r2
 80047a0:	009b      	lsls	r3, r3, #2
 80047a2:	4413      	add	r3, r2
 80047a4:	00db      	lsls	r3, r3, #3
 80047a6:	440b      	add	r3, r1
 80047a8:	3336      	adds	r3, #54	; 0x36
 80047aa:	4602      	mov	r2, r0
 80047ac:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80047ae:	7bfb      	ldrb	r3, [r7, #15]
 80047b0:	6879      	ldr	r1, [r7, #4]
 80047b2:	1c5a      	adds	r2, r3, #1
 80047b4:	4613      	mov	r3, r2
 80047b6:	009b      	lsls	r3, r3, #2
 80047b8:	4413      	add	r3, r2
 80047ba:	00db      	lsls	r3, r3, #3
 80047bc:	440b      	add	r3, r1
 80047be:	3303      	adds	r3, #3
 80047c0:	2200      	movs	r2, #0
 80047c2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80047c4:	7bfa      	ldrb	r2, [r7, #15]
 80047c6:	6879      	ldr	r1, [r7, #4]
 80047c8:	4613      	mov	r3, r2
 80047ca:	009b      	lsls	r3, r3, #2
 80047cc:	4413      	add	r3, r2
 80047ce:	00db      	lsls	r3, r3, #3
 80047d0:	440b      	add	r3, r1
 80047d2:	3338      	adds	r3, #56	; 0x38
 80047d4:	2200      	movs	r2, #0
 80047d6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80047d8:	7bfa      	ldrb	r2, [r7, #15]
 80047da:	6879      	ldr	r1, [r7, #4]
 80047dc:	4613      	mov	r3, r2
 80047de:	009b      	lsls	r3, r3, #2
 80047e0:	4413      	add	r3, r2
 80047e2:	00db      	lsls	r3, r3, #3
 80047e4:	440b      	add	r3, r1
 80047e6:	333c      	adds	r3, #60	; 0x3c
 80047e8:	2200      	movs	r2, #0
 80047ea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80047ec:	7bfa      	ldrb	r2, [r7, #15]
 80047ee:	6879      	ldr	r1, [r7, #4]
 80047f0:	4613      	mov	r3, r2
 80047f2:	009b      	lsls	r3, r3, #2
 80047f4:	4413      	add	r3, r2
 80047f6:	00db      	lsls	r3, r3, #3
 80047f8:	440b      	add	r3, r1
 80047fa:	3340      	adds	r3, #64	; 0x40
 80047fc:	2200      	movs	r2, #0
 80047fe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004800:	7bfb      	ldrb	r3, [r7, #15]
 8004802:	3301      	adds	r3, #1
 8004804:	73fb      	strb	r3, [r7, #15]
 8004806:	7bfa      	ldrb	r2, [r7, #15]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	429a      	cmp	r2, r3
 800480e:	d3ad      	bcc.n	800476c <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004810:	2300      	movs	r3, #0
 8004812:	73fb      	strb	r3, [r7, #15]
 8004814:	e044      	b.n	80048a0 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004816:	7bfa      	ldrb	r2, [r7, #15]
 8004818:	6879      	ldr	r1, [r7, #4]
 800481a:	4613      	mov	r3, r2
 800481c:	009b      	lsls	r3, r3, #2
 800481e:	4413      	add	r3, r2
 8004820:	00db      	lsls	r3, r3, #3
 8004822:	440b      	add	r3, r1
 8004824:	f203 1369 	addw	r3, r3, #361	; 0x169
 8004828:	2200      	movs	r2, #0
 800482a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800482c:	7bfa      	ldrb	r2, [r7, #15]
 800482e:	6879      	ldr	r1, [r7, #4]
 8004830:	4613      	mov	r3, r2
 8004832:	009b      	lsls	r3, r3, #2
 8004834:	4413      	add	r3, r2
 8004836:	00db      	lsls	r3, r3, #3
 8004838:	440b      	add	r3, r1
 800483a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800483e:	7bfa      	ldrb	r2, [r7, #15]
 8004840:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004842:	7bfa      	ldrb	r2, [r7, #15]
 8004844:	6879      	ldr	r1, [r7, #4]
 8004846:	4613      	mov	r3, r2
 8004848:	009b      	lsls	r3, r3, #2
 800484a:	4413      	add	r3, r2
 800484c:	00db      	lsls	r3, r3, #3
 800484e:	440b      	add	r3, r1
 8004850:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8004854:	2200      	movs	r2, #0
 8004856:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004858:	7bfa      	ldrb	r2, [r7, #15]
 800485a:	6879      	ldr	r1, [r7, #4]
 800485c:	4613      	mov	r3, r2
 800485e:	009b      	lsls	r3, r3, #2
 8004860:	4413      	add	r3, r2
 8004862:	00db      	lsls	r3, r3, #3
 8004864:	440b      	add	r3, r1
 8004866:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800486a:	2200      	movs	r2, #0
 800486c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800486e:	7bfa      	ldrb	r2, [r7, #15]
 8004870:	6879      	ldr	r1, [r7, #4]
 8004872:	4613      	mov	r3, r2
 8004874:	009b      	lsls	r3, r3, #2
 8004876:	4413      	add	r3, r2
 8004878:	00db      	lsls	r3, r3, #3
 800487a:	440b      	add	r3, r1
 800487c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8004880:	2200      	movs	r2, #0
 8004882:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004884:	7bfa      	ldrb	r2, [r7, #15]
 8004886:	6879      	ldr	r1, [r7, #4]
 8004888:	4613      	mov	r3, r2
 800488a:	009b      	lsls	r3, r3, #2
 800488c:	4413      	add	r3, r2
 800488e:	00db      	lsls	r3, r3, #3
 8004890:	440b      	add	r3, r1
 8004892:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004896:	2200      	movs	r2, #0
 8004898:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800489a:	7bfb      	ldrb	r3, [r7, #15]
 800489c:	3301      	adds	r3, #1
 800489e:	73fb      	strb	r3, [r7, #15]
 80048a0:	7bfa      	ldrb	r2, [r7, #15]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	429a      	cmp	r2, r3
 80048a8:	d3b5      	bcc.n	8004816 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	603b      	str	r3, [r7, #0]
 80048b0:	687e      	ldr	r6, [r7, #4]
 80048b2:	466d      	mov	r5, sp
 80048b4:	f106 0410 	add.w	r4, r6, #16
 80048b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80048ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80048bc:	6823      	ldr	r3, [r4, #0]
 80048be:	602b      	str	r3, [r5, #0]
 80048c0:	1d33      	adds	r3, r6, #4
 80048c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80048c4:	6838      	ldr	r0, [r7, #0]
 80048c6:	f005 f96f 	bl	8009ba8 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2200      	movs	r2, #0
 80048ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2201      	movs	r2, #1
 80048d6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 80048da:	2300      	movs	r3, #0
}
 80048dc:	4618      	mov	r0, r3
 80048de:	3714      	adds	r7, #20
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080048e4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b082      	sub	sp, #8
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80048f2:	2b01      	cmp	r3, #1
 80048f4:	d101      	bne.n	80048fa <HAL_PCD_Start+0x16>
 80048f6:	2302      	movs	r3, #2
 80048f8:	e016      	b.n	8004928 <HAL_PCD_Start+0x44>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2201      	movs	r2, #1
 80048fe:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4618      	mov	r0, r3
 8004908:	f005 f91c 	bl	8009b44 <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800490c:	2101      	movs	r1, #1
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f009 f914 	bl	800db3c <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4618      	mov	r0, r3
 800491a:	f007 f8cd 	bl	800bab8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2200      	movs	r2, #0
 8004922:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004926:	2300      	movs	r3, #0
}
 8004928:	4618      	mov	r0, r3
 800492a:	3708      	adds	r7, #8
 800492c:	46bd      	mov	sp, r7
 800492e:	bd80      	pop	{r7, pc}

08004930 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b082      	sub	sp, #8
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4618      	mov	r0, r3
 800493e:	f007 f8c6 	bl	800bace <USB_ReadInterrupts>
 8004942:	4603      	mov	r3, r0
 8004944:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004948:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800494c:	d102      	bne.n	8004954 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	f000 faf6 	bl	8004f40 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4618      	mov	r0, r3
 800495a:	f007 f8b8 	bl	800bace <USB_ReadInterrupts>
 800495e:	4603      	mov	r3, r0
 8004960:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004964:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004968:	d112      	bne.n	8004990 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004972:	b29a      	uxth	r2, r3
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800497c:	b292      	uxth	r2, r2
 800497e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	f008 fedd 	bl	800d742 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8004988:	2100      	movs	r1, #0
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	f000 f8c7 	bl	8004b1e <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4618      	mov	r0, r3
 8004996:	f007 f89a 	bl	800bace <USB_ReadInterrupts>
 800499a:	4603      	mov	r3, r0
 800499c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80049a4:	d10b      	bne.n	80049be <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80049ae:	b29a      	uxth	r2, r3
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80049b8:	b292      	uxth	r2, r2
 80049ba:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4618      	mov	r0, r3
 80049c4:	f007 f883 	bl	800bace <USB_ReadInterrupts>
 80049c8:	4603      	mov	r3, r0
 80049ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80049ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049d2:	d10b      	bne.n	80049ec <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80049dc:	b29a      	uxth	r2, r3
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80049e6:	b292      	uxth	r2, r2
 80049e8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4618      	mov	r0, r3
 80049f2:	f007 f86c 	bl	800bace <USB_ReadInterrupts>
 80049f6:	4603      	mov	r3, r0
 80049f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80049fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a00:	d126      	bne.n	8004a50 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004a0a:	b29a      	uxth	r2, r3
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f022 0204 	bic.w	r2, r2, #4
 8004a14:	b292      	uxth	r2, r2
 8004a16:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004a22:	b29a      	uxth	r2, r3
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f022 0208 	bic.w	r2, r2, #8
 8004a2c:	b292      	uxth	r2, r2
 8004a2e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	f008 febe 	bl	800d7b4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004a40:	b29a      	uxth	r2, r3
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004a4a:	b292      	uxth	r2, r2
 8004a4c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4618      	mov	r0, r3
 8004a56:	f007 f83a 	bl	800bace <USB_ReadInterrupts>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a64:	d126      	bne.n	8004ab4 <HAL_PCD_IRQHandler+0x184>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004a6e:	b29a      	uxth	r2, r3
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f042 0208 	orr.w	r2, r2, #8
 8004a78:	b292      	uxth	r2, r2
 8004a7a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004a86:	b29a      	uxth	r2, r3
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a90:	b292      	uxth	r2, r2
 8004a92:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004a9e:	b29a      	uxth	r2, r3
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f042 0204 	orr.w	r2, r2, #4
 8004aa8:	b292      	uxth	r2, r2
 8004aaa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	f008 fe66 	bl	800d780 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4618      	mov	r0, r3
 8004aba:	f007 f808 	bl	800bace <USB_ReadInterrupts>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ac4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ac8:	d10e      	bne.n	8004ae8 <HAL_PCD_IRQHandler+0x1b8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004ad2:	b29a      	uxth	r2, r3
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004adc:	b292      	uxth	r2, r2
 8004ade:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f008 fe1f 	bl	800d726 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4618      	mov	r0, r3
 8004aee:	f006 ffee 	bl	800bace <USB_ReadInterrupts>
 8004af2:	4603      	mov	r3, r0
 8004af4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004af8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004afc:	d10b      	bne.n	8004b16 <HAL_PCD_IRQHandler+0x1e6>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004b06:	b29a      	uxth	r2, r3
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004b10:	b292      	uxth	r2, r2
 8004b12:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8004b16:	bf00      	nop
 8004b18:	3708      	adds	r7, #8
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}

08004b1e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004b1e:	b580      	push	{r7, lr}
 8004b20:	b082      	sub	sp, #8
 8004b22:	af00      	add	r7, sp, #0
 8004b24:	6078      	str	r0, [r7, #4]
 8004b26:	460b      	mov	r3, r1
 8004b28:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004b30:	2b01      	cmp	r3, #1
 8004b32:	d101      	bne.n	8004b38 <HAL_PCD_SetAddress+0x1a>
 8004b34:	2302      	movs	r3, #2
 8004b36:	e013      	b.n	8004b60 <HAL_PCD_SetAddress+0x42>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	78fa      	ldrb	r2, [r7, #3]
 8004b44:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	78fa      	ldrb	r2, [r7, #3]
 8004b4e:	4611      	mov	r1, r2
 8004b50:	4618      	mov	r0, r3
 8004b52:	f006 ff9d 	bl	800ba90 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004b5e:	2300      	movs	r3, #0
}
 8004b60:	4618      	mov	r0, r3
 8004b62:	3708      	adds	r7, #8
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bd80      	pop	{r7, pc}

08004b68 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b084      	sub	sp, #16
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
 8004b70:	4608      	mov	r0, r1
 8004b72:	4611      	mov	r1, r2
 8004b74:	461a      	mov	r2, r3
 8004b76:	4603      	mov	r3, r0
 8004b78:	70fb      	strb	r3, [r7, #3]
 8004b7a:	460b      	mov	r3, r1
 8004b7c:	803b      	strh	r3, [r7, #0]
 8004b7e:	4613      	mov	r3, r2
 8004b80:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004b82:	2300      	movs	r3, #0
 8004b84:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004b86:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	da0e      	bge.n	8004bac <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b8e:	78fb      	ldrb	r3, [r7, #3]
 8004b90:	f003 0307 	and.w	r3, r3, #7
 8004b94:	1c5a      	adds	r2, r3, #1
 8004b96:	4613      	mov	r3, r2
 8004b98:	009b      	lsls	r3, r3, #2
 8004b9a:	4413      	add	r3, r2
 8004b9c:	00db      	lsls	r3, r3, #3
 8004b9e:	687a      	ldr	r2, [r7, #4]
 8004ba0:	4413      	add	r3, r2
 8004ba2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	705a      	strb	r2, [r3, #1]
 8004baa:	e00e      	b.n	8004bca <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004bac:	78fb      	ldrb	r3, [r7, #3]
 8004bae:	f003 0207 	and.w	r2, r3, #7
 8004bb2:	4613      	mov	r3, r2
 8004bb4:	009b      	lsls	r3, r3, #2
 8004bb6:	4413      	add	r3, r2
 8004bb8:	00db      	lsls	r3, r3, #3
 8004bba:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004bbe:	687a      	ldr	r2, [r7, #4]
 8004bc0:	4413      	add	r3, r2
 8004bc2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004bca:	78fb      	ldrb	r3, [r7, #3]
 8004bcc:	f003 0307 	and.w	r3, r3, #7
 8004bd0:	b2da      	uxtb	r2, r3
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004bd6:	883a      	ldrh	r2, [r7, #0]
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	78ba      	ldrb	r2, [r7, #2]
 8004be0:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	785b      	ldrb	r3, [r3, #1]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d004      	beq.n	8004bf4 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	781b      	ldrb	r3, [r3, #0]
 8004bee:	b29a      	uxth	r2, r3
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004bf4:	78bb      	ldrb	r3, [r7, #2]
 8004bf6:	2b02      	cmp	r3, #2
 8004bf8:	d102      	bne.n	8004c00 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004c06:	2b01      	cmp	r3, #1
 8004c08:	d101      	bne.n	8004c0e <HAL_PCD_EP_Open+0xa6>
 8004c0a:	2302      	movs	r3, #2
 8004c0c:	e00e      	b.n	8004c2c <HAL_PCD_EP_Open+0xc4>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2201      	movs	r2, #1
 8004c12:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	68f9      	ldr	r1, [r7, #12]
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	f004 ffe5 	bl	8009bec <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2200      	movs	r2, #0
 8004c26:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8004c2a:	7afb      	ldrb	r3, [r7, #11]
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	3710      	adds	r7, #16
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd80      	pop	{r7, pc}

08004c34 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b084      	sub	sp, #16
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
 8004c3c:	460b      	mov	r3, r1
 8004c3e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004c40:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	da0e      	bge.n	8004c66 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004c48:	78fb      	ldrb	r3, [r7, #3]
 8004c4a:	f003 0307 	and.w	r3, r3, #7
 8004c4e:	1c5a      	adds	r2, r3, #1
 8004c50:	4613      	mov	r3, r2
 8004c52:	009b      	lsls	r3, r3, #2
 8004c54:	4413      	add	r3, r2
 8004c56:	00db      	lsls	r3, r3, #3
 8004c58:	687a      	ldr	r2, [r7, #4]
 8004c5a:	4413      	add	r3, r2
 8004c5c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	2201      	movs	r2, #1
 8004c62:	705a      	strb	r2, [r3, #1]
 8004c64:	e00e      	b.n	8004c84 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004c66:	78fb      	ldrb	r3, [r7, #3]
 8004c68:	f003 0207 	and.w	r2, r3, #7
 8004c6c:	4613      	mov	r3, r2
 8004c6e:	009b      	lsls	r3, r3, #2
 8004c70:	4413      	add	r3, r2
 8004c72:	00db      	lsls	r3, r3, #3
 8004c74:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004c78:	687a      	ldr	r2, [r7, #4]
 8004c7a:	4413      	add	r3, r2
 8004c7c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	2200      	movs	r2, #0
 8004c82:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004c84:	78fb      	ldrb	r3, [r7, #3]
 8004c86:	f003 0307 	and.w	r3, r3, #7
 8004c8a:	b2da      	uxtb	r2, r3
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004c96:	2b01      	cmp	r3, #1
 8004c98:	d101      	bne.n	8004c9e <HAL_PCD_EP_Close+0x6a>
 8004c9a:	2302      	movs	r3, #2
 8004c9c:	e00e      	b.n	8004cbc <HAL_PCD_EP_Close+0x88>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2201      	movs	r2, #1
 8004ca2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	68f9      	ldr	r1, [r7, #12]
 8004cac:	4618      	mov	r0, r3
 8004cae:	f005 fb31 	bl	800a314 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8004cba:	2300      	movs	r3, #0
}
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	3710      	adds	r7, #16
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bd80      	pop	{r7, pc}

08004cc4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b086      	sub	sp, #24
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	60f8      	str	r0, [r7, #12]
 8004ccc:	607a      	str	r2, [r7, #4]
 8004cce:	603b      	str	r3, [r7, #0]
 8004cd0:	460b      	mov	r3, r1
 8004cd2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004cd4:	7afb      	ldrb	r3, [r7, #11]
 8004cd6:	f003 0207 	and.w	r2, r3, #7
 8004cda:	4613      	mov	r3, r2
 8004cdc:	009b      	lsls	r3, r3, #2
 8004cde:	4413      	add	r3, r2
 8004ce0:	00db      	lsls	r3, r3, #3
 8004ce2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004ce6:	68fa      	ldr	r2, [r7, #12]
 8004ce8:	4413      	add	r3, r2
 8004cea:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	687a      	ldr	r2, [r7, #4]
 8004cf0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004cf2:	697b      	ldr	r3, [r7, #20]
 8004cf4:	683a      	ldr	r2, [r7, #0]
 8004cf6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8004cfe:	697b      	ldr	r3, [r7, #20]
 8004d00:	2200      	movs	r2, #0
 8004d02:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004d04:	7afb      	ldrb	r3, [r7, #11]
 8004d06:	f003 0307 	and.w	r3, r3, #7
 8004d0a:	b2da      	uxtb	r2, r3
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004d10:	7afb      	ldrb	r3, [r7, #11]
 8004d12:	f003 0307 	and.w	r3, r3, #7
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d106      	bne.n	8004d28 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	6979      	ldr	r1, [r7, #20]
 8004d20:	4618      	mov	r0, r3
 8004d22:	f005 fce4 	bl	800a6ee <USB_EPStartXfer>
 8004d26:	e005      	b.n	8004d34 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	6979      	ldr	r1, [r7, #20]
 8004d2e:	4618      	mov	r0, r3
 8004d30:	f005 fcdd 	bl	800a6ee <USB_EPStartXfer>
  }

  return HAL_OK;
 8004d34:	2300      	movs	r3, #0
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	3718      	adds	r7, #24
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}

08004d3e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004d3e:	b480      	push	{r7}
 8004d40:	b083      	sub	sp, #12
 8004d42:	af00      	add	r7, sp, #0
 8004d44:	6078      	str	r0, [r7, #4]
 8004d46:	460b      	mov	r3, r1
 8004d48:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004d4a:	78fb      	ldrb	r3, [r7, #3]
 8004d4c:	f003 0207 	and.w	r2, r3, #7
 8004d50:	6879      	ldr	r1, [r7, #4]
 8004d52:	4613      	mov	r3, r2
 8004d54:	009b      	lsls	r3, r3, #2
 8004d56:	4413      	add	r3, r2
 8004d58:	00db      	lsls	r3, r3, #3
 8004d5a:	440b      	add	r3, r1
 8004d5c:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8004d60:	681b      	ldr	r3, [r3, #0]
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	370c      	adds	r7, #12
 8004d66:	46bd      	mov	sp, r7
 8004d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6c:	4770      	bx	lr

08004d6e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004d6e:	b580      	push	{r7, lr}
 8004d70:	b086      	sub	sp, #24
 8004d72:	af00      	add	r7, sp, #0
 8004d74:	60f8      	str	r0, [r7, #12]
 8004d76:	607a      	str	r2, [r7, #4]
 8004d78:	603b      	str	r3, [r7, #0]
 8004d7a:	460b      	mov	r3, r1
 8004d7c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004d7e:	7afb      	ldrb	r3, [r7, #11]
 8004d80:	f003 0307 	and.w	r3, r3, #7
 8004d84:	1c5a      	adds	r2, r3, #1
 8004d86:	4613      	mov	r3, r2
 8004d88:	009b      	lsls	r3, r3, #2
 8004d8a:	4413      	add	r3, r2
 8004d8c:	00db      	lsls	r3, r3, #3
 8004d8e:	68fa      	ldr	r2, [r7, #12]
 8004d90:	4413      	add	r3, r2
 8004d92:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	687a      	ldr	r2, [r7, #4]
 8004d98:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	683a      	ldr	r2, [r7, #0]
 8004d9e:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	2201      	movs	r2, #1
 8004da4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	683a      	ldr	r2, [r7, #0]
 8004dac:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	2200      	movs	r2, #0
 8004db2:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	2201      	movs	r2, #1
 8004db8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004dba:	7afb      	ldrb	r3, [r7, #11]
 8004dbc:	f003 0307 	and.w	r3, r3, #7
 8004dc0:	b2da      	uxtb	r2, r3
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004dc6:	7afb      	ldrb	r3, [r7, #11]
 8004dc8:	f003 0307 	and.w	r3, r3, #7
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d106      	bne.n	8004dde <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	6979      	ldr	r1, [r7, #20]
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f005 fc89 	bl	800a6ee <USB_EPStartXfer>
 8004ddc:	e005      	b.n	8004dea <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	6979      	ldr	r1, [r7, #20]
 8004de4:	4618      	mov	r0, r3
 8004de6:	f005 fc82 	bl	800a6ee <USB_EPStartXfer>
  }

  return HAL_OK;
 8004dea:	2300      	movs	r3, #0
}
 8004dec:	4618      	mov	r0, r3
 8004dee:	3718      	adds	r7, #24
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bd80      	pop	{r7, pc}

08004df4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b084      	sub	sp, #16
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
 8004dfc:	460b      	mov	r3, r1
 8004dfe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004e00:	78fb      	ldrb	r3, [r7, #3]
 8004e02:	f003 0207 	and.w	r2, r3, #7
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	429a      	cmp	r2, r3
 8004e0c:	d901      	bls.n	8004e12 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	e03e      	b.n	8004e90 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004e12:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	da0e      	bge.n	8004e38 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004e1a:	78fb      	ldrb	r3, [r7, #3]
 8004e1c:	f003 0307 	and.w	r3, r3, #7
 8004e20:	1c5a      	adds	r2, r3, #1
 8004e22:	4613      	mov	r3, r2
 8004e24:	009b      	lsls	r3, r3, #2
 8004e26:	4413      	add	r3, r2
 8004e28:	00db      	lsls	r3, r3, #3
 8004e2a:	687a      	ldr	r2, [r7, #4]
 8004e2c:	4413      	add	r3, r2
 8004e2e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	2201      	movs	r2, #1
 8004e34:	705a      	strb	r2, [r3, #1]
 8004e36:	e00c      	b.n	8004e52 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004e38:	78fa      	ldrb	r2, [r7, #3]
 8004e3a:	4613      	mov	r3, r2
 8004e3c:	009b      	lsls	r3, r3, #2
 8004e3e:	4413      	add	r3, r2
 8004e40:	00db      	lsls	r3, r3, #3
 8004e42:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004e46:	687a      	ldr	r2, [r7, #4]
 8004e48:	4413      	add	r3, r2
 8004e4a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	2201      	movs	r2, #1
 8004e56:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004e58:	78fb      	ldrb	r3, [r7, #3]
 8004e5a:	f003 0307 	and.w	r3, r3, #7
 8004e5e:	b2da      	uxtb	r2, r3
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004e6a:	2b01      	cmp	r3, #1
 8004e6c:	d101      	bne.n	8004e72 <HAL_PCD_EP_SetStall+0x7e>
 8004e6e:	2302      	movs	r3, #2
 8004e70:	e00e      	b.n	8004e90 <HAL_PCD_EP_SetStall+0x9c>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2201      	movs	r2, #1
 8004e76:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	68f9      	ldr	r1, [r7, #12]
 8004e80:	4618      	mov	r0, r3
 8004e82:	f006 fd06 	bl	800b892 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004e8e:	2300      	movs	r3, #0
}
 8004e90:	4618      	mov	r0, r3
 8004e92:	3710      	adds	r7, #16
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bd80      	pop	{r7, pc}

08004e98 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b084      	sub	sp, #16
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
 8004ea0:	460b      	mov	r3, r1
 8004ea2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004ea4:	78fb      	ldrb	r3, [r7, #3]
 8004ea6:	f003 020f 	and.w	r2, r3, #15
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	429a      	cmp	r2, r3
 8004eb0:	d901      	bls.n	8004eb6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	e040      	b.n	8004f38 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004eb6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	da0e      	bge.n	8004edc <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004ebe:	78fb      	ldrb	r3, [r7, #3]
 8004ec0:	f003 0307 	and.w	r3, r3, #7
 8004ec4:	1c5a      	adds	r2, r3, #1
 8004ec6:	4613      	mov	r3, r2
 8004ec8:	009b      	lsls	r3, r3, #2
 8004eca:	4413      	add	r3, r2
 8004ecc:	00db      	lsls	r3, r3, #3
 8004ece:	687a      	ldr	r2, [r7, #4]
 8004ed0:	4413      	add	r3, r2
 8004ed2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	705a      	strb	r2, [r3, #1]
 8004eda:	e00e      	b.n	8004efa <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004edc:	78fb      	ldrb	r3, [r7, #3]
 8004ede:	f003 0207 	and.w	r2, r3, #7
 8004ee2:	4613      	mov	r3, r2
 8004ee4:	009b      	lsls	r3, r3, #2
 8004ee6:	4413      	add	r3, r2
 8004ee8:	00db      	lsls	r3, r3, #3
 8004eea:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004eee:	687a      	ldr	r2, [r7, #4]
 8004ef0:	4413      	add	r3, r2
 8004ef2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	2200      	movs	r2, #0
 8004efe:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004f00:	78fb      	ldrb	r3, [r7, #3]
 8004f02:	f003 0307 	and.w	r3, r3, #7
 8004f06:	b2da      	uxtb	r2, r3
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004f12:	2b01      	cmp	r3, #1
 8004f14:	d101      	bne.n	8004f1a <HAL_PCD_EP_ClrStall+0x82>
 8004f16:	2302      	movs	r3, #2
 8004f18:	e00e      	b.n	8004f38 <HAL_PCD_EP_ClrStall+0xa0>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2201      	movs	r2, #1
 8004f1e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	68f9      	ldr	r1, [r7, #12]
 8004f28:	4618      	mov	r0, r3
 8004f2a:	f006 fd03 	bl	800b934 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2200      	movs	r2, #0
 8004f32:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004f36:	2300      	movs	r3, #0
}
 8004f38:	4618      	mov	r0, r3
 8004f3a:	3710      	adds	r7, #16
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}

08004f40 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b096      	sub	sp, #88	; 0x58
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004f48:	e39b      	b.n	8005682 <PCD_EP_ISR_Handler+0x742>
  {
    wIstr = hpcd->Instance->ISTR;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004f52:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8004f56:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004f5a:	b2db      	uxtb	r3, r3
 8004f5c:	f003 030f 	and.w	r3, r3, #15
 8004f60:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 8004f64:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	f040 815e 	bne.w	800522a <PCD_EP_ISR_Handler+0x2ea>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8004f6e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004f72:	f003 0310 	and.w	r3, r3, #16
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d150      	bne.n	800501c <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	881b      	ldrh	r3, [r3, #0]
 8004f80:	b29b      	uxth	r3, r3
 8004f82:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004f86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f8a:	81fb      	strh	r3, [r7, #14]
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681a      	ldr	r2, [r3, #0]
 8004f90:	89fb      	ldrh	r3, [r7, #14]
 8004f92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f9a:	b29b      	uxth	r3, r3
 8004f9c:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	3328      	adds	r3, #40	; 0x28
 8004fa2:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004fac:	b29b      	uxth	r3, r3
 8004fae:	461a      	mov	r2, r3
 8004fb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fb2:	781b      	ldrb	r3, [r3, #0]
 8004fb4:	00db      	lsls	r3, r3, #3
 8004fb6:	4413      	add	r3, r2
 8004fb8:	687a      	ldr	r2, [r7, #4]
 8004fba:	6812      	ldr	r2, [r2, #0]
 8004fbc:	4413      	add	r3, r2
 8004fbe:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004fc2:	881b      	ldrh	r3, [r3, #0]
 8004fc4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004fc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fca:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8004fcc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fce:	695a      	ldr	r2, [r3, #20]
 8004fd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fd2:	69db      	ldr	r3, [r3, #28]
 8004fd4:	441a      	add	r2, r3
 8004fd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fd8:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8004fda:	2100      	movs	r1, #0
 8004fdc:	6878      	ldr	r0, [r7, #4]
 8004fde:	f008 fb88 	bl	800d6f2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004fe8:	b2db      	uxtb	r3, r3
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	f000 8349 	beq.w	8005682 <PCD_EP_ISR_Handler+0x742>
 8004ff0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ff2:	699b      	ldr	r3, [r3, #24]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	f040 8344 	bne.w	8005682 <PCD_EP_ISR_Handler+0x742>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005000:	b2db      	uxtb	r3, r3
 8005002:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005006:	b2da      	uxtb	r2, r3
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	b292      	uxth	r2, r2
 800500e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2200      	movs	r2, #0
 8005016:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800501a:	e332      	b.n	8005682 <PCD_EP_ISR_Handler+0x742>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005022:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	881b      	ldrh	r3, [r3, #0]
 800502a:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800502e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8005032:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005036:	2b00      	cmp	r3, #0
 8005038:	d032      	beq.n	80050a0 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005042:	b29b      	uxth	r3, r3
 8005044:	461a      	mov	r2, r3
 8005046:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005048:	781b      	ldrb	r3, [r3, #0]
 800504a:	00db      	lsls	r3, r3, #3
 800504c:	4413      	add	r3, r2
 800504e:	687a      	ldr	r2, [r7, #4]
 8005050:	6812      	ldr	r2, [r2, #0]
 8005052:	4413      	add	r3, r2
 8005054:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005058:	881b      	ldrh	r3, [r3, #0]
 800505a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800505e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005060:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6818      	ldr	r0, [r3, #0]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800506c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800506e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8005070:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005072:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005074:	b29b      	uxth	r3, r3
 8005076:	f006 fd7c 	bl	800bb72 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	881b      	ldrh	r3, [r3, #0]
 8005080:	b29a      	uxth	r2, r3
 8005082:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005086:	4013      	ands	r3, r2
 8005088:	823b      	strh	r3, [r7, #16]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	8a3a      	ldrh	r2, [r7, #16]
 8005090:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005094:	b292      	uxth	r2, r2
 8005096:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8005098:	6878      	ldr	r0, [r7, #4]
 800509a:	f008 fafd 	bl	800d698 <HAL_PCD_SetupStageCallback>
 800509e:	e2f0      	b.n	8005682 <PCD_EP_ISR_Handler+0x742>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80050a0:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	f280 82ec 	bge.w	8005682 <PCD_EP_ISR_Handler+0x742>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	881b      	ldrh	r3, [r3, #0]
 80050b0:	b29a      	uxth	r2, r3
 80050b2:	f640 738f 	movw	r3, #3983	; 0xf8f
 80050b6:	4013      	ands	r3, r2
 80050b8:	83fb      	strh	r3, [r7, #30]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	8bfa      	ldrh	r2, [r7, #30]
 80050c0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80050c4:	b292      	uxth	r2, r2
 80050c6:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050d0:	b29b      	uxth	r3, r3
 80050d2:	461a      	mov	r2, r3
 80050d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050d6:	781b      	ldrb	r3, [r3, #0]
 80050d8:	00db      	lsls	r3, r3, #3
 80050da:	4413      	add	r3, r2
 80050dc:	687a      	ldr	r2, [r7, #4]
 80050de:	6812      	ldr	r2, [r2, #0]
 80050e0:	4413      	add	r3, r2
 80050e2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80050e6:	881b      	ldrh	r3, [r3, #0]
 80050e8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80050ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050ee:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80050f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050f2:	69db      	ldr	r3, [r3, #28]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d019      	beq.n	800512c <PCD_EP_ISR_Handler+0x1ec>
 80050f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050fa:	695b      	ldr	r3, [r3, #20]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d015      	beq.n	800512c <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6818      	ldr	r0, [r3, #0]
 8005104:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005106:	6959      	ldr	r1, [r3, #20]
 8005108:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800510a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800510c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800510e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005110:	b29b      	uxth	r3, r3
 8005112:	f006 fd2e 	bl	800bb72 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8005116:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005118:	695a      	ldr	r2, [r3, #20]
 800511a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800511c:	69db      	ldr	r3, [r3, #28]
 800511e:	441a      	add	r2, r3
 8005120:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005122:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8005124:	2100      	movs	r1, #0
 8005126:	6878      	ldr	r0, [r7, #4]
 8005128:	f008 fac8 	bl	800d6bc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	881b      	ldrh	r3, [r3, #0]
 8005132:	b29b      	uxth	r3, r3
 8005134:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005138:	2b00      	cmp	r3, #0
 800513a:	f040 82a2 	bne.w	8005682 <PCD_EP_ISR_Handler+0x742>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	61bb      	str	r3, [r7, #24]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800514c:	b29b      	uxth	r3, r3
 800514e:	461a      	mov	r2, r3
 8005150:	69bb      	ldr	r3, [r7, #24]
 8005152:	4413      	add	r3, r2
 8005154:	61bb      	str	r3, [r7, #24]
 8005156:	69bb      	ldr	r3, [r7, #24]
 8005158:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800515c:	617b      	str	r3, [r7, #20]
 800515e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005160:	691b      	ldr	r3, [r3, #16]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d112      	bne.n	800518c <PCD_EP_ISR_Handler+0x24c>
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	881b      	ldrh	r3, [r3, #0]
 800516a:	b29b      	uxth	r3, r3
 800516c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005170:	b29a      	uxth	r2, r3
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	801a      	strh	r2, [r3, #0]
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	881b      	ldrh	r3, [r3, #0]
 800517a:	b29b      	uxth	r3, r3
 800517c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005180:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005184:	b29a      	uxth	r2, r3
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	801a      	strh	r2, [r3, #0]
 800518a:	e02f      	b.n	80051ec <PCD_EP_ISR_Handler+0x2ac>
 800518c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800518e:	691b      	ldr	r3, [r3, #16]
 8005190:	2b3e      	cmp	r3, #62	; 0x3e
 8005192:	d813      	bhi.n	80051bc <PCD_EP_ISR_Handler+0x27c>
 8005194:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005196:	691b      	ldr	r3, [r3, #16]
 8005198:	085b      	lsrs	r3, r3, #1
 800519a:	647b      	str	r3, [r7, #68]	; 0x44
 800519c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800519e:	691b      	ldr	r3, [r3, #16]
 80051a0:	f003 0301 	and.w	r3, r3, #1
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d002      	beq.n	80051ae <PCD_EP_ISR_Handler+0x26e>
 80051a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051aa:	3301      	adds	r3, #1
 80051ac:	647b      	str	r3, [r7, #68]	; 0x44
 80051ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051b0:	b29b      	uxth	r3, r3
 80051b2:	029b      	lsls	r3, r3, #10
 80051b4:	b29a      	uxth	r2, r3
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	801a      	strh	r2, [r3, #0]
 80051ba:	e017      	b.n	80051ec <PCD_EP_ISR_Handler+0x2ac>
 80051bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051be:	691b      	ldr	r3, [r3, #16]
 80051c0:	095b      	lsrs	r3, r3, #5
 80051c2:	647b      	str	r3, [r7, #68]	; 0x44
 80051c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051c6:	691b      	ldr	r3, [r3, #16]
 80051c8:	f003 031f 	and.w	r3, r3, #31
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d102      	bne.n	80051d6 <PCD_EP_ISR_Handler+0x296>
 80051d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051d2:	3b01      	subs	r3, #1
 80051d4:	647b      	str	r3, [r7, #68]	; 0x44
 80051d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051d8:	b29b      	uxth	r3, r3
 80051da:	029b      	lsls	r3, r3, #10
 80051dc:	b29b      	uxth	r3, r3
 80051de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051e6:	b29a      	uxth	r2, r3
 80051e8:	697b      	ldr	r3, [r7, #20]
 80051ea:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	881b      	ldrh	r3, [r3, #0]
 80051f2:	b29b      	uxth	r3, r3
 80051f4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80051f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051fc:	827b      	strh	r3, [r7, #18]
 80051fe:	8a7b      	ldrh	r3, [r7, #18]
 8005200:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005204:	827b      	strh	r3, [r7, #18]
 8005206:	8a7b      	ldrh	r3, [r7, #18]
 8005208:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800520c:	827b      	strh	r3, [r7, #18]
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681a      	ldr	r2, [r3, #0]
 8005212:	8a7b      	ldrh	r3, [r7, #18]
 8005214:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005218:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800521c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005220:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005224:	b29b      	uxth	r3, r3
 8005226:	8013      	strh	r3, [r2, #0]
 8005228:	e22b      	b.n	8005682 <PCD_EP_ISR_Handler+0x742>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	461a      	mov	r2, r3
 8005230:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8005234:	009b      	lsls	r3, r3, #2
 8005236:	4413      	add	r3, r2
 8005238:	881b      	ldrh	r3, [r3, #0]
 800523a:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800523e:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8005242:	2b00      	cmp	r3, #0
 8005244:	f280 80f6 	bge.w	8005434 <PCD_EP_ISR_Handler+0x4f4>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	461a      	mov	r2, r3
 800524e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8005252:	009b      	lsls	r3, r3, #2
 8005254:	4413      	add	r3, r2
 8005256:	881b      	ldrh	r3, [r3, #0]
 8005258:	b29a      	uxth	r2, r3
 800525a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800525e:	4013      	ands	r3, r2
 8005260:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	461a      	mov	r2, r3
 800526a:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800526e:	009b      	lsls	r3, r3, #2
 8005270:	4413      	add	r3, r2
 8005272:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8005276:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800527a:	b292      	uxth	r2, r2
 800527c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800527e:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8005282:	4613      	mov	r3, r2
 8005284:	009b      	lsls	r3, r3, #2
 8005286:	4413      	add	r3, r2
 8005288:	00db      	lsls	r3, r3, #3
 800528a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800528e:	687a      	ldr	r2, [r7, #4]
 8005290:	4413      	add	r3, r2
 8005292:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8005294:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005296:	7b1b      	ldrb	r3, [r3, #12]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d123      	bne.n	80052e4 <PCD_EP_ISR_Handler+0x3a4>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052a4:	b29b      	uxth	r3, r3
 80052a6:	461a      	mov	r2, r3
 80052a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052aa:	781b      	ldrb	r3, [r3, #0]
 80052ac:	00db      	lsls	r3, r3, #3
 80052ae:	4413      	add	r3, r2
 80052b0:	687a      	ldr	r2, [r7, #4]
 80052b2:	6812      	ldr	r2, [r2, #0]
 80052b4:	4413      	add	r3, r2
 80052b6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80052ba:	881b      	ldrh	r3, [r3, #0]
 80052bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80052c0:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 80052c4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	f000 808e 	beq.w	80053ea <PCD_EP_ISR_Handler+0x4aa>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6818      	ldr	r0, [r3, #0]
 80052d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052d4:	6959      	ldr	r1, [r3, #20]
 80052d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052d8:	88da      	ldrh	r2, [r3, #6]
 80052da:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80052de:	f006 fc48 	bl	800bb72 <USB_ReadPMA>
 80052e2:	e082      	b.n	80053ea <PCD_EP_ISR_Handler+0x4aa>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80052e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052e6:	78db      	ldrb	r3, [r3, #3]
 80052e8:	2b02      	cmp	r3, #2
 80052ea:	d10a      	bne.n	8005302 <PCD_EP_ISR_Handler+0x3c2>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80052ec:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80052f0:	461a      	mov	r2, r3
 80052f2:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80052f4:	6878      	ldr	r0, [r7, #4]
 80052f6:	f000 f9d2 	bl	800569e <HAL_PCD_EP_DB_Receive>
 80052fa:	4603      	mov	r3, r0
 80052fc:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005300:	e073      	b.n	80053ea <PCD_EP_ISR_Handler+0x4aa>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	461a      	mov	r2, r3
 8005308:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800530a:	781b      	ldrb	r3, [r3, #0]
 800530c:	009b      	lsls	r3, r3, #2
 800530e:	4413      	add	r3, r2
 8005310:	881b      	ldrh	r3, [r3, #0]
 8005312:	b29b      	uxth	r3, r3
 8005314:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005318:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800531c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	461a      	mov	r2, r3
 8005326:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005328:	781b      	ldrb	r3, [r3, #0]
 800532a:	009b      	lsls	r3, r3, #2
 800532c:	441a      	add	r2, r3
 800532e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005332:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005336:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800533a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800533e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005342:	b29b      	uxth	r3, r3
 8005344:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	461a      	mov	r2, r3
 800534c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800534e:	781b      	ldrb	r3, [r3, #0]
 8005350:	009b      	lsls	r3, r3, #2
 8005352:	4413      	add	r3, r2
 8005354:	881b      	ldrh	r3, [r3, #0]
 8005356:	b29b      	uxth	r3, r3
 8005358:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800535c:	2b00      	cmp	r3, #0
 800535e:	d022      	beq.n	80053a6 <PCD_EP_ISR_Handler+0x466>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005368:	b29b      	uxth	r3, r3
 800536a:	461a      	mov	r2, r3
 800536c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800536e:	781b      	ldrb	r3, [r3, #0]
 8005370:	00db      	lsls	r3, r3, #3
 8005372:	4413      	add	r3, r2
 8005374:	687a      	ldr	r2, [r7, #4]
 8005376:	6812      	ldr	r2, [r2, #0]
 8005378:	4413      	add	r3, r2
 800537a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800537e:	881b      	ldrh	r3, [r3, #0]
 8005380:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005384:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8005388:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800538c:	2b00      	cmp	r3, #0
 800538e:	d02c      	beq.n	80053ea <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6818      	ldr	r0, [r3, #0]
 8005394:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005396:	6959      	ldr	r1, [r3, #20]
 8005398:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800539a:	891a      	ldrh	r2, [r3, #8]
 800539c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80053a0:	f006 fbe7 	bl	800bb72 <USB_ReadPMA>
 80053a4:	e021      	b.n	80053ea <PCD_EP_ISR_Handler+0x4aa>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053ae:	b29b      	uxth	r3, r3
 80053b0:	461a      	mov	r2, r3
 80053b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053b4:	781b      	ldrb	r3, [r3, #0]
 80053b6:	00db      	lsls	r3, r3, #3
 80053b8:	4413      	add	r3, r2
 80053ba:	687a      	ldr	r2, [r7, #4]
 80053bc:	6812      	ldr	r2, [r2, #0]
 80053be:	4413      	add	r3, r2
 80053c0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80053c4:	881b      	ldrh	r3, [r3, #0]
 80053c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80053ca:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 80053ce:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d009      	beq.n	80053ea <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6818      	ldr	r0, [r3, #0]
 80053da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053dc:	6959      	ldr	r1, [r3, #20]
 80053de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053e0:	895a      	ldrh	r2, [r3, #10]
 80053e2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80053e6:	f006 fbc4 	bl	800bb72 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80053ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053ec:	69da      	ldr	r2, [r3, #28]
 80053ee:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80053f2:	441a      	add	r2, r3
 80053f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053f6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80053f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053fa:	695a      	ldr	r2, [r3, #20]
 80053fc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005400:	441a      	add	r2, r3
 8005402:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005404:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8005406:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005408:	699b      	ldr	r3, [r3, #24]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d005      	beq.n	800541a <PCD_EP_ISR_Handler+0x4da>
 800540e:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8005412:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005414:	691b      	ldr	r3, [r3, #16]
 8005416:	429a      	cmp	r2, r3
 8005418:	d206      	bcs.n	8005428 <PCD_EP_ISR_Handler+0x4e8>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800541a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800541c:	781b      	ldrb	r3, [r3, #0]
 800541e:	4619      	mov	r1, r3
 8005420:	6878      	ldr	r0, [r7, #4]
 8005422:	f008 f94b 	bl	800d6bc <HAL_PCD_DataOutStageCallback>
 8005426:	e005      	b.n	8005434 <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800542e:	4618      	mov	r0, r3
 8005430:	f005 f95d 	bl	800a6ee <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8005434:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8005438:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800543c:	2b00      	cmp	r3, #0
 800543e:	f000 8120 	beq.w	8005682 <PCD_EP_ISR_Handler+0x742>
      {
        ep = &hpcd->IN_ep[epindex];
 8005442:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8005446:	1c5a      	adds	r2, r3, #1
 8005448:	4613      	mov	r3, r2
 800544a:	009b      	lsls	r3, r3, #2
 800544c:	4413      	add	r3, r2
 800544e:	00db      	lsls	r3, r3, #3
 8005450:	687a      	ldr	r2, [r7, #4]
 8005452:	4413      	add	r3, r2
 8005454:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	461a      	mov	r2, r3
 800545c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8005460:	009b      	lsls	r3, r3, #2
 8005462:	4413      	add	r3, r2
 8005464:	881b      	ldrh	r3, [r3, #0]
 8005466:	b29b      	uxth	r3, r3
 8005468:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800546c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005470:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	461a      	mov	r2, r3
 800547a:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800547e:	009b      	lsls	r3, r3, #2
 8005480:	441a      	add	r2, r3
 8005482:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005486:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800548a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800548e:	b29b      	uxth	r3, r3
 8005490:	8013      	strh	r3, [r2, #0]

        if (ep->type != EP_TYPE_BULK)
 8005492:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005494:	78db      	ldrb	r3, [r3, #3]
 8005496:	2b02      	cmp	r3, #2
 8005498:	f000 809d 	beq.w	80055d6 <PCD_EP_ISR_Handler+0x696>
        {
          ep->xfer_len = 0U;
 800549c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800549e:	2200      	movs	r2, #0
 80054a0:	619a      	str	r2, [r3, #24]

          if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80054a2:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80054a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d046      	beq.n	800553c <PCD_EP_ISR_Handler+0x5fc>
          {
            PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80054ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054b0:	785b      	ldrb	r3, [r3, #1]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d126      	bne.n	8005504 <PCD_EP_ISR_Handler+0x5c4>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	627b      	str	r3, [r7, #36]	; 0x24
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054c4:	b29b      	uxth	r3, r3
 80054c6:	461a      	mov	r2, r3
 80054c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ca:	4413      	add	r3, r2
 80054cc:	627b      	str	r3, [r7, #36]	; 0x24
 80054ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054d0:	781b      	ldrb	r3, [r3, #0]
 80054d2:	00da      	lsls	r2, r3, #3
 80054d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d6:	4413      	add	r3, r2
 80054d8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80054dc:	623b      	str	r3, [r7, #32]
 80054de:	6a3b      	ldr	r3, [r7, #32]
 80054e0:	881b      	ldrh	r3, [r3, #0]
 80054e2:	b29b      	uxth	r3, r3
 80054e4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80054e8:	b29a      	uxth	r2, r3
 80054ea:	6a3b      	ldr	r3, [r7, #32]
 80054ec:	801a      	strh	r2, [r3, #0]
 80054ee:	6a3b      	ldr	r3, [r7, #32]
 80054f0:	881b      	ldrh	r3, [r3, #0]
 80054f2:	b29b      	uxth	r3, r3
 80054f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054fc:	b29a      	uxth	r2, r3
 80054fe:	6a3b      	ldr	r3, [r7, #32]
 8005500:	801a      	strh	r2, [r3, #0]
 8005502:	e061      	b.n	80055c8 <PCD_EP_ISR_Handler+0x688>
 8005504:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005506:	785b      	ldrb	r3, [r3, #1]
 8005508:	2b01      	cmp	r3, #1
 800550a:	d15d      	bne.n	80055c8 <PCD_EP_ISR_Handler+0x688>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800551a:	b29b      	uxth	r3, r3
 800551c:	461a      	mov	r2, r3
 800551e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005520:	4413      	add	r3, r2
 8005522:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005524:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005526:	781b      	ldrb	r3, [r3, #0]
 8005528:	00da      	lsls	r2, r3, #3
 800552a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800552c:	4413      	add	r3, r2
 800552e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005532:	62bb      	str	r3, [r7, #40]	; 0x28
 8005534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005536:	2200      	movs	r2, #0
 8005538:	801a      	strh	r2, [r3, #0]
 800553a:	e045      	b.n	80055c8 <PCD_EP_ISR_Handler+0x688>
          }
          else
          {
            PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005542:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005544:	785b      	ldrb	r3, [r3, #1]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d126      	bne.n	8005598 <PCD_EP_ISR_Handler+0x658>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	637b      	str	r3, [r7, #52]	; 0x34
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005558:	b29b      	uxth	r3, r3
 800555a:	461a      	mov	r2, r3
 800555c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800555e:	4413      	add	r3, r2
 8005560:	637b      	str	r3, [r7, #52]	; 0x34
 8005562:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005564:	781b      	ldrb	r3, [r3, #0]
 8005566:	00da      	lsls	r2, r3, #3
 8005568:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800556a:	4413      	add	r3, r2
 800556c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005570:	633b      	str	r3, [r7, #48]	; 0x30
 8005572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005574:	881b      	ldrh	r3, [r3, #0]
 8005576:	b29b      	uxth	r3, r3
 8005578:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800557c:	b29a      	uxth	r2, r3
 800557e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005580:	801a      	strh	r2, [r3, #0]
 8005582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005584:	881b      	ldrh	r3, [r3, #0]
 8005586:	b29b      	uxth	r3, r3
 8005588:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800558c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005590:	b29a      	uxth	r2, r3
 8005592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005594:	801a      	strh	r2, [r3, #0]
 8005596:	e017      	b.n	80055c8 <PCD_EP_ISR_Handler+0x688>
 8005598:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800559a:	785b      	ldrb	r3, [r3, #1]
 800559c:	2b01      	cmp	r3, #1
 800559e:	d113      	bne.n	80055c8 <PCD_EP_ISR_Handler+0x688>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055a8:	b29b      	uxth	r3, r3
 80055aa:	461a      	mov	r2, r3
 80055ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055ae:	4413      	add	r3, r2
 80055b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80055b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055b4:	781b      	ldrb	r3, [r3, #0]
 80055b6:	00da      	lsls	r2, r3, #3
 80055b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055ba:	4413      	add	r3, r2
 80055bc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80055c0:	63bb      	str	r3, [r7, #56]	; 0x38
 80055c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055c4:	2200      	movs	r2, #0
 80055c6:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80055c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055ca:	781b      	ldrb	r3, [r3, #0]
 80055cc:	4619      	mov	r1, r3
 80055ce:	6878      	ldr	r0, [r7, #4]
 80055d0:	f008 f88f 	bl	800d6f2 <HAL_PCD_DataInStageCallback>
 80055d4:	e055      	b.n	8005682 <PCD_EP_ISR_Handler+0x742>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        /* Manage Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U))
 80055d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055d8:	78db      	ldrb	r3, [r3, #3]
 80055da:	2b02      	cmp	r3, #2
 80055dc:	d14a      	bne.n	8005674 <PCD_EP_ISR_Handler+0x734>
 80055de:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80055e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d144      	bne.n	8005674 <PCD_EP_ISR_Handler+0x734>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055f2:	b29b      	uxth	r3, r3
 80055f4:	461a      	mov	r2, r3
 80055f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055f8:	781b      	ldrb	r3, [r3, #0]
 80055fa:	00db      	lsls	r3, r3, #3
 80055fc:	4413      	add	r3, r2
 80055fe:	687a      	ldr	r2, [r7, #4]
 8005600:	6812      	ldr	r2, [r2, #0]
 8005602:	4413      	add	r3, r2
 8005604:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005608:	881b      	ldrh	r3, [r3, #0]
 800560a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800560e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

          if (ep->xfer_len > TxByteNbre)
 8005612:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005614:	699a      	ldr	r2, [r3, #24]
 8005616:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800561a:	429a      	cmp	r2, r3
 800561c:	d907      	bls.n	800562e <PCD_EP_ISR_Handler+0x6ee>
          {
            ep->xfer_len -= TxByteNbre;
 800561e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005620:	699a      	ldr	r2, [r3, #24]
 8005622:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005626:	1ad2      	subs	r2, r2, r3
 8005628:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800562a:	619a      	str	r2, [r3, #24]
 800562c:	e002      	b.n	8005634 <PCD_EP_ISR_Handler+0x6f4>
          }
          else
          {
            ep->xfer_len = 0U;
 800562e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005630:	2200      	movs	r2, #0
 8005632:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8005634:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005636:	699b      	ldr	r3, [r3, #24]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d106      	bne.n	800564a <PCD_EP_ISR_Handler+0x70a>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800563c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800563e:	781b      	ldrb	r3, [r3, #0]
 8005640:	4619      	mov	r1, r3
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f008 f855 	bl	800d6f2 <HAL_PCD_DataInStageCallback>
 8005648:	e01b      	b.n	8005682 <PCD_EP_ISR_Handler+0x742>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 800564a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800564c:	695a      	ldr	r2, [r3, #20]
 800564e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005652:	441a      	add	r2, r3
 8005654:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005656:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8005658:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800565a:	69da      	ldr	r2, [r3, #28]
 800565c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005660:	441a      	add	r2, r3
 8005662:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005664:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800566c:	4618      	mov	r0, r3
 800566e:	f005 f83e 	bl	800a6ee <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8005672:	e006      	b.n	8005682 <PCD_EP_ISR_Handler+0x742>
          }
        }
        /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8005674:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8005678:	461a      	mov	r2, r3
 800567a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800567c:	6878      	ldr	r0, [r7, #4]
 800567e:	f000 f917 	bl	80058b0 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800568a:	b29b      	uxth	r3, r3
 800568c:	b21b      	sxth	r3, r3
 800568e:	2b00      	cmp	r3, #0
 8005690:	f6ff ac5b 	blt.w	8004f4a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8005694:	2300      	movs	r3, #0
}
 8005696:	4618      	mov	r0, r3
 8005698:	3758      	adds	r7, #88	; 0x58
 800569a:	46bd      	mov	sp, r7
 800569c:	bd80      	pop	{r7, pc}

0800569e <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800569e:	b580      	push	{r7, lr}
 80056a0:	b088      	sub	sp, #32
 80056a2:	af00      	add	r7, sp, #0
 80056a4:	60f8      	str	r0, [r7, #12]
 80056a6:	60b9      	str	r1, [r7, #8]
 80056a8:	4613      	mov	r3, r2
 80056aa:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80056ac:	88fb      	ldrh	r3, [r7, #6]
 80056ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d07c      	beq.n	80057b0 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056be:	b29b      	uxth	r3, r3
 80056c0:	461a      	mov	r2, r3
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	781b      	ldrb	r3, [r3, #0]
 80056c6:	00db      	lsls	r3, r3, #3
 80056c8:	4413      	add	r3, r2
 80056ca:	68fa      	ldr	r2, [r7, #12]
 80056cc:	6812      	ldr	r2, [r2, #0]
 80056ce:	4413      	add	r3, r2
 80056d0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80056d4:	881b      	ldrh	r3, [r3, #0]
 80056d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80056da:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	699a      	ldr	r2, [r3, #24]
 80056e0:	8b7b      	ldrh	r3, [r7, #26]
 80056e2:	429a      	cmp	r2, r3
 80056e4:	d306      	bcc.n	80056f4 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	699a      	ldr	r2, [r3, #24]
 80056ea:	8b7b      	ldrh	r3, [r7, #26]
 80056ec:	1ad2      	subs	r2, r2, r3
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	619a      	str	r2, [r3, #24]
 80056f2:	e002      	b.n	80056fa <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	2200      	movs	r2, #0
 80056f8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	699b      	ldr	r3, [r3, #24]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d123      	bne.n	800574a <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	461a      	mov	r2, r3
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	781b      	ldrb	r3, [r3, #0]
 800570c:	009b      	lsls	r3, r3, #2
 800570e:	4413      	add	r3, r2
 8005710:	881b      	ldrh	r3, [r3, #0]
 8005712:	b29b      	uxth	r3, r3
 8005714:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005718:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800571c:	833b      	strh	r3, [r7, #24]
 800571e:	8b3b      	ldrh	r3, [r7, #24]
 8005720:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005724:	833b      	strh	r3, [r7, #24]
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	461a      	mov	r2, r3
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	781b      	ldrb	r3, [r3, #0]
 8005730:	009b      	lsls	r3, r3, #2
 8005732:	441a      	add	r2, r3
 8005734:	8b3b      	ldrh	r3, [r7, #24]
 8005736:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800573a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800573e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005742:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005746:	b29b      	uxth	r3, r3
 8005748:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800574a:	88fb      	ldrh	r3, [r7, #6]
 800574c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005750:	2b00      	cmp	r3, #0
 8005752:	d01f      	beq.n	8005794 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	461a      	mov	r2, r3
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	781b      	ldrb	r3, [r3, #0]
 800575e:	009b      	lsls	r3, r3, #2
 8005760:	4413      	add	r3, r2
 8005762:	881b      	ldrh	r3, [r3, #0]
 8005764:	b29b      	uxth	r3, r3
 8005766:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800576a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800576e:	82fb      	strh	r3, [r7, #22]
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	461a      	mov	r2, r3
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	781b      	ldrb	r3, [r3, #0]
 800577a:	009b      	lsls	r3, r3, #2
 800577c:	441a      	add	r2, r3
 800577e:	8afb      	ldrh	r3, [r7, #22]
 8005780:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005784:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005788:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800578c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005790:	b29b      	uxth	r3, r3
 8005792:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005794:	8b7b      	ldrh	r3, [r7, #26]
 8005796:	2b00      	cmp	r3, #0
 8005798:	f000 8085 	beq.w	80058a6 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	6818      	ldr	r0, [r3, #0]
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	6959      	ldr	r1, [r3, #20]
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	891a      	ldrh	r2, [r3, #8]
 80057a8:	8b7b      	ldrh	r3, [r7, #26]
 80057aa:	f006 f9e2 	bl	800bb72 <USB_ReadPMA>
 80057ae:	e07a      	b.n	80058a6 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057b8:	b29b      	uxth	r3, r3
 80057ba:	461a      	mov	r2, r3
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	781b      	ldrb	r3, [r3, #0]
 80057c0:	00db      	lsls	r3, r3, #3
 80057c2:	4413      	add	r3, r2
 80057c4:	68fa      	ldr	r2, [r7, #12]
 80057c6:	6812      	ldr	r2, [r2, #0]
 80057c8:	4413      	add	r3, r2
 80057ca:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80057ce:	881b      	ldrh	r3, [r3, #0]
 80057d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80057d4:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	699a      	ldr	r2, [r3, #24]
 80057da:	8b7b      	ldrh	r3, [r7, #26]
 80057dc:	429a      	cmp	r2, r3
 80057de:	d306      	bcc.n	80057ee <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	699a      	ldr	r2, [r3, #24]
 80057e4:	8b7b      	ldrh	r3, [r7, #26]
 80057e6:	1ad2      	subs	r2, r2, r3
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	619a      	str	r2, [r3, #24]
 80057ec:	e002      	b.n	80057f4 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	2200      	movs	r2, #0
 80057f2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	699b      	ldr	r3, [r3, #24]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d123      	bne.n	8005844 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	461a      	mov	r2, r3
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	781b      	ldrb	r3, [r3, #0]
 8005806:	009b      	lsls	r3, r3, #2
 8005808:	4413      	add	r3, r2
 800580a:	881b      	ldrh	r3, [r3, #0]
 800580c:	b29b      	uxth	r3, r3
 800580e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005812:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005816:	83fb      	strh	r3, [r7, #30]
 8005818:	8bfb      	ldrh	r3, [r7, #30]
 800581a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800581e:	83fb      	strh	r3, [r7, #30]
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	461a      	mov	r2, r3
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	781b      	ldrb	r3, [r3, #0]
 800582a:	009b      	lsls	r3, r3, #2
 800582c:	441a      	add	r2, r3
 800582e:	8bfb      	ldrh	r3, [r7, #30]
 8005830:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005834:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005838:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800583c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005840:	b29b      	uxth	r3, r3
 8005842:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8005844:	88fb      	ldrh	r3, [r7, #6]
 8005846:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800584a:	2b00      	cmp	r3, #0
 800584c:	d11f      	bne.n	800588e <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	461a      	mov	r2, r3
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	781b      	ldrb	r3, [r3, #0]
 8005858:	009b      	lsls	r3, r3, #2
 800585a:	4413      	add	r3, r2
 800585c:	881b      	ldrh	r3, [r3, #0]
 800585e:	b29b      	uxth	r3, r3
 8005860:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005864:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005868:	83bb      	strh	r3, [r7, #28]
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	461a      	mov	r2, r3
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	781b      	ldrb	r3, [r3, #0]
 8005874:	009b      	lsls	r3, r3, #2
 8005876:	441a      	add	r2, r3
 8005878:	8bbb      	ldrh	r3, [r7, #28]
 800587a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800587e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005882:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005886:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800588a:	b29b      	uxth	r3, r3
 800588c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800588e:	8b7b      	ldrh	r3, [r7, #26]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d008      	beq.n	80058a6 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	6818      	ldr	r0, [r3, #0]
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	6959      	ldr	r1, [r3, #20]
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	895a      	ldrh	r2, [r3, #10]
 80058a0:	8b7b      	ldrh	r3, [r7, #26]
 80058a2:	f006 f966 	bl	800bb72 <USB_ReadPMA>
    }
  }

  return count;
 80058a6:	8b7b      	ldrh	r3, [r7, #26]
}
 80058a8:	4618      	mov	r0, r3
 80058aa:	3720      	adds	r7, #32
 80058ac:	46bd      	mov	sp, r7
 80058ae:	bd80      	pop	{r7, pc}

080058b0 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b0a2      	sub	sp, #136	; 0x88
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	60f8      	str	r0, [r7, #12]
 80058b8:	60b9      	str	r1, [r7, #8]
 80058ba:	4613      	mov	r3, r2
 80058bc:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80058be:	88fb      	ldrh	r3, [r7, #6]
 80058c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	f000 81c5 	beq.w	8005c54 <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058d2:	b29b      	uxth	r3, r3
 80058d4:	461a      	mov	r2, r3
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	781b      	ldrb	r3, [r3, #0]
 80058da:	00db      	lsls	r3, r3, #3
 80058dc:	4413      	add	r3, r2
 80058de:	68fa      	ldr	r2, [r7, #12]
 80058e0:	6812      	ldr	r2, [r2, #0]
 80058e2:	4413      	add	r3, r2
 80058e4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80058e8:	881b      	ldrh	r3, [r3, #0]
 80058ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80058ee:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	699a      	ldr	r2, [r3, #24]
 80058f6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80058fa:	429a      	cmp	r2, r3
 80058fc:	d907      	bls.n	800590e <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxByteNbre;
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	699a      	ldr	r2, [r3, #24]
 8005902:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005906:	1ad2      	subs	r2, r2, r3
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	619a      	str	r2, [r3, #24]
 800590c:	e002      	b.n	8005914 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	2200      	movs	r2, #0
 8005912:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	699b      	ldr	r3, [r3, #24]
 8005918:	2b00      	cmp	r3, #0
 800591a:	f040 80b9 	bne.w	8005a90 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	785b      	ldrb	r3, [r3, #1]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d126      	bne.n	8005974 <HAL_PCD_EP_DB_Transmit+0xc4>
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	62bb      	str	r3, [r7, #40]	; 0x28
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005934:	b29b      	uxth	r3, r3
 8005936:	461a      	mov	r2, r3
 8005938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800593a:	4413      	add	r3, r2
 800593c:	62bb      	str	r3, [r7, #40]	; 0x28
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	781b      	ldrb	r3, [r3, #0]
 8005942:	00da      	lsls	r2, r3, #3
 8005944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005946:	4413      	add	r3, r2
 8005948:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800594c:	627b      	str	r3, [r7, #36]	; 0x24
 800594e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005950:	881b      	ldrh	r3, [r3, #0]
 8005952:	b29b      	uxth	r3, r3
 8005954:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005958:	b29a      	uxth	r2, r3
 800595a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800595c:	801a      	strh	r2, [r3, #0]
 800595e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005960:	881b      	ldrh	r3, [r3, #0]
 8005962:	b29b      	uxth	r3, r3
 8005964:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005968:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800596c:	b29a      	uxth	r2, r3
 800596e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005970:	801a      	strh	r2, [r3, #0]
 8005972:	e01a      	b.n	80059aa <HAL_PCD_EP_DB_Transmit+0xfa>
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	785b      	ldrb	r3, [r3, #1]
 8005978:	2b01      	cmp	r3, #1
 800597a:	d116      	bne.n	80059aa <HAL_PCD_EP_DB_Transmit+0xfa>
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	633b      	str	r3, [r7, #48]	; 0x30
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800598a:	b29b      	uxth	r3, r3
 800598c:	461a      	mov	r2, r3
 800598e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005990:	4413      	add	r3, r2
 8005992:	633b      	str	r3, [r7, #48]	; 0x30
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	781b      	ldrb	r3, [r3, #0]
 8005998:	00da      	lsls	r2, r3, #3
 800599a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800599c:	4413      	add	r3, r2
 800599e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80059a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80059a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059a6:	2200      	movs	r2, #0
 80059a8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	623b      	str	r3, [r7, #32]
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	785b      	ldrb	r3, [r3, #1]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d126      	bne.n	8005a06 <HAL_PCD_EP_DB_Transmit+0x156>
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	61bb      	str	r3, [r7, #24]
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059c6:	b29b      	uxth	r3, r3
 80059c8:	461a      	mov	r2, r3
 80059ca:	69bb      	ldr	r3, [r7, #24]
 80059cc:	4413      	add	r3, r2
 80059ce:	61bb      	str	r3, [r7, #24]
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	781b      	ldrb	r3, [r3, #0]
 80059d4:	00da      	lsls	r2, r3, #3
 80059d6:	69bb      	ldr	r3, [r7, #24]
 80059d8:	4413      	add	r3, r2
 80059da:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80059de:	617b      	str	r3, [r7, #20]
 80059e0:	697b      	ldr	r3, [r7, #20]
 80059e2:	881b      	ldrh	r3, [r3, #0]
 80059e4:	b29b      	uxth	r3, r3
 80059e6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80059ea:	b29a      	uxth	r2, r3
 80059ec:	697b      	ldr	r3, [r7, #20]
 80059ee:	801a      	strh	r2, [r3, #0]
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	881b      	ldrh	r3, [r3, #0]
 80059f4:	b29b      	uxth	r3, r3
 80059f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059fe:	b29a      	uxth	r2, r3
 8005a00:	697b      	ldr	r3, [r7, #20]
 8005a02:	801a      	strh	r2, [r3, #0]
 8005a04:	e017      	b.n	8005a36 <HAL_PCD_EP_DB_Transmit+0x186>
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	785b      	ldrb	r3, [r3, #1]
 8005a0a:	2b01      	cmp	r3, #1
 8005a0c:	d113      	bne.n	8005a36 <HAL_PCD_EP_DB_Transmit+0x186>
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a16:	b29b      	uxth	r3, r3
 8005a18:	461a      	mov	r2, r3
 8005a1a:	6a3b      	ldr	r3, [r7, #32]
 8005a1c:	4413      	add	r3, r2
 8005a1e:	623b      	str	r3, [r7, #32]
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	781b      	ldrb	r3, [r3, #0]
 8005a24:	00da      	lsls	r2, r3, #3
 8005a26:	6a3b      	ldr	r3, [r7, #32]
 8005a28:	4413      	add	r3, r2
 8005a2a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005a2e:	61fb      	str	r3, [r7, #28]
 8005a30:	69fb      	ldr	r3, [r7, #28]
 8005a32:	2200      	movs	r2, #0
 8005a34:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	781b      	ldrb	r3, [r3, #0]
 8005a3a:	4619      	mov	r1, r3
 8005a3c:	68f8      	ldr	r0, [r7, #12]
 8005a3e:	f007 fe58 	bl	800d6f2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005a42:	88fb      	ldrh	r3, [r7, #6]
 8005a44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	f000 82d2 	beq.w	8005ff2 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	461a      	mov	r2, r3
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	781b      	ldrb	r3, [r3, #0]
 8005a58:	009b      	lsls	r3, r3, #2
 8005a5a:	4413      	add	r3, r2
 8005a5c:	881b      	ldrh	r3, [r3, #0]
 8005a5e:	b29b      	uxth	r3, r3
 8005a60:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a68:	827b      	strh	r3, [r7, #18]
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	461a      	mov	r2, r3
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	781b      	ldrb	r3, [r3, #0]
 8005a74:	009b      	lsls	r3, r3, #2
 8005a76:	441a      	add	r2, r3
 8005a78:	8a7b      	ldrh	r3, [r7, #18]
 8005a7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a82:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005a86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a8a:	b29b      	uxth	r3, r3
 8005a8c:	8013      	strh	r3, [r2, #0]
 8005a8e:	e2b0      	b.n	8005ff2 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005a90:	88fb      	ldrh	r3, [r7, #6]
 8005a92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d021      	beq.n	8005ade <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	461a      	mov	r2, r3
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	781b      	ldrb	r3, [r3, #0]
 8005aa4:	009b      	lsls	r3, r3, #2
 8005aa6:	4413      	add	r3, r2
 8005aa8:	881b      	ldrh	r3, [r3, #0]
 8005aaa:	b29b      	uxth	r3, r3
 8005aac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ab0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ab4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	461a      	mov	r2, r3
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	781b      	ldrb	r3, [r3, #0]
 8005ac2:	009b      	lsls	r3, r3, #2
 8005ac4:	441a      	add	r2, r3
 8005ac6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005aca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ace:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ad2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005ad6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ada:	b29b      	uxth	r3, r3
 8005adc:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005ae4:	2b01      	cmp	r3, #1
 8005ae6:	f040 8284 	bne.w	8005ff2 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxByteNbre;
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	695a      	ldr	r2, [r3, #20]
 8005aee:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005af2:	441a      	add	r2, r3
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	69da      	ldr	r2, [r3, #28]
 8005afc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005b00:	441a      	add	r2, r3
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	6a1a      	ldr	r2, [r3, #32]
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	691b      	ldr	r3, [r3, #16]
 8005b0e:	429a      	cmp	r2, r3
 8005b10:	d309      	bcc.n	8005b26 <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	691b      	ldr	r3, [r3, #16]
 8005b16:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	6a1a      	ldr	r2, [r3, #32]
 8005b1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b1e:	1ad2      	subs	r2, r2, r3
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	621a      	str	r2, [r3, #32]
 8005b24:	e015      	b.n	8005b52 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	6a1b      	ldr	r3, [r3, #32]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d107      	bne.n	8005b3e <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxByteNbre;
 8005b2e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005b32:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	2200      	movs	r2, #0
 8005b38:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005b3c:	e009      	b.n	8005b52 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	2200      	movs	r2, #0
 8005b42:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	6a1b      	ldr	r3, [r3, #32]
 8005b4a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	785b      	ldrb	r3, [r3, #1]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d155      	bne.n	8005c06 <HAL_PCD_EP_DB_Transmit+0x356>
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b68:	b29b      	uxth	r3, r3
 8005b6a:	461a      	mov	r2, r3
 8005b6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b6e:	4413      	add	r3, r2
 8005b70:	63bb      	str	r3, [r7, #56]	; 0x38
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	781b      	ldrb	r3, [r3, #0]
 8005b76:	00da      	lsls	r2, r3, #3
 8005b78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b7a:	4413      	add	r3, r2
 8005b7c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005b80:	637b      	str	r3, [r7, #52]	; 0x34
 8005b82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d112      	bne.n	8005bae <HAL_PCD_EP_DB_Transmit+0x2fe>
 8005b88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b8a:	881b      	ldrh	r3, [r3, #0]
 8005b8c:	b29b      	uxth	r3, r3
 8005b8e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005b92:	b29a      	uxth	r2, r3
 8005b94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b96:	801a      	strh	r2, [r3, #0]
 8005b98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b9a:	881b      	ldrh	r3, [r3, #0]
 8005b9c:	b29b      	uxth	r3, r3
 8005b9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ba2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ba6:	b29a      	uxth	r2, r3
 8005ba8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005baa:	801a      	strh	r2, [r3, #0]
 8005bac:	e047      	b.n	8005c3e <HAL_PCD_EP_DB_Transmit+0x38e>
 8005bae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005bb0:	2b3e      	cmp	r3, #62	; 0x3e
 8005bb2:	d811      	bhi.n	8005bd8 <HAL_PCD_EP_DB_Transmit+0x328>
 8005bb4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005bb6:	085b      	lsrs	r3, r3, #1
 8005bb8:	64bb      	str	r3, [r7, #72]	; 0x48
 8005bba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005bbc:	f003 0301 	and.w	r3, r3, #1
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d002      	beq.n	8005bca <HAL_PCD_EP_DB_Transmit+0x31a>
 8005bc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005bc6:	3301      	adds	r3, #1
 8005bc8:	64bb      	str	r3, [r7, #72]	; 0x48
 8005bca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005bcc:	b29b      	uxth	r3, r3
 8005bce:	029b      	lsls	r3, r3, #10
 8005bd0:	b29a      	uxth	r2, r3
 8005bd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bd4:	801a      	strh	r2, [r3, #0]
 8005bd6:	e032      	b.n	8005c3e <HAL_PCD_EP_DB_Transmit+0x38e>
 8005bd8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005bda:	095b      	lsrs	r3, r3, #5
 8005bdc:	64bb      	str	r3, [r7, #72]	; 0x48
 8005bde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005be0:	f003 031f 	and.w	r3, r3, #31
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d102      	bne.n	8005bee <HAL_PCD_EP_DB_Transmit+0x33e>
 8005be8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005bea:	3b01      	subs	r3, #1
 8005bec:	64bb      	str	r3, [r7, #72]	; 0x48
 8005bee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005bf0:	b29b      	uxth	r3, r3
 8005bf2:	029b      	lsls	r3, r3, #10
 8005bf4:	b29b      	uxth	r3, r3
 8005bf6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bfa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bfe:	b29a      	uxth	r2, r3
 8005c00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c02:	801a      	strh	r2, [r3, #0]
 8005c04:	e01b      	b.n	8005c3e <HAL_PCD_EP_DB_Transmit+0x38e>
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	785b      	ldrb	r3, [r3, #1]
 8005c0a:	2b01      	cmp	r3, #1
 8005c0c:	d117      	bne.n	8005c3e <HAL_PCD_EP_DB_Transmit+0x38e>
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	643b      	str	r3, [r7, #64]	; 0x40
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c1c:	b29b      	uxth	r3, r3
 8005c1e:	461a      	mov	r2, r3
 8005c20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c22:	4413      	add	r3, r2
 8005c24:	643b      	str	r3, [r7, #64]	; 0x40
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	781b      	ldrb	r3, [r3, #0]
 8005c2a:	00da      	lsls	r2, r3, #3
 8005c2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c2e:	4413      	add	r3, r2
 8005c30:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005c34:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c38:	b29a      	uxth	r2, r3
 8005c3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c3c:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	6818      	ldr	r0, [r3, #0]
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	6959      	ldr	r1, [r3, #20]
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	891a      	ldrh	r2, [r3, #8]
 8005c4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c4c:	b29b      	uxth	r3, r3
 8005c4e:	f005 ff4e 	bl	800baee <USB_WritePMA>
 8005c52:	e1ce      	b.n	8005ff2 <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c5c:	b29b      	uxth	r3, r3
 8005c5e:	461a      	mov	r2, r3
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	781b      	ldrb	r3, [r3, #0]
 8005c64:	00db      	lsls	r3, r3, #3
 8005c66:	4413      	add	r3, r2
 8005c68:	68fa      	ldr	r2, [r7, #12]
 8005c6a:	6812      	ldr	r2, [r2, #0]
 8005c6c:	4413      	add	r3, r2
 8005c6e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005c72:	881b      	ldrh	r3, [r3, #0]
 8005c74:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005c78:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	699a      	ldr	r2, [r3, #24]
 8005c80:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005c84:	429a      	cmp	r2, r3
 8005c86:	d307      	bcc.n	8005c98 <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxByteNbre;
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	699a      	ldr	r2, [r3, #24]
 8005c8c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005c90:	1ad2      	subs	r2, r2, r3
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	619a      	str	r2, [r3, #24]
 8005c96:	e002      	b.n	8005c9e <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	699b      	ldr	r3, [r3, #24]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	f040 80c4 	bne.w	8005e30 <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	785b      	ldrb	r3, [r3, #1]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d126      	bne.n	8005cfe <HAL_PCD_EP_DB_Transmit+0x44e>
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005cbe:	b29b      	uxth	r3, r3
 8005cc0:	461a      	mov	r2, r3
 8005cc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cc4:	4413      	add	r3, r2
 8005cc6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005cc8:	68bb      	ldr	r3, [r7, #8]
 8005cca:	781b      	ldrb	r3, [r3, #0]
 8005ccc:	00da      	lsls	r2, r3, #3
 8005cce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cd0:	4413      	add	r3, r2
 8005cd2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005cd6:	66bb      	str	r3, [r7, #104]	; 0x68
 8005cd8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005cda:	881b      	ldrh	r3, [r3, #0]
 8005cdc:	b29b      	uxth	r3, r3
 8005cde:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005ce2:	b29a      	uxth	r2, r3
 8005ce4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005ce6:	801a      	strh	r2, [r3, #0]
 8005ce8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005cea:	881b      	ldrh	r3, [r3, #0]
 8005cec:	b29b      	uxth	r3, r3
 8005cee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cf2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cf6:	b29a      	uxth	r2, r3
 8005cf8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005cfa:	801a      	strh	r2, [r3, #0]
 8005cfc:	e01a      	b.n	8005d34 <HAL_PCD_EP_DB_Transmit+0x484>
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	785b      	ldrb	r3, [r3, #1]
 8005d02:	2b01      	cmp	r3, #1
 8005d04:	d116      	bne.n	8005d34 <HAL_PCD_EP_DB_Transmit+0x484>
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	677b      	str	r3, [r7, #116]	; 0x74
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d14:	b29b      	uxth	r3, r3
 8005d16:	461a      	mov	r2, r3
 8005d18:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d1a:	4413      	add	r3, r2
 8005d1c:	677b      	str	r3, [r7, #116]	; 0x74
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	781b      	ldrb	r3, [r3, #0]
 8005d22:	00da      	lsls	r2, r3, #3
 8005d24:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d26:	4413      	add	r3, r2
 8005d28:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005d2c:	673b      	str	r3, [r7, #112]	; 0x70
 8005d2e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005d30:	2200      	movs	r2, #0
 8005d32:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	67bb      	str	r3, [r7, #120]	; 0x78
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	785b      	ldrb	r3, [r3, #1]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d12f      	bne.n	8005da2 <HAL_PCD_EP_DB_Transmit+0x4f2>
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d52:	b29b      	uxth	r3, r3
 8005d54:	461a      	mov	r2, r3
 8005d56:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005d5a:	4413      	add	r3, r2
 8005d5c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	781b      	ldrb	r3, [r3, #0]
 8005d64:	00da      	lsls	r2, r3, #3
 8005d66:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005d6a:	4413      	add	r3, r2
 8005d6c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005d70:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005d74:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005d78:	881b      	ldrh	r3, [r3, #0]
 8005d7a:	b29b      	uxth	r3, r3
 8005d7c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005d80:	b29a      	uxth	r2, r3
 8005d82:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005d86:	801a      	strh	r2, [r3, #0]
 8005d88:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005d8c:	881b      	ldrh	r3, [r3, #0]
 8005d8e:	b29b      	uxth	r3, r3
 8005d90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d98:	b29a      	uxth	r2, r3
 8005d9a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005d9e:	801a      	strh	r2, [r3, #0]
 8005da0:	e017      	b.n	8005dd2 <HAL_PCD_EP_DB_Transmit+0x522>
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	785b      	ldrb	r3, [r3, #1]
 8005da6:	2b01      	cmp	r3, #1
 8005da8:	d113      	bne.n	8005dd2 <HAL_PCD_EP_DB_Transmit+0x522>
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005db2:	b29b      	uxth	r3, r3
 8005db4:	461a      	mov	r2, r3
 8005db6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005db8:	4413      	add	r3, r2
 8005dba:	67bb      	str	r3, [r7, #120]	; 0x78
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	781b      	ldrb	r3, [r3, #0]
 8005dc0:	00da      	lsls	r2, r3, #3
 8005dc2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005dc4:	4413      	add	r3, r2
 8005dc6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005dca:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005dcc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005dce:	2200      	movs	r2, #0
 8005dd0:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	781b      	ldrb	r3, [r3, #0]
 8005dd6:	4619      	mov	r1, r3
 8005dd8:	68f8      	ldr	r0, [r7, #12]
 8005dda:	f007 fc8a 	bl	800d6f2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005dde:	88fb      	ldrh	r3, [r7, #6]
 8005de0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	f040 8104 	bne.w	8005ff2 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	461a      	mov	r2, r3
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	781b      	ldrb	r3, [r3, #0]
 8005df4:	009b      	lsls	r3, r3, #2
 8005df6:	4413      	add	r3, r2
 8005df8:	881b      	ldrh	r3, [r3, #0]
 8005dfa:	b29b      	uxth	r3, r3
 8005dfc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e04:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	461a      	mov	r2, r3
 8005e0e:	68bb      	ldr	r3, [r7, #8]
 8005e10:	781b      	ldrb	r3, [r3, #0]
 8005e12:	009b      	lsls	r3, r3, #2
 8005e14:	441a      	add	r2, r3
 8005e16:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005e1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e22:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005e26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e2a:	b29b      	uxth	r3, r3
 8005e2c:	8013      	strh	r3, [r2, #0]
 8005e2e:	e0e0      	b.n	8005ff2 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005e30:	88fb      	ldrh	r3, [r7, #6]
 8005e32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d121      	bne.n	8005e7e <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	461a      	mov	r2, r3
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	781b      	ldrb	r3, [r3, #0]
 8005e44:	009b      	lsls	r3, r3, #2
 8005e46:	4413      	add	r3, r2
 8005e48:	881b      	ldrh	r3, [r3, #0]
 8005e4a:	b29b      	uxth	r3, r3
 8005e4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e54:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	461a      	mov	r2, r3
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	781b      	ldrb	r3, [r3, #0]
 8005e62:	009b      	lsls	r3, r3, #2
 8005e64:	441a      	add	r2, r3
 8005e66:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005e6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e72:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005e76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e7a:	b29b      	uxth	r3, r3
 8005e7c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005e84:	2b01      	cmp	r3, #1
 8005e86:	f040 80b4 	bne.w	8005ff2 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxByteNbre;
 8005e8a:	68bb      	ldr	r3, [r7, #8]
 8005e8c:	695a      	ldr	r2, [r3, #20]
 8005e8e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005e92:	441a      	add	r2, r3
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	69da      	ldr	r2, [r3, #28]
 8005e9c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005ea0:	441a      	add	r2, r3
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005ea6:	68bb      	ldr	r3, [r7, #8]
 8005ea8:	6a1a      	ldr	r2, [r3, #32]
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	691b      	ldr	r3, [r3, #16]
 8005eae:	429a      	cmp	r2, r3
 8005eb0:	d309      	bcc.n	8005ec6 <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	691b      	ldr	r3, [r3, #16]
 8005eb6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	6a1a      	ldr	r2, [r3, #32]
 8005ebc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ebe:	1ad2      	subs	r2, r2, r3
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	621a      	str	r2, [r3, #32]
 8005ec4:	e015      	b.n	8005ef2 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	6a1b      	ldr	r3, [r3, #32]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d107      	bne.n	8005ede <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxByteNbre;
 8005ece:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005ed2:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005edc:	e009      	b.n	8005ef2 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	6a1b      	ldr	r3, [r3, #32]
 8005ee2:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	2200      	movs	r2, #0
 8005eee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	667b      	str	r3, [r7, #100]	; 0x64
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	785b      	ldrb	r3, [r3, #1]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d155      	bne.n	8005fac <HAL_PCD_EP_DB_Transmit+0x6fc>
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f0e:	b29b      	uxth	r3, r3
 8005f10:	461a      	mov	r2, r3
 8005f12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f14:	4413      	add	r3, r2
 8005f16:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	781b      	ldrb	r3, [r3, #0]
 8005f1c:	00da      	lsls	r2, r3, #3
 8005f1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f20:	4413      	add	r3, r2
 8005f22:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005f26:	65bb      	str	r3, [r7, #88]	; 0x58
 8005f28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d112      	bne.n	8005f54 <HAL_PCD_EP_DB_Transmit+0x6a4>
 8005f2e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005f30:	881b      	ldrh	r3, [r3, #0]
 8005f32:	b29b      	uxth	r3, r3
 8005f34:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005f38:	b29a      	uxth	r2, r3
 8005f3a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005f3c:	801a      	strh	r2, [r3, #0]
 8005f3e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005f40:	881b      	ldrh	r3, [r3, #0]
 8005f42:	b29b      	uxth	r3, r3
 8005f44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f4c:	b29a      	uxth	r2, r3
 8005f4e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005f50:	801a      	strh	r2, [r3, #0]
 8005f52:	e044      	b.n	8005fde <HAL_PCD_EP_DB_Transmit+0x72e>
 8005f54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f56:	2b3e      	cmp	r3, #62	; 0x3e
 8005f58:	d811      	bhi.n	8005f7e <HAL_PCD_EP_DB_Transmit+0x6ce>
 8005f5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f5c:	085b      	lsrs	r3, r3, #1
 8005f5e:	657b      	str	r3, [r7, #84]	; 0x54
 8005f60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f62:	f003 0301 	and.w	r3, r3, #1
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d002      	beq.n	8005f70 <HAL_PCD_EP_DB_Transmit+0x6c0>
 8005f6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f6c:	3301      	adds	r3, #1
 8005f6e:	657b      	str	r3, [r7, #84]	; 0x54
 8005f70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f72:	b29b      	uxth	r3, r3
 8005f74:	029b      	lsls	r3, r3, #10
 8005f76:	b29a      	uxth	r2, r3
 8005f78:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005f7a:	801a      	strh	r2, [r3, #0]
 8005f7c:	e02f      	b.n	8005fde <HAL_PCD_EP_DB_Transmit+0x72e>
 8005f7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f80:	095b      	lsrs	r3, r3, #5
 8005f82:	657b      	str	r3, [r7, #84]	; 0x54
 8005f84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f86:	f003 031f 	and.w	r3, r3, #31
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d102      	bne.n	8005f94 <HAL_PCD_EP_DB_Transmit+0x6e4>
 8005f8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f90:	3b01      	subs	r3, #1
 8005f92:	657b      	str	r3, [r7, #84]	; 0x54
 8005f94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f96:	b29b      	uxth	r3, r3
 8005f98:	029b      	lsls	r3, r3, #10
 8005f9a:	b29b      	uxth	r3, r3
 8005f9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fa0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fa4:	b29a      	uxth	r2, r3
 8005fa6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005fa8:	801a      	strh	r2, [r3, #0]
 8005faa:	e018      	b.n	8005fde <HAL_PCD_EP_DB_Transmit+0x72e>
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	785b      	ldrb	r3, [r3, #1]
 8005fb0:	2b01      	cmp	r3, #1
 8005fb2:	d114      	bne.n	8005fde <HAL_PCD_EP_DB_Transmit+0x72e>
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fbc:	b29b      	uxth	r3, r3
 8005fbe:	461a      	mov	r2, r3
 8005fc0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005fc2:	4413      	add	r3, r2
 8005fc4:	667b      	str	r3, [r7, #100]	; 0x64
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	781b      	ldrb	r3, [r3, #0]
 8005fca:	00da      	lsls	r2, r3, #3
 8005fcc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005fce:	4413      	add	r3, r2
 8005fd0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005fd4:	663b      	str	r3, [r7, #96]	; 0x60
 8005fd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005fd8:	b29a      	uxth	r2, r3
 8005fda:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005fdc:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	6818      	ldr	r0, [r3, #0]
 8005fe2:	68bb      	ldr	r3, [r7, #8]
 8005fe4:	6959      	ldr	r1, [r3, #20]
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	895a      	ldrh	r2, [r3, #10]
 8005fea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005fec:	b29b      	uxth	r3, r3
 8005fee:	f005 fd7e 	bl	800baee <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	461a      	mov	r2, r3
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	781b      	ldrb	r3, [r3, #0]
 8005ffc:	009b      	lsls	r3, r3, #2
 8005ffe:	4413      	add	r3, r2
 8006000:	881b      	ldrh	r3, [r3, #0]
 8006002:	b29b      	uxth	r3, r3
 8006004:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006008:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800600c:	823b      	strh	r3, [r7, #16]
 800600e:	8a3b      	ldrh	r3, [r7, #16]
 8006010:	f083 0310 	eor.w	r3, r3, #16
 8006014:	823b      	strh	r3, [r7, #16]
 8006016:	8a3b      	ldrh	r3, [r7, #16]
 8006018:	f083 0320 	eor.w	r3, r3, #32
 800601c:	823b      	strh	r3, [r7, #16]
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	461a      	mov	r2, r3
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	781b      	ldrb	r3, [r3, #0]
 8006028:	009b      	lsls	r3, r3, #2
 800602a:	441a      	add	r2, r3
 800602c:	8a3b      	ldrh	r3, [r7, #16]
 800602e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006032:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006036:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800603a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800603e:	b29b      	uxth	r3, r3
 8006040:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8006042:	2300      	movs	r3, #0
}
 8006044:	4618      	mov	r0, r3
 8006046:	3788      	adds	r7, #136	; 0x88
 8006048:	46bd      	mov	sp, r7
 800604a:	bd80      	pop	{r7, pc}

0800604c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800604c:	b480      	push	{r7}
 800604e:	b087      	sub	sp, #28
 8006050:	af00      	add	r7, sp, #0
 8006052:	60f8      	str	r0, [r7, #12]
 8006054:	607b      	str	r3, [r7, #4]
 8006056:	460b      	mov	r3, r1
 8006058:	817b      	strh	r3, [r7, #10]
 800605a:	4613      	mov	r3, r2
 800605c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800605e:	897b      	ldrh	r3, [r7, #10]
 8006060:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006064:	b29b      	uxth	r3, r3
 8006066:	2b00      	cmp	r3, #0
 8006068:	d00b      	beq.n	8006082 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800606a:	897b      	ldrh	r3, [r7, #10]
 800606c:	f003 0307 	and.w	r3, r3, #7
 8006070:	1c5a      	adds	r2, r3, #1
 8006072:	4613      	mov	r3, r2
 8006074:	009b      	lsls	r3, r3, #2
 8006076:	4413      	add	r3, r2
 8006078:	00db      	lsls	r3, r3, #3
 800607a:	68fa      	ldr	r2, [r7, #12]
 800607c:	4413      	add	r3, r2
 800607e:	617b      	str	r3, [r7, #20]
 8006080:	e009      	b.n	8006096 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006082:	897a      	ldrh	r2, [r7, #10]
 8006084:	4613      	mov	r3, r2
 8006086:	009b      	lsls	r3, r3, #2
 8006088:	4413      	add	r3, r2
 800608a:	00db      	lsls	r3, r3, #3
 800608c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006090:	68fa      	ldr	r2, [r7, #12]
 8006092:	4413      	add	r3, r2
 8006094:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8006096:	893b      	ldrh	r3, [r7, #8]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d107      	bne.n	80060ac <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800609c:	697b      	ldr	r3, [r7, #20]
 800609e:	2200      	movs	r2, #0
 80060a0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	b29a      	uxth	r2, r3
 80060a6:	697b      	ldr	r3, [r7, #20]
 80060a8:	80da      	strh	r2, [r3, #6]
 80060aa:	e00b      	b.n	80060c4 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80060ac:	697b      	ldr	r3, [r7, #20]
 80060ae:	2201      	movs	r2, #1
 80060b0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	b29a      	uxth	r2, r3
 80060b6:	697b      	ldr	r3, [r7, #20]
 80060b8:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	0c1b      	lsrs	r3, r3, #16
 80060be:	b29a      	uxth	r2, r3
 80060c0:	697b      	ldr	r3, [r7, #20]
 80060c2:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80060c4:	2300      	movs	r3, #0
}
 80060c6:	4618      	mov	r0, r3
 80060c8:	371c      	adds	r7, #28
 80060ca:	46bd      	mov	sp, r7
 80060cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d0:	4770      	bx	lr
	...

080060d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80060da:	af00      	add	r7, sp, #0
 80060dc:	1d3b      	adds	r3, r7, #4
 80060de:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80060e0:	1d3b      	adds	r3, r7, #4
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d102      	bne.n	80060ee <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80060e8:	2301      	movs	r3, #1
 80060ea:	f000 bef4 	b.w	8006ed6 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80060ee:	1d3b      	adds	r3, r7, #4
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f003 0301 	and.w	r3, r3, #1
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	f000 816a 	beq.w	80063d2 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80060fe:	4bb3      	ldr	r3, [pc, #716]	; (80063cc <HAL_RCC_OscConfig+0x2f8>)
 8006100:	685b      	ldr	r3, [r3, #4]
 8006102:	f003 030c 	and.w	r3, r3, #12
 8006106:	2b04      	cmp	r3, #4
 8006108:	d00c      	beq.n	8006124 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800610a:	4bb0      	ldr	r3, [pc, #704]	; (80063cc <HAL_RCC_OscConfig+0x2f8>)
 800610c:	685b      	ldr	r3, [r3, #4]
 800610e:	f003 030c 	and.w	r3, r3, #12
 8006112:	2b08      	cmp	r3, #8
 8006114:	d159      	bne.n	80061ca <HAL_RCC_OscConfig+0xf6>
 8006116:	4bad      	ldr	r3, [pc, #692]	; (80063cc <HAL_RCC_OscConfig+0x2f8>)
 8006118:	685b      	ldr	r3, [r3, #4]
 800611a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800611e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006122:	d152      	bne.n	80061ca <HAL_RCC_OscConfig+0xf6>
 8006124:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006128:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800612c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8006130:	fa93 f3a3 	rbit	r3, r3
 8006134:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8006138:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800613c:	fab3 f383 	clz	r3, r3
 8006140:	b2db      	uxtb	r3, r3
 8006142:	095b      	lsrs	r3, r3, #5
 8006144:	b2db      	uxtb	r3, r3
 8006146:	f043 0301 	orr.w	r3, r3, #1
 800614a:	b2db      	uxtb	r3, r3
 800614c:	2b01      	cmp	r3, #1
 800614e:	d102      	bne.n	8006156 <HAL_RCC_OscConfig+0x82>
 8006150:	4b9e      	ldr	r3, [pc, #632]	; (80063cc <HAL_RCC_OscConfig+0x2f8>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	e015      	b.n	8006182 <HAL_RCC_OscConfig+0xae>
 8006156:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800615a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800615e:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8006162:	fa93 f3a3 	rbit	r3, r3
 8006166:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800616a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800616e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8006172:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8006176:	fa93 f3a3 	rbit	r3, r3
 800617a:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800617e:	4b93      	ldr	r3, [pc, #588]	; (80063cc <HAL_RCC_OscConfig+0x2f8>)
 8006180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006182:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006186:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800618a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800618e:	fa92 f2a2 	rbit	r2, r2
 8006192:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8006196:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800619a:	fab2 f282 	clz	r2, r2
 800619e:	b2d2      	uxtb	r2, r2
 80061a0:	f042 0220 	orr.w	r2, r2, #32
 80061a4:	b2d2      	uxtb	r2, r2
 80061a6:	f002 021f 	and.w	r2, r2, #31
 80061aa:	2101      	movs	r1, #1
 80061ac:	fa01 f202 	lsl.w	r2, r1, r2
 80061b0:	4013      	ands	r3, r2
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	f000 810c 	beq.w	80063d0 <HAL_RCC_OscConfig+0x2fc>
 80061b8:	1d3b      	adds	r3, r7, #4
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	685b      	ldr	r3, [r3, #4]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	f040 8106 	bne.w	80063d0 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 80061c4:	2301      	movs	r3, #1
 80061c6:	f000 be86 	b.w	8006ed6 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80061ca:	1d3b      	adds	r3, r7, #4
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	685b      	ldr	r3, [r3, #4]
 80061d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061d4:	d106      	bne.n	80061e4 <HAL_RCC_OscConfig+0x110>
 80061d6:	4b7d      	ldr	r3, [pc, #500]	; (80063cc <HAL_RCC_OscConfig+0x2f8>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	4a7c      	ldr	r2, [pc, #496]	; (80063cc <HAL_RCC_OscConfig+0x2f8>)
 80061dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061e0:	6013      	str	r3, [r2, #0]
 80061e2:	e030      	b.n	8006246 <HAL_RCC_OscConfig+0x172>
 80061e4:	1d3b      	adds	r3, r7, #4
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	685b      	ldr	r3, [r3, #4]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d10c      	bne.n	8006208 <HAL_RCC_OscConfig+0x134>
 80061ee:	4b77      	ldr	r3, [pc, #476]	; (80063cc <HAL_RCC_OscConfig+0x2f8>)
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	4a76      	ldr	r2, [pc, #472]	; (80063cc <HAL_RCC_OscConfig+0x2f8>)
 80061f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80061f8:	6013      	str	r3, [r2, #0]
 80061fa:	4b74      	ldr	r3, [pc, #464]	; (80063cc <HAL_RCC_OscConfig+0x2f8>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4a73      	ldr	r2, [pc, #460]	; (80063cc <HAL_RCC_OscConfig+0x2f8>)
 8006200:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006204:	6013      	str	r3, [r2, #0]
 8006206:	e01e      	b.n	8006246 <HAL_RCC_OscConfig+0x172>
 8006208:	1d3b      	adds	r3, r7, #4
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	685b      	ldr	r3, [r3, #4]
 800620e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006212:	d10c      	bne.n	800622e <HAL_RCC_OscConfig+0x15a>
 8006214:	4b6d      	ldr	r3, [pc, #436]	; (80063cc <HAL_RCC_OscConfig+0x2f8>)
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a6c      	ldr	r2, [pc, #432]	; (80063cc <HAL_RCC_OscConfig+0x2f8>)
 800621a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800621e:	6013      	str	r3, [r2, #0]
 8006220:	4b6a      	ldr	r3, [pc, #424]	; (80063cc <HAL_RCC_OscConfig+0x2f8>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a69      	ldr	r2, [pc, #420]	; (80063cc <HAL_RCC_OscConfig+0x2f8>)
 8006226:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800622a:	6013      	str	r3, [r2, #0]
 800622c:	e00b      	b.n	8006246 <HAL_RCC_OscConfig+0x172>
 800622e:	4b67      	ldr	r3, [pc, #412]	; (80063cc <HAL_RCC_OscConfig+0x2f8>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	4a66      	ldr	r2, [pc, #408]	; (80063cc <HAL_RCC_OscConfig+0x2f8>)
 8006234:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006238:	6013      	str	r3, [r2, #0]
 800623a:	4b64      	ldr	r3, [pc, #400]	; (80063cc <HAL_RCC_OscConfig+0x2f8>)
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4a63      	ldr	r2, [pc, #396]	; (80063cc <HAL_RCC_OscConfig+0x2f8>)
 8006240:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006244:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006246:	4b61      	ldr	r3, [pc, #388]	; (80063cc <HAL_RCC_OscConfig+0x2f8>)
 8006248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800624a:	f023 020f 	bic.w	r2, r3, #15
 800624e:	1d3b      	adds	r3, r7, #4
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	689b      	ldr	r3, [r3, #8]
 8006254:	495d      	ldr	r1, [pc, #372]	; (80063cc <HAL_RCC_OscConfig+0x2f8>)
 8006256:	4313      	orrs	r3, r2
 8006258:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800625a:	1d3b      	adds	r3, r7, #4
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	685b      	ldr	r3, [r3, #4]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d059      	beq.n	8006318 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006264:	f7fc f8fc 	bl	8002460 <HAL_GetTick>
 8006268:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800626c:	e00a      	b.n	8006284 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800626e:	f7fc f8f7 	bl	8002460 <HAL_GetTick>
 8006272:	4602      	mov	r2, r0
 8006274:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006278:	1ad3      	subs	r3, r2, r3
 800627a:	2b64      	cmp	r3, #100	; 0x64
 800627c:	d902      	bls.n	8006284 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 800627e:	2303      	movs	r3, #3
 8006280:	f000 be29 	b.w	8006ed6 <HAL_RCC_OscConfig+0xe02>
 8006284:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006288:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800628c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8006290:	fa93 f3a3 	rbit	r3, r3
 8006294:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8006298:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800629c:	fab3 f383 	clz	r3, r3
 80062a0:	b2db      	uxtb	r3, r3
 80062a2:	095b      	lsrs	r3, r3, #5
 80062a4:	b2db      	uxtb	r3, r3
 80062a6:	f043 0301 	orr.w	r3, r3, #1
 80062aa:	b2db      	uxtb	r3, r3
 80062ac:	2b01      	cmp	r3, #1
 80062ae:	d102      	bne.n	80062b6 <HAL_RCC_OscConfig+0x1e2>
 80062b0:	4b46      	ldr	r3, [pc, #280]	; (80063cc <HAL_RCC_OscConfig+0x2f8>)
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	e015      	b.n	80062e2 <HAL_RCC_OscConfig+0x20e>
 80062b6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80062ba:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062be:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80062c2:	fa93 f3a3 	rbit	r3, r3
 80062c6:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80062ca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80062ce:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80062d2:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80062d6:	fa93 f3a3 	rbit	r3, r3
 80062da:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80062de:	4b3b      	ldr	r3, [pc, #236]	; (80063cc <HAL_RCC_OscConfig+0x2f8>)
 80062e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062e2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80062e6:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80062ea:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80062ee:	fa92 f2a2 	rbit	r2, r2
 80062f2:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80062f6:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80062fa:	fab2 f282 	clz	r2, r2
 80062fe:	b2d2      	uxtb	r2, r2
 8006300:	f042 0220 	orr.w	r2, r2, #32
 8006304:	b2d2      	uxtb	r2, r2
 8006306:	f002 021f 	and.w	r2, r2, #31
 800630a:	2101      	movs	r1, #1
 800630c:	fa01 f202 	lsl.w	r2, r1, r2
 8006310:	4013      	ands	r3, r2
 8006312:	2b00      	cmp	r3, #0
 8006314:	d0ab      	beq.n	800626e <HAL_RCC_OscConfig+0x19a>
 8006316:	e05c      	b.n	80063d2 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006318:	f7fc f8a2 	bl	8002460 <HAL_GetTick>
 800631c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006320:	e00a      	b.n	8006338 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006322:	f7fc f89d 	bl	8002460 <HAL_GetTick>
 8006326:	4602      	mov	r2, r0
 8006328:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800632c:	1ad3      	subs	r3, r2, r3
 800632e:	2b64      	cmp	r3, #100	; 0x64
 8006330:	d902      	bls.n	8006338 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8006332:	2303      	movs	r3, #3
 8006334:	f000 bdcf 	b.w	8006ed6 <HAL_RCC_OscConfig+0xe02>
 8006338:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800633c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006340:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8006344:	fa93 f3a3 	rbit	r3, r3
 8006348:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800634c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006350:	fab3 f383 	clz	r3, r3
 8006354:	b2db      	uxtb	r3, r3
 8006356:	095b      	lsrs	r3, r3, #5
 8006358:	b2db      	uxtb	r3, r3
 800635a:	f043 0301 	orr.w	r3, r3, #1
 800635e:	b2db      	uxtb	r3, r3
 8006360:	2b01      	cmp	r3, #1
 8006362:	d102      	bne.n	800636a <HAL_RCC_OscConfig+0x296>
 8006364:	4b19      	ldr	r3, [pc, #100]	; (80063cc <HAL_RCC_OscConfig+0x2f8>)
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	e015      	b.n	8006396 <HAL_RCC_OscConfig+0x2c2>
 800636a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800636e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006372:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8006376:	fa93 f3a3 	rbit	r3, r3
 800637a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800637e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006382:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8006386:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800638a:	fa93 f3a3 	rbit	r3, r3
 800638e:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8006392:	4b0e      	ldr	r3, [pc, #56]	; (80063cc <HAL_RCC_OscConfig+0x2f8>)
 8006394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006396:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800639a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800639e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80063a2:	fa92 f2a2 	rbit	r2, r2
 80063a6:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80063aa:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80063ae:	fab2 f282 	clz	r2, r2
 80063b2:	b2d2      	uxtb	r2, r2
 80063b4:	f042 0220 	orr.w	r2, r2, #32
 80063b8:	b2d2      	uxtb	r2, r2
 80063ba:	f002 021f 	and.w	r2, r2, #31
 80063be:	2101      	movs	r1, #1
 80063c0:	fa01 f202 	lsl.w	r2, r1, r2
 80063c4:	4013      	ands	r3, r2
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d1ab      	bne.n	8006322 <HAL_RCC_OscConfig+0x24e>
 80063ca:	e002      	b.n	80063d2 <HAL_RCC_OscConfig+0x2fe>
 80063cc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80063d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80063d2:	1d3b      	adds	r3, r7, #4
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f003 0302 	and.w	r3, r3, #2
 80063dc:	2b00      	cmp	r3, #0
 80063de:	f000 816f 	beq.w	80066c0 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80063e2:	4bd0      	ldr	r3, [pc, #832]	; (8006724 <HAL_RCC_OscConfig+0x650>)
 80063e4:	685b      	ldr	r3, [r3, #4]
 80063e6:	f003 030c 	and.w	r3, r3, #12
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d00b      	beq.n	8006406 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80063ee:	4bcd      	ldr	r3, [pc, #820]	; (8006724 <HAL_RCC_OscConfig+0x650>)
 80063f0:	685b      	ldr	r3, [r3, #4]
 80063f2:	f003 030c 	and.w	r3, r3, #12
 80063f6:	2b08      	cmp	r3, #8
 80063f8:	d16c      	bne.n	80064d4 <HAL_RCC_OscConfig+0x400>
 80063fa:	4bca      	ldr	r3, [pc, #808]	; (8006724 <HAL_RCC_OscConfig+0x650>)
 80063fc:	685b      	ldr	r3, [r3, #4]
 80063fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006402:	2b00      	cmp	r3, #0
 8006404:	d166      	bne.n	80064d4 <HAL_RCC_OscConfig+0x400>
 8006406:	2302      	movs	r3, #2
 8006408:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800640c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8006410:	fa93 f3a3 	rbit	r3, r3
 8006414:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8006418:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800641c:	fab3 f383 	clz	r3, r3
 8006420:	b2db      	uxtb	r3, r3
 8006422:	095b      	lsrs	r3, r3, #5
 8006424:	b2db      	uxtb	r3, r3
 8006426:	f043 0301 	orr.w	r3, r3, #1
 800642a:	b2db      	uxtb	r3, r3
 800642c:	2b01      	cmp	r3, #1
 800642e:	d102      	bne.n	8006436 <HAL_RCC_OscConfig+0x362>
 8006430:	4bbc      	ldr	r3, [pc, #752]	; (8006724 <HAL_RCC_OscConfig+0x650>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	e013      	b.n	800645e <HAL_RCC_OscConfig+0x38a>
 8006436:	2302      	movs	r3, #2
 8006438:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800643c:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8006440:	fa93 f3a3 	rbit	r3, r3
 8006444:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8006448:	2302      	movs	r3, #2
 800644a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800644e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8006452:	fa93 f3a3 	rbit	r3, r3
 8006456:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800645a:	4bb2      	ldr	r3, [pc, #712]	; (8006724 <HAL_RCC_OscConfig+0x650>)
 800645c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800645e:	2202      	movs	r2, #2
 8006460:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8006464:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8006468:	fa92 f2a2 	rbit	r2, r2
 800646c:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8006470:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8006474:	fab2 f282 	clz	r2, r2
 8006478:	b2d2      	uxtb	r2, r2
 800647a:	f042 0220 	orr.w	r2, r2, #32
 800647e:	b2d2      	uxtb	r2, r2
 8006480:	f002 021f 	and.w	r2, r2, #31
 8006484:	2101      	movs	r1, #1
 8006486:	fa01 f202 	lsl.w	r2, r1, r2
 800648a:	4013      	ands	r3, r2
 800648c:	2b00      	cmp	r3, #0
 800648e:	d007      	beq.n	80064a0 <HAL_RCC_OscConfig+0x3cc>
 8006490:	1d3b      	adds	r3, r7, #4
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	691b      	ldr	r3, [r3, #16]
 8006496:	2b01      	cmp	r3, #1
 8006498:	d002      	beq.n	80064a0 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 800649a:	2301      	movs	r3, #1
 800649c:	f000 bd1b 	b.w	8006ed6 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064a0:	4ba0      	ldr	r3, [pc, #640]	; (8006724 <HAL_RCC_OscConfig+0x650>)
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80064a8:	1d3b      	adds	r3, r7, #4
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	695b      	ldr	r3, [r3, #20]
 80064ae:	21f8      	movs	r1, #248	; 0xf8
 80064b0:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064b4:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80064b8:	fa91 f1a1 	rbit	r1, r1
 80064bc:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80064c0:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80064c4:	fab1 f181 	clz	r1, r1
 80064c8:	b2c9      	uxtb	r1, r1
 80064ca:	408b      	lsls	r3, r1
 80064cc:	4995      	ldr	r1, [pc, #596]	; (8006724 <HAL_RCC_OscConfig+0x650>)
 80064ce:	4313      	orrs	r3, r2
 80064d0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80064d2:	e0f5      	b.n	80066c0 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80064d4:	1d3b      	adds	r3, r7, #4
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	691b      	ldr	r3, [r3, #16]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	f000 8085 	beq.w	80065ea <HAL_RCC_OscConfig+0x516>
 80064e0:	2301      	movs	r3, #1
 80064e2:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064e6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80064ea:	fa93 f3a3 	rbit	r3, r3
 80064ee:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80064f2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80064f6:	fab3 f383 	clz	r3, r3
 80064fa:	b2db      	uxtb	r3, r3
 80064fc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006500:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006504:	009b      	lsls	r3, r3, #2
 8006506:	461a      	mov	r2, r3
 8006508:	2301      	movs	r3, #1
 800650a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800650c:	f7fb ffa8 	bl	8002460 <HAL_GetTick>
 8006510:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006514:	e00a      	b.n	800652c <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006516:	f7fb ffa3 	bl	8002460 <HAL_GetTick>
 800651a:	4602      	mov	r2, r0
 800651c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006520:	1ad3      	subs	r3, r2, r3
 8006522:	2b02      	cmp	r3, #2
 8006524:	d902      	bls.n	800652c <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8006526:	2303      	movs	r3, #3
 8006528:	f000 bcd5 	b.w	8006ed6 <HAL_RCC_OscConfig+0xe02>
 800652c:	2302      	movs	r3, #2
 800652e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006532:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8006536:	fa93 f3a3 	rbit	r3, r3
 800653a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800653e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006542:	fab3 f383 	clz	r3, r3
 8006546:	b2db      	uxtb	r3, r3
 8006548:	095b      	lsrs	r3, r3, #5
 800654a:	b2db      	uxtb	r3, r3
 800654c:	f043 0301 	orr.w	r3, r3, #1
 8006550:	b2db      	uxtb	r3, r3
 8006552:	2b01      	cmp	r3, #1
 8006554:	d102      	bne.n	800655c <HAL_RCC_OscConfig+0x488>
 8006556:	4b73      	ldr	r3, [pc, #460]	; (8006724 <HAL_RCC_OscConfig+0x650>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	e013      	b.n	8006584 <HAL_RCC_OscConfig+0x4b0>
 800655c:	2302      	movs	r3, #2
 800655e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006562:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8006566:	fa93 f3a3 	rbit	r3, r3
 800656a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800656e:	2302      	movs	r3, #2
 8006570:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8006574:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8006578:	fa93 f3a3 	rbit	r3, r3
 800657c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8006580:	4b68      	ldr	r3, [pc, #416]	; (8006724 <HAL_RCC_OscConfig+0x650>)
 8006582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006584:	2202      	movs	r2, #2
 8006586:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800658a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800658e:	fa92 f2a2 	rbit	r2, r2
 8006592:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8006596:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800659a:	fab2 f282 	clz	r2, r2
 800659e:	b2d2      	uxtb	r2, r2
 80065a0:	f042 0220 	orr.w	r2, r2, #32
 80065a4:	b2d2      	uxtb	r2, r2
 80065a6:	f002 021f 	and.w	r2, r2, #31
 80065aa:	2101      	movs	r1, #1
 80065ac:	fa01 f202 	lsl.w	r2, r1, r2
 80065b0:	4013      	ands	r3, r2
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d0af      	beq.n	8006516 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80065b6:	4b5b      	ldr	r3, [pc, #364]	; (8006724 <HAL_RCC_OscConfig+0x650>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80065be:	1d3b      	adds	r3, r7, #4
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	695b      	ldr	r3, [r3, #20]
 80065c4:	21f8      	movs	r1, #248	; 0xf8
 80065c6:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065ca:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80065ce:	fa91 f1a1 	rbit	r1, r1
 80065d2:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80065d6:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80065da:	fab1 f181 	clz	r1, r1
 80065de:	b2c9      	uxtb	r1, r1
 80065e0:	408b      	lsls	r3, r1
 80065e2:	4950      	ldr	r1, [pc, #320]	; (8006724 <HAL_RCC_OscConfig+0x650>)
 80065e4:	4313      	orrs	r3, r2
 80065e6:	600b      	str	r3, [r1, #0]
 80065e8:	e06a      	b.n	80066c0 <HAL_RCC_OscConfig+0x5ec>
 80065ea:	2301      	movs	r3, #1
 80065ec:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065f0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80065f4:	fa93 f3a3 	rbit	r3, r3
 80065f8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80065fc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006600:	fab3 f383 	clz	r3, r3
 8006604:	b2db      	uxtb	r3, r3
 8006606:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800660a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800660e:	009b      	lsls	r3, r3, #2
 8006610:	461a      	mov	r2, r3
 8006612:	2300      	movs	r3, #0
 8006614:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006616:	f7fb ff23 	bl	8002460 <HAL_GetTick>
 800661a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800661e:	e00a      	b.n	8006636 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006620:	f7fb ff1e 	bl	8002460 <HAL_GetTick>
 8006624:	4602      	mov	r2, r0
 8006626:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800662a:	1ad3      	subs	r3, r2, r3
 800662c:	2b02      	cmp	r3, #2
 800662e:	d902      	bls.n	8006636 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8006630:	2303      	movs	r3, #3
 8006632:	f000 bc50 	b.w	8006ed6 <HAL_RCC_OscConfig+0xe02>
 8006636:	2302      	movs	r3, #2
 8006638:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800663c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006640:	fa93 f3a3 	rbit	r3, r3
 8006644:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8006648:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800664c:	fab3 f383 	clz	r3, r3
 8006650:	b2db      	uxtb	r3, r3
 8006652:	095b      	lsrs	r3, r3, #5
 8006654:	b2db      	uxtb	r3, r3
 8006656:	f043 0301 	orr.w	r3, r3, #1
 800665a:	b2db      	uxtb	r3, r3
 800665c:	2b01      	cmp	r3, #1
 800665e:	d102      	bne.n	8006666 <HAL_RCC_OscConfig+0x592>
 8006660:	4b30      	ldr	r3, [pc, #192]	; (8006724 <HAL_RCC_OscConfig+0x650>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	e013      	b.n	800668e <HAL_RCC_OscConfig+0x5ba>
 8006666:	2302      	movs	r3, #2
 8006668:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800666c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006670:	fa93 f3a3 	rbit	r3, r3
 8006674:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006678:	2302      	movs	r3, #2
 800667a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800667e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006682:	fa93 f3a3 	rbit	r3, r3
 8006686:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800668a:	4b26      	ldr	r3, [pc, #152]	; (8006724 <HAL_RCC_OscConfig+0x650>)
 800668c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800668e:	2202      	movs	r2, #2
 8006690:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8006694:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8006698:	fa92 f2a2 	rbit	r2, r2
 800669c:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80066a0:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80066a4:	fab2 f282 	clz	r2, r2
 80066a8:	b2d2      	uxtb	r2, r2
 80066aa:	f042 0220 	orr.w	r2, r2, #32
 80066ae:	b2d2      	uxtb	r2, r2
 80066b0:	f002 021f 	and.w	r2, r2, #31
 80066b4:	2101      	movs	r1, #1
 80066b6:	fa01 f202 	lsl.w	r2, r1, r2
 80066ba:	4013      	ands	r3, r2
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d1af      	bne.n	8006620 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80066c0:	1d3b      	adds	r3, r7, #4
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f003 0308 	and.w	r3, r3, #8
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	f000 80da 	beq.w	8006884 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80066d0:	1d3b      	adds	r3, r7, #4
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	699b      	ldr	r3, [r3, #24]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d069      	beq.n	80067ae <HAL_RCC_OscConfig+0x6da>
 80066da:	2301      	movs	r3, #1
 80066dc:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066e0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80066e4:	fa93 f3a3 	rbit	r3, r3
 80066e8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80066ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80066f0:	fab3 f383 	clz	r3, r3
 80066f4:	b2db      	uxtb	r3, r3
 80066f6:	461a      	mov	r2, r3
 80066f8:	4b0b      	ldr	r3, [pc, #44]	; (8006728 <HAL_RCC_OscConfig+0x654>)
 80066fa:	4413      	add	r3, r2
 80066fc:	009b      	lsls	r3, r3, #2
 80066fe:	461a      	mov	r2, r3
 8006700:	2301      	movs	r3, #1
 8006702:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006704:	f7fb feac 	bl	8002460 <HAL_GetTick>
 8006708:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800670c:	e00e      	b.n	800672c <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800670e:	f7fb fea7 	bl	8002460 <HAL_GetTick>
 8006712:	4602      	mov	r2, r0
 8006714:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006718:	1ad3      	subs	r3, r2, r3
 800671a:	2b02      	cmp	r3, #2
 800671c:	d906      	bls.n	800672c <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 800671e:	2303      	movs	r3, #3
 8006720:	e3d9      	b.n	8006ed6 <HAL_RCC_OscConfig+0xe02>
 8006722:	bf00      	nop
 8006724:	40021000 	.word	0x40021000
 8006728:	10908120 	.word	0x10908120
 800672c:	2302      	movs	r3, #2
 800672e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006732:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006736:	fa93 f3a3 	rbit	r3, r3
 800673a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800673e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8006742:	2202      	movs	r2, #2
 8006744:	601a      	str	r2, [r3, #0]
 8006746:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	fa93 f2a3 	rbit	r2, r3
 8006750:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8006754:	601a      	str	r2, [r3, #0]
 8006756:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800675a:	2202      	movs	r2, #2
 800675c:	601a      	str	r2, [r3, #0]
 800675e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	fa93 f2a3 	rbit	r2, r3
 8006768:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800676c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800676e:	4ba5      	ldr	r3, [pc, #660]	; (8006a04 <HAL_RCC_OscConfig+0x930>)
 8006770:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006772:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8006776:	2102      	movs	r1, #2
 8006778:	6019      	str	r1, [r3, #0]
 800677a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	fa93 f1a3 	rbit	r1, r3
 8006784:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8006788:	6019      	str	r1, [r3, #0]
  return result;
 800678a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	fab3 f383 	clz	r3, r3
 8006794:	b2db      	uxtb	r3, r3
 8006796:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800679a:	b2db      	uxtb	r3, r3
 800679c:	f003 031f 	and.w	r3, r3, #31
 80067a0:	2101      	movs	r1, #1
 80067a2:	fa01 f303 	lsl.w	r3, r1, r3
 80067a6:	4013      	ands	r3, r2
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d0b0      	beq.n	800670e <HAL_RCC_OscConfig+0x63a>
 80067ac:	e06a      	b.n	8006884 <HAL_RCC_OscConfig+0x7b0>
 80067ae:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80067b2:	2201      	movs	r2, #1
 80067b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067b6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	fa93 f2a3 	rbit	r2, r3
 80067c0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80067c4:	601a      	str	r2, [r3, #0]
  return result;
 80067c6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80067ca:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80067cc:	fab3 f383 	clz	r3, r3
 80067d0:	b2db      	uxtb	r3, r3
 80067d2:	461a      	mov	r2, r3
 80067d4:	4b8c      	ldr	r3, [pc, #560]	; (8006a08 <HAL_RCC_OscConfig+0x934>)
 80067d6:	4413      	add	r3, r2
 80067d8:	009b      	lsls	r3, r3, #2
 80067da:	461a      	mov	r2, r3
 80067dc:	2300      	movs	r3, #0
 80067de:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80067e0:	f7fb fe3e 	bl	8002460 <HAL_GetTick>
 80067e4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80067e8:	e009      	b.n	80067fe <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80067ea:	f7fb fe39 	bl	8002460 <HAL_GetTick>
 80067ee:	4602      	mov	r2, r0
 80067f0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80067f4:	1ad3      	subs	r3, r2, r3
 80067f6:	2b02      	cmp	r3, #2
 80067f8:	d901      	bls.n	80067fe <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 80067fa:	2303      	movs	r3, #3
 80067fc:	e36b      	b.n	8006ed6 <HAL_RCC_OscConfig+0xe02>
 80067fe:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8006802:	2202      	movs	r2, #2
 8006804:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006806:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	fa93 f2a3 	rbit	r2, r3
 8006810:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8006814:	601a      	str	r2, [r3, #0]
 8006816:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800681a:	2202      	movs	r2, #2
 800681c:	601a      	str	r2, [r3, #0]
 800681e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	fa93 f2a3 	rbit	r2, r3
 8006828:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800682c:	601a      	str	r2, [r3, #0]
 800682e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8006832:	2202      	movs	r2, #2
 8006834:	601a      	str	r2, [r3, #0]
 8006836:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	fa93 f2a3 	rbit	r2, r3
 8006840:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8006844:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006846:	4b6f      	ldr	r3, [pc, #444]	; (8006a04 <HAL_RCC_OscConfig+0x930>)
 8006848:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800684a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800684e:	2102      	movs	r1, #2
 8006850:	6019      	str	r1, [r3, #0]
 8006852:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	fa93 f1a3 	rbit	r1, r3
 800685c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8006860:	6019      	str	r1, [r3, #0]
  return result;
 8006862:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	fab3 f383 	clz	r3, r3
 800686c:	b2db      	uxtb	r3, r3
 800686e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006872:	b2db      	uxtb	r3, r3
 8006874:	f003 031f 	and.w	r3, r3, #31
 8006878:	2101      	movs	r1, #1
 800687a:	fa01 f303 	lsl.w	r3, r1, r3
 800687e:	4013      	ands	r3, r2
 8006880:	2b00      	cmp	r3, #0
 8006882:	d1b2      	bne.n	80067ea <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006884:	1d3b      	adds	r3, r7, #4
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f003 0304 	and.w	r3, r3, #4
 800688e:	2b00      	cmp	r3, #0
 8006890:	f000 8158 	beq.w	8006b44 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006894:	2300      	movs	r3, #0
 8006896:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800689a:	4b5a      	ldr	r3, [pc, #360]	; (8006a04 <HAL_RCC_OscConfig+0x930>)
 800689c:	69db      	ldr	r3, [r3, #28]
 800689e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d112      	bne.n	80068cc <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80068a6:	4b57      	ldr	r3, [pc, #348]	; (8006a04 <HAL_RCC_OscConfig+0x930>)
 80068a8:	69db      	ldr	r3, [r3, #28]
 80068aa:	4a56      	ldr	r2, [pc, #344]	; (8006a04 <HAL_RCC_OscConfig+0x930>)
 80068ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80068b0:	61d3      	str	r3, [r2, #28]
 80068b2:	4b54      	ldr	r3, [pc, #336]	; (8006a04 <HAL_RCC_OscConfig+0x930>)
 80068b4:	69db      	ldr	r3, [r3, #28]
 80068b6:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80068ba:	f107 0308 	add.w	r3, r7, #8
 80068be:	601a      	str	r2, [r3, #0]
 80068c0:	f107 0308 	add.w	r3, r7, #8
 80068c4:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80068c6:	2301      	movs	r3, #1
 80068c8:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80068cc:	4b4f      	ldr	r3, [pc, #316]	; (8006a0c <HAL_RCC_OscConfig+0x938>)
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d11a      	bne.n	800690e <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80068d8:	4b4c      	ldr	r3, [pc, #304]	; (8006a0c <HAL_RCC_OscConfig+0x938>)
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4a4b      	ldr	r2, [pc, #300]	; (8006a0c <HAL_RCC_OscConfig+0x938>)
 80068de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068e2:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80068e4:	f7fb fdbc 	bl	8002460 <HAL_GetTick>
 80068e8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80068ec:	e009      	b.n	8006902 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80068ee:	f7fb fdb7 	bl	8002460 <HAL_GetTick>
 80068f2:	4602      	mov	r2, r0
 80068f4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80068f8:	1ad3      	subs	r3, r2, r3
 80068fa:	2b64      	cmp	r3, #100	; 0x64
 80068fc:	d901      	bls.n	8006902 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 80068fe:	2303      	movs	r3, #3
 8006900:	e2e9      	b.n	8006ed6 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006902:	4b42      	ldr	r3, [pc, #264]	; (8006a0c <HAL_RCC_OscConfig+0x938>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800690a:	2b00      	cmp	r3, #0
 800690c:	d0ef      	beq.n	80068ee <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800690e:	1d3b      	adds	r3, r7, #4
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	68db      	ldr	r3, [r3, #12]
 8006914:	2b01      	cmp	r3, #1
 8006916:	d106      	bne.n	8006926 <HAL_RCC_OscConfig+0x852>
 8006918:	4b3a      	ldr	r3, [pc, #232]	; (8006a04 <HAL_RCC_OscConfig+0x930>)
 800691a:	6a1b      	ldr	r3, [r3, #32]
 800691c:	4a39      	ldr	r2, [pc, #228]	; (8006a04 <HAL_RCC_OscConfig+0x930>)
 800691e:	f043 0301 	orr.w	r3, r3, #1
 8006922:	6213      	str	r3, [r2, #32]
 8006924:	e02f      	b.n	8006986 <HAL_RCC_OscConfig+0x8b2>
 8006926:	1d3b      	adds	r3, r7, #4
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	68db      	ldr	r3, [r3, #12]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d10c      	bne.n	800694a <HAL_RCC_OscConfig+0x876>
 8006930:	4b34      	ldr	r3, [pc, #208]	; (8006a04 <HAL_RCC_OscConfig+0x930>)
 8006932:	6a1b      	ldr	r3, [r3, #32]
 8006934:	4a33      	ldr	r2, [pc, #204]	; (8006a04 <HAL_RCC_OscConfig+0x930>)
 8006936:	f023 0301 	bic.w	r3, r3, #1
 800693a:	6213      	str	r3, [r2, #32]
 800693c:	4b31      	ldr	r3, [pc, #196]	; (8006a04 <HAL_RCC_OscConfig+0x930>)
 800693e:	6a1b      	ldr	r3, [r3, #32]
 8006940:	4a30      	ldr	r2, [pc, #192]	; (8006a04 <HAL_RCC_OscConfig+0x930>)
 8006942:	f023 0304 	bic.w	r3, r3, #4
 8006946:	6213      	str	r3, [r2, #32]
 8006948:	e01d      	b.n	8006986 <HAL_RCC_OscConfig+0x8b2>
 800694a:	1d3b      	adds	r3, r7, #4
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	68db      	ldr	r3, [r3, #12]
 8006950:	2b05      	cmp	r3, #5
 8006952:	d10c      	bne.n	800696e <HAL_RCC_OscConfig+0x89a>
 8006954:	4b2b      	ldr	r3, [pc, #172]	; (8006a04 <HAL_RCC_OscConfig+0x930>)
 8006956:	6a1b      	ldr	r3, [r3, #32]
 8006958:	4a2a      	ldr	r2, [pc, #168]	; (8006a04 <HAL_RCC_OscConfig+0x930>)
 800695a:	f043 0304 	orr.w	r3, r3, #4
 800695e:	6213      	str	r3, [r2, #32]
 8006960:	4b28      	ldr	r3, [pc, #160]	; (8006a04 <HAL_RCC_OscConfig+0x930>)
 8006962:	6a1b      	ldr	r3, [r3, #32]
 8006964:	4a27      	ldr	r2, [pc, #156]	; (8006a04 <HAL_RCC_OscConfig+0x930>)
 8006966:	f043 0301 	orr.w	r3, r3, #1
 800696a:	6213      	str	r3, [r2, #32]
 800696c:	e00b      	b.n	8006986 <HAL_RCC_OscConfig+0x8b2>
 800696e:	4b25      	ldr	r3, [pc, #148]	; (8006a04 <HAL_RCC_OscConfig+0x930>)
 8006970:	6a1b      	ldr	r3, [r3, #32]
 8006972:	4a24      	ldr	r2, [pc, #144]	; (8006a04 <HAL_RCC_OscConfig+0x930>)
 8006974:	f023 0301 	bic.w	r3, r3, #1
 8006978:	6213      	str	r3, [r2, #32]
 800697a:	4b22      	ldr	r3, [pc, #136]	; (8006a04 <HAL_RCC_OscConfig+0x930>)
 800697c:	6a1b      	ldr	r3, [r3, #32]
 800697e:	4a21      	ldr	r2, [pc, #132]	; (8006a04 <HAL_RCC_OscConfig+0x930>)
 8006980:	f023 0304 	bic.w	r3, r3, #4
 8006984:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006986:	1d3b      	adds	r3, r7, #4
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	68db      	ldr	r3, [r3, #12]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d06b      	beq.n	8006a68 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006990:	f7fb fd66 	bl	8002460 <HAL_GetTick>
 8006994:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006998:	e00b      	b.n	80069b2 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800699a:	f7fb fd61 	bl	8002460 <HAL_GetTick>
 800699e:	4602      	mov	r2, r0
 80069a0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80069a4:	1ad3      	subs	r3, r2, r3
 80069a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d901      	bls.n	80069b2 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 80069ae:	2303      	movs	r3, #3
 80069b0:	e291      	b.n	8006ed6 <HAL_RCC_OscConfig+0xe02>
 80069b2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80069b6:	2202      	movs	r2, #2
 80069b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80069ba:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	fa93 f2a3 	rbit	r2, r3
 80069c4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80069c8:	601a      	str	r2, [r3, #0]
 80069ca:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80069ce:	2202      	movs	r2, #2
 80069d0:	601a      	str	r2, [r3, #0]
 80069d2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	fa93 f2a3 	rbit	r2, r3
 80069dc:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80069e0:	601a      	str	r2, [r3, #0]
  return result;
 80069e2:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80069e6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80069e8:	fab3 f383 	clz	r3, r3
 80069ec:	b2db      	uxtb	r3, r3
 80069ee:	095b      	lsrs	r3, r3, #5
 80069f0:	b2db      	uxtb	r3, r3
 80069f2:	f043 0302 	orr.w	r3, r3, #2
 80069f6:	b2db      	uxtb	r3, r3
 80069f8:	2b02      	cmp	r3, #2
 80069fa:	d109      	bne.n	8006a10 <HAL_RCC_OscConfig+0x93c>
 80069fc:	4b01      	ldr	r3, [pc, #4]	; (8006a04 <HAL_RCC_OscConfig+0x930>)
 80069fe:	6a1b      	ldr	r3, [r3, #32]
 8006a00:	e014      	b.n	8006a2c <HAL_RCC_OscConfig+0x958>
 8006a02:	bf00      	nop
 8006a04:	40021000 	.word	0x40021000
 8006a08:	10908120 	.word	0x10908120
 8006a0c:	40007000 	.word	0x40007000
 8006a10:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8006a14:	2202      	movs	r2, #2
 8006a16:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a18:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	fa93 f2a3 	rbit	r2, r3
 8006a22:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8006a26:	601a      	str	r2, [r3, #0]
 8006a28:	4bbb      	ldr	r3, [pc, #748]	; (8006d18 <HAL_RCC_OscConfig+0xc44>)
 8006a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a2c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8006a30:	2102      	movs	r1, #2
 8006a32:	6011      	str	r1, [r2, #0]
 8006a34:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8006a38:	6812      	ldr	r2, [r2, #0]
 8006a3a:	fa92 f1a2 	rbit	r1, r2
 8006a3e:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8006a42:	6011      	str	r1, [r2, #0]
  return result;
 8006a44:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8006a48:	6812      	ldr	r2, [r2, #0]
 8006a4a:	fab2 f282 	clz	r2, r2
 8006a4e:	b2d2      	uxtb	r2, r2
 8006a50:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006a54:	b2d2      	uxtb	r2, r2
 8006a56:	f002 021f 	and.w	r2, r2, #31
 8006a5a:	2101      	movs	r1, #1
 8006a5c:	fa01 f202 	lsl.w	r2, r1, r2
 8006a60:	4013      	ands	r3, r2
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d099      	beq.n	800699a <HAL_RCC_OscConfig+0x8c6>
 8006a66:	e063      	b.n	8006b30 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006a68:	f7fb fcfa 	bl	8002460 <HAL_GetTick>
 8006a6c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006a70:	e00b      	b.n	8006a8a <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006a72:	f7fb fcf5 	bl	8002460 <HAL_GetTick>
 8006a76:	4602      	mov	r2, r0
 8006a78:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006a7c:	1ad3      	subs	r3, r2, r3
 8006a7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a82:	4293      	cmp	r3, r2
 8006a84:	d901      	bls.n	8006a8a <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8006a86:	2303      	movs	r3, #3
 8006a88:	e225      	b.n	8006ed6 <HAL_RCC_OscConfig+0xe02>
 8006a8a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8006a8e:	2202      	movs	r2, #2
 8006a90:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a92:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	fa93 f2a3 	rbit	r2, r3
 8006a9c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8006aa0:	601a      	str	r2, [r3, #0]
 8006aa2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8006aa6:	2202      	movs	r2, #2
 8006aa8:	601a      	str	r2, [r3, #0]
 8006aaa:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	fa93 f2a3 	rbit	r2, r3
 8006ab4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8006ab8:	601a      	str	r2, [r3, #0]
  return result;
 8006aba:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8006abe:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006ac0:	fab3 f383 	clz	r3, r3
 8006ac4:	b2db      	uxtb	r3, r3
 8006ac6:	095b      	lsrs	r3, r3, #5
 8006ac8:	b2db      	uxtb	r3, r3
 8006aca:	f043 0302 	orr.w	r3, r3, #2
 8006ace:	b2db      	uxtb	r3, r3
 8006ad0:	2b02      	cmp	r3, #2
 8006ad2:	d102      	bne.n	8006ada <HAL_RCC_OscConfig+0xa06>
 8006ad4:	4b90      	ldr	r3, [pc, #576]	; (8006d18 <HAL_RCC_OscConfig+0xc44>)
 8006ad6:	6a1b      	ldr	r3, [r3, #32]
 8006ad8:	e00d      	b.n	8006af6 <HAL_RCC_OscConfig+0xa22>
 8006ada:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8006ade:	2202      	movs	r2, #2
 8006ae0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ae2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	fa93 f2a3 	rbit	r2, r3
 8006aec:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8006af0:	601a      	str	r2, [r3, #0]
 8006af2:	4b89      	ldr	r3, [pc, #548]	; (8006d18 <HAL_RCC_OscConfig+0xc44>)
 8006af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006af6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8006afa:	2102      	movs	r1, #2
 8006afc:	6011      	str	r1, [r2, #0]
 8006afe:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8006b02:	6812      	ldr	r2, [r2, #0]
 8006b04:	fa92 f1a2 	rbit	r1, r2
 8006b08:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8006b0c:	6011      	str	r1, [r2, #0]
  return result;
 8006b0e:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8006b12:	6812      	ldr	r2, [r2, #0]
 8006b14:	fab2 f282 	clz	r2, r2
 8006b18:	b2d2      	uxtb	r2, r2
 8006b1a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b1e:	b2d2      	uxtb	r2, r2
 8006b20:	f002 021f 	and.w	r2, r2, #31
 8006b24:	2101      	movs	r1, #1
 8006b26:	fa01 f202 	lsl.w	r2, r1, r2
 8006b2a:	4013      	ands	r3, r2
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d1a0      	bne.n	8006a72 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006b30:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8006b34:	2b01      	cmp	r3, #1
 8006b36:	d105      	bne.n	8006b44 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006b38:	4b77      	ldr	r3, [pc, #476]	; (8006d18 <HAL_RCC_OscConfig+0xc44>)
 8006b3a:	69db      	ldr	r3, [r3, #28]
 8006b3c:	4a76      	ldr	r2, [pc, #472]	; (8006d18 <HAL_RCC_OscConfig+0xc44>)
 8006b3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b42:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006b44:	1d3b      	adds	r3, r7, #4
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	69db      	ldr	r3, [r3, #28]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	f000 81c2 	beq.w	8006ed4 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006b50:	4b71      	ldr	r3, [pc, #452]	; (8006d18 <HAL_RCC_OscConfig+0xc44>)
 8006b52:	685b      	ldr	r3, [r3, #4]
 8006b54:	f003 030c 	and.w	r3, r3, #12
 8006b58:	2b08      	cmp	r3, #8
 8006b5a:	f000 819c 	beq.w	8006e96 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006b5e:	1d3b      	adds	r3, r7, #4
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	69db      	ldr	r3, [r3, #28]
 8006b64:	2b02      	cmp	r3, #2
 8006b66:	f040 8114 	bne.w	8006d92 <HAL_RCC_OscConfig+0xcbe>
 8006b6a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8006b6e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006b72:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b74:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	fa93 f2a3 	rbit	r2, r3
 8006b7e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8006b82:	601a      	str	r2, [r3, #0]
  return result;
 8006b84:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8006b88:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b8a:	fab3 f383 	clz	r3, r3
 8006b8e:	b2db      	uxtb	r3, r3
 8006b90:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006b94:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006b98:	009b      	lsls	r3, r3, #2
 8006b9a:	461a      	mov	r2, r3
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ba0:	f7fb fc5e 	bl	8002460 <HAL_GetTick>
 8006ba4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006ba8:	e009      	b.n	8006bbe <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006baa:	f7fb fc59 	bl	8002460 <HAL_GetTick>
 8006bae:	4602      	mov	r2, r0
 8006bb0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006bb4:	1ad3      	subs	r3, r2, r3
 8006bb6:	2b02      	cmp	r3, #2
 8006bb8:	d901      	bls.n	8006bbe <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8006bba:	2303      	movs	r3, #3
 8006bbc:	e18b      	b.n	8006ed6 <HAL_RCC_OscConfig+0xe02>
 8006bbe:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8006bc2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006bc6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006bc8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	fa93 f2a3 	rbit	r2, r3
 8006bd2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8006bd6:	601a      	str	r2, [r3, #0]
  return result;
 8006bd8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8006bdc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006bde:	fab3 f383 	clz	r3, r3
 8006be2:	b2db      	uxtb	r3, r3
 8006be4:	095b      	lsrs	r3, r3, #5
 8006be6:	b2db      	uxtb	r3, r3
 8006be8:	f043 0301 	orr.w	r3, r3, #1
 8006bec:	b2db      	uxtb	r3, r3
 8006bee:	2b01      	cmp	r3, #1
 8006bf0:	d102      	bne.n	8006bf8 <HAL_RCC_OscConfig+0xb24>
 8006bf2:	4b49      	ldr	r3, [pc, #292]	; (8006d18 <HAL_RCC_OscConfig+0xc44>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	e01b      	b.n	8006c30 <HAL_RCC_OscConfig+0xb5c>
 8006bf8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8006bfc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006c00:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c02:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	fa93 f2a3 	rbit	r2, r3
 8006c0c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006c10:	601a      	str	r2, [r3, #0]
 8006c12:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8006c16:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006c1a:	601a      	str	r2, [r3, #0]
 8006c1c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	fa93 f2a3 	rbit	r2, r3
 8006c26:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8006c2a:	601a      	str	r2, [r3, #0]
 8006c2c:	4b3a      	ldr	r3, [pc, #232]	; (8006d18 <HAL_RCC_OscConfig+0xc44>)
 8006c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c30:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8006c34:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8006c38:	6011      	str	r1, [r2, #0]
 8006c3a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8006c3e:	6812      	ldr	r2, [r2, #0]
 8006c40:	fa92 f1a2 	rbit	r1, r2
 8006c44:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8006c48:	6011      	str	r1, [r2, #0]
  return result;
 8006c4a:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8006c4e:	6812      	ldr	r2, [r2, #0]
 8006c50:	fab2 f282 	clz	r2, r2
 8006c54:	b2d2      	uxtb	r2, r2
 8006c56:	f042 0220 	orr.w	r2, r2, #32
 8006c5a:	b2d2      	uxtb	r2, r2
 8006c5c:	f002 021f 	and.w	r2, r2, #31
 8006c60:	2101      	movs	r1, #1
 8006c62:	fa01 f202 	lsl.w	r2, r1, r2
 8006c66:	4013      	ands	r3, r2
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d19e      	bne.n	8006baa <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006c6c:	4b2a      	ldr	r3, [pc, #168]	; (8006d18 <HAL_RCC_OscConfig+0xc44>)
 8006c6e:	685b      	ldr	r3, [r3, #4]
 8006c70:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006c74:	1d3b      	adds	r3, r7, #4
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006c7a:	1d3b      	adds	r3, r7, #4
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	6a1b      	ldr	r3, [r3, #32]
 8006c80:	430b      	orrs	r3, r1
 8006c82:	4925      	ldr	r1, [pc, #148]	; (8006d18 <HAL_RCC_OscConfig+0xc44>)
 8006c84:	4313      	orrs	r3, r2
 8006c86:	604b      	str	r3, [r1, #4]
 8006c88:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006c8c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006c90:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c92:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	fa93 f2a3 	rbit	r2, r3
 8006c9c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8006ca0:	601a      	str	r2, [r3, #0]
  return result;
 8006ca2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8006ca6:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006ca8:	fab3 f383 	clz	r3, r3
 8006cac:	b2db      	uxtb	r3, r3
 8006cae:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006cb2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006cb6:	009b      	lsls	r3, r3, #2
 8006cb8:	461a      	mov	r2, r3
 8006cba:	2301      	movs	r3, #1
 8006cbc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006cbe:	f7fb fbcf 	bl	8002460 <HAL_GetTick>
 8006cc2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006cc6:	e009      	b.n	8006cdc <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006cc8:	f7fb fbca 	bl	8002460 <HAL_GetTick>
 8006ccc:	4602      	mov	r2, r0
 8006cce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006cd2:	1ad3      	subs	r3, r2, r3
 8006cd4:	2b02      	cmp	r3, #2
 8006cd6:	d901      	bls.n	8006cdc <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8006cd8:	2303      	movs	r3, #3
 8006cda:	e0fc      	b.n	8006ed6 <HAL_RCC_OscConfig+0xe02>
 8006cdc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006ce0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006ce4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ce6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	fa93 f2a3 	rbit	r2, r3
 8006cf0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8006cf4:	601a      	str	r2, [r3, #0]
  return result;
 8006cf6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8006cfa:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006cfc:	fab3 f383 	clz	r3, r3
 8006d00:	b2db      	uxtb	r3, r3
 8006d02:	095b      	lsrs	r3, r3, #5
 8006d04:	b2db      	uxtb	r3, r3
 8006d06:	f043 0301 	orr.w	r3, r3, #1
 8006d0a:	b2db      	uxtb	r3, r3
 8006d0c:	2b01      	cmp	r3, #1
 8006d0e:	d105      	bne.n	8006d1c <HAL_RCC_OscConfig+0xc48>
 8006d10:	4b01      	ldr	r3, [pc, #4]	; (8006d18 <HAL_RCC_OscConfig+0xc44>)
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	e01e      	b.n	8006d54 <HAL_RCC_OscConfig+0xc80>
 8006d16:	bf00      	nop
 8006d18:	40021000 	.word	0x40021000
 8006d1c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006d20:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006d24:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d26:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	fa93 f2a3 	rbit	r2, r3
 8006d30:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006d34:	601a      	str	r2, [r3, #0]
 8006d36:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006d3a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006d3e:	601a      	str	r2, [r3, #0]
 8006d40:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	fa93 f2a3 	rbit	r2, r3
 8006d4a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006d4e:	601a      	str	r2, [r3, #0]
 8006d50:	4b63      	ldr	r3, [pc, #396]	; (8006ee0 <HAL_RCC_OscConfig+0xe0c>)
 8006d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d54:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8006d58:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8006d5c:	6011      	str	r1, [r2, #0]
 8006d5e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8006d62:	6812      	ldr	r2, [r2, #0]
 8006d64:	fa92 f1a2 	rbit	r1, r2
 8006d68:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8006d6c:	6011      	str	r1, [r2, #0]
  return result;
 8006d6e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8006d72:	6812      	ldr	r2, [r2, #0]
 8006d74:	fab2 f282 	clz	r2, r2
 8006d78:	b2d2      	uxtb	r2, r2
 8006d7a:	f042 0220 	orr.w	r2, r2, #32
 8006d7e:	b2d2      	uxtb	r2, r2
 8006d80:	f002 021f 	and.w	r2, r2, #31
 8006d84:	2101      	movs	r1, #1
 8006d86:	fa01 f202 	lsl.w	r2, r1, r2
 8006d8a:	4013      	ands	r3, r2
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d09b      	beq.n	8006cc8 <HAL_RCC_OscConfig+0xbf4>
 8006d90:	e0a0      	b.n	8006ed4 <HAL_RCC_OscConfig+0xe00>
 8006d92:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006d96:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006d9a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d9c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	fa93 f2a3 	rbit	r2, r3
 8006da6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006daa:	601a      	str	r2, [r3, #0]
  return result;
 8006dac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006db0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006db2:	fab3 f383 	clz	r3, r3
 8006db6:	b2db      	uxtb	r3, r3
 8006db8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006dbc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006dc0:	009b      	lsls	r3, r3, #2
 8006dc2:	461a      	mov	r2, r3
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006dc8:	f7fb fb4a 	bl	8002460 <HAL_GetTick>
 8006dcc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006dd0:	e009      	b.n	8006de6 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006dd2:	f7fb fb45 	bl	8002460 <HAL_GetTick>
 8006dd6:	4602      	mov	r2, r0
 8006dd8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006ddc:	1ad3      	subs	r3, r2, r3
 8006dde:	2b02      	cmp	r3, #2
 8006de0:	d901      	bls.n	8006de6 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8006de2:	2303      	movs	r3, #3
 8006de4:	e077      	b.n	8006ed6 <HAL_RCC_OscConfig+0xe02>
 8006de6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006dea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006dee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006df0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	fa93 f2a3 	rbit	r2, r3
 8006dfa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006dfe:	601a      	str	r2, [r3, #0]
  return result;
 8006e00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006e04:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006e06:	fab3 f383 	clz	r3, r3
 8006e0a:	b2db      	uxtb	r3, r3
 8006e0c:	095b      	lsrs	r3, r3, #5
 8006e0e:	b2db      	uxtb	r3, r3
 8006e10:	f043 0301 	orr.w	r3, r3, #1
 8006e14:	b2db      	uxtb	r3, r3
 8006e16:	2b01      	cmp	r3, #1
 8006e18:	d102      	bne.n	8006e20 <HAL_RCC_OscConfig+0xd4c>
 8006e1a:	4b31      	ldr	r3, [pc, #196]	; (8006ee0 <HAL_RCC_OscConfig+0xe0c>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	e01b      	b.n	8006e58 <HAL_RCC_OscConfig+0xd84>
 8006e20:	f107 0320 	add.w	r3, r7, #32
 8006e24:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006e28:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e2a:	f107 0320 	add.w	r3, r7, #32
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	fa93 f2a3 	rbit	r2, r3
 8006e34:	f107 031c 	add.w	r3, r7, #28
 8006e38:	601a      	str	r2, [r3, #0]
 8006e3a:	f107 0318 	add.w	r3, r7, #24
 8006e3e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006e42:	601a      	str	r2, [r3, #0]
 8006e44:	f107 0318 	add.w	r3, r7, #24
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	fa93 f2a3 	rbit	r2, r3
 8006e4e:	f107 0314 	add.w	r3, r7, #20
 8006e52:	601a      	str	r2, [r3, #0]
 8006e54:	4b22      	ldr	r3, [pc, #136]	; (8006ee0 <HAL_RCC_OscConfig+0xe0c>)
 8006e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e58:	f107 0210 	add.w	r2, r7, #16
 8006e5c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8006e60:	6011      	str	r1, [r2, #0]
 8006e62:	f107 0210 	add.w	r2, r7, #16
 8006e66:	6812      	ldr	r2, [r2, #0]
 8006e68:	fa92 f1a2 	rbit	r1, r2
 8006e6c:	f107 020c 	add.w	r2, r7, #12
 8006e70:	6011      	str	r1, [r2, #0]
  return result;
 8006e72:	f107 020c 	add.w	r2, r7, #12
 8006e76:	6812      	ldr	r2, [r2, #0]
 8006e78:	fab2 f282 	clz	r2, r2
 8006e7c:	b2d2      	uxtb	r2, r2
 8006e7e:	f042 0220 	orr.w	r2, r2, #32
 8006e82:	b2d2      	uxtb	r2, r2
 8006e84:	f002 021f 	and.w	r2, r2, #31
 8006e88:	2101      	movs	r1, #1
 8006e8a:	fa01 f202 	lsl.w	r2, r1, r2
 8006e8e:	4013      	ands	r3, r2
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d19e      	bne.n	8006dd2 <HAL_RCC_OscConfig+0xcfe>
 8006e94:	e01e      	b.n	8006ed4 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006e96:	1d3b      	adds	r3, r7, #4
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	69db      	ldr	r3, [r3, #28]
 8006e9c:	2b01      	cmp	r3, #1
 8006e9e:	d101      	bne.n	8006ea4 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8006ea0:	2301      	movs	r3, #1
 8006ea2:	e018      	b.n	8006ed6 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006ea4:	4b0e      	ldr	r3, [pc, #56]	; (8006ee0 <HAL_RCC_OscConfig+0xe0c>)
 8006ea6:	685b      	ldr	r3, [r3, #4]
 8006ea8:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8006eac:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8006eb0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006eb4:	1d3b      	adds	r3, r7, #4
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	6a1b      	ldr	r3, [r3, #32]
 8006eba:	429a      	cmp	r2, r3
 8006ebc:	d108      	bne.n	8006ed0 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8006ebe:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8006ec2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006ec6:	1d3b      	adds	r3, r7, #4
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8006ecc:	429a      	cmp	r2, r3
 8006ece:	d001      	beq.n	8006ed4 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8006ed0:	2301      	movs	r3, #1
 8006ed2:	e000      	b.n	8006ed6 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8006ed4:	2300      	movs	r3, #0
}
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8006edc:	46bd      	mov	sp, r7
 8006ede:	bd80      	pop	{r7, pc}
 8006ee0:	40021000 	.word	0x40021000

08006ee4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b09e      	sub	sp, #120	; 0x78
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
 8006eec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8006eee:	2300      	movs	r3, #0
 8006ef0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d101      	bne.n	8006efc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006ef8:	2301      	movs	r3, #1
 8006efa:	e162      	b.n	80071c2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006efc:	4b90      	ldr	r3, [pc, #576]	; (8007140 <HAL_RCC_ClockConfig+0x25c>)
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f003 0307 	and.w	r3, r3, #7
 8006f04:	683a      	ldr	r2, [r7, #0]
 8006f06:	429a      	cmp	r2, r3
 8006f08:	d910      	bls.n	8006f2c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f0a:	4b8d      	ldr	r3, [pc, #564]	; (8007140 <HAL_RCC_ClockConfig+0x25c>)
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f023 0207 	bic.w	r2, r3, #7
 8006f12:	498b      	ldr	r1, [pc, #556]	; (8007140 <HAL_RCC_ClockConfig+0x25c>)
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	4313      	orrs	r3, r2
 8006f18:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f1a:	4b89      	ldr	r3, [pc, #548]	; (8007140 <HAL_RCC_ClockConfig+0x25c>)
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f003 0307 	and.w	r3, r3, #7
 8006f22:	683a      	ldr	r2, [r7, #0]
 8006f24:	429a      	cmp	r2, r3
 8006f26:	d001      	beq.n	8006f2c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006f28:	2301      	movs	r3, #1
 8006f2a:	e14a      	b.n	80071c2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f003 0302 	and.w	r3, r3, #2
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d008      	beq.n	8006f4a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006f38:	4b82      	ldr	r3, [pc, #520]	; (8007144 <HAL_RCC_ClockConfig+0x260>)
 8006f3a:	685b      	ldr	r3, [r3, #4]
 8006f3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	689b      	ldr	r3, [r3, #8]
 8006f44:	497f      	ldr	r1, [pc, #508]	; (8007144 <HAL_RCC_ClockConfig+0x260>)
 8006f46:	4313      	orrs	r3, r2
 8006f48:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f003 0301 	and.w	r3, r3, #1
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	f000 80dc 	beq.w	8007110 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	685b      	ldr	r3, [r3, #4]
 8006f5c:	2b01      	cmp	r3, #1
 8006f5e:	d13c      	bne.n	8006fda <HAL_RCC_ClockConfig+0xf6>
 8006f60:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006f64:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f66:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006f68:	fa93 f3a3 	rbit	r3, r3
 8006f6c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8006f6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f70:	fab3 f383 	clz	r3, r3
 8006f74:	b2db      	uxtb	r3, r3
 8006f76:	095b      	lsrs	r3, r3, #5
 8006f78:	b2db      	uxtb	r3, r3
 8006f7a:	f043 0301 	orr.w	r3, r3, #1
 8006f7e:	b2db      	uxtb	r3, r3
 8006f80:	2b01      	cmp	r3, #1
 8006f82:	d102      	bne.n	8006f8a <HAL_RCC_ClockConfig+0xa6>
 8006f84:	4b6f      	ldr	r3, [pc, #444]	; (8007144 <HAL_RCC_ClockConfig+0x260>)
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	e00f      	b.n	8006faa <HAL_RCC_ClockConfig+0xc6>
 8006f8a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006f8e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f90:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006f92:	fa93 f3a3 	rbit	r3, r3
 8006f96:	667b      	str	r3, [r7, #100]	; 0x64
 8006f98:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006f9c:	663b      	str	r3, [r7, #96]	; 0x60
 8006f9e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006fa0:	fa93 f3a3 	rbit	r3, r3
 8006fa4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006fa6:	4b67      	ldr	r3, [pc, #412]	; (8007144 <HAL_RCC_ClockConfig+0x260>)
 8006fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006faa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006fae:	65ba      	str	r2, [r7, #88]	; 0x58
 8006fb0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006fb2:	fa92 f2a2 	rbit	r2, r2
 8006fb6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8006fb8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006fba:	fab2 f282 	clz	r2, r2
 8006fbe:	b2d2      	uxtb	r2, r2
 8006fc0:	f042 0220 	orr.w	r2, r2, #32
 8006fc4:	b2d2      	uxtb	r2, r2
 8006fc6:	f002 021f 	and.w	r2, r2, #31
 8006fca:	2101      	movs	r1, #1
 8006fcc:	fa01 f202 	lsl.w	r2, r1, r2
 8006fd0:	4013      	ands	r3, r2
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d17b      	bne.n	80070ce <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8006fd6:	2301      	movs	r3, #1
 8006fd8:	e0f3      	b.n	80071c2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	685b      	ldr	r3, [r3, #4]
 8006fde:	2b02      	cmp	r3, #2
 8006fe0:	d13c      	bne.n	800705c <HAL_RCC_ClockConfig+0x178>
 8006fe2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006fe6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006fe8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006fea:	fa93 f3a3 	rbit	r3, r3
 8006fee:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8006ff0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006ff2:	fab3 f383 	clz	r3, r3
 8006ff6:	b2db      	uxtb	r3, r3
 8006ff8:	095b      	lsrs	r3, r3, #5
 8006ffa:	b2db      	uxtb	r3, r3
 8006ffc:	f043 0301 	orr.w	r3, r3, #1
 8007000:	b2db      	uxtb	r3, r3
 8007002:	2b01      	cmp	r3, #1
 8007004:	d102      	bne.n	800700c <HAL_RCC_ClockConfig+0x128>
 8007006:	4b4f      	ldr	r3, [pc, #316]	; (8007144 <HAL_RCC_ClockConfig+0x260>)
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	e00f      	b.n	800702c <HAL_RCC_ClockConfig+0x148>
 800700c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007010:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007012:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007014:	fa93 f3a3 	rbit	r3, r3
 8007018:	647b      	str	r3, [r7, #68]	; 0x44
 800701a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800701e:	643b      	str	r3, [r7, #64]	; 0x40
 8007020:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007022:	fa93 f3a3 	rbit	r3, r3
 8007026:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007028:	4b46      	ldr	r3, [pc, #280]	; (8007144 <HAL_RCC_ClockConfig+0x260>)
 800702a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800702c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007030:	63ba      	str	r2, [r7, #56]	; 0x38
 8007032:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007034:	fa92 f2a2 	rbit	r2, r2
 8007038:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800703a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800703c:	fab2 f282 	clz	r2, r2
 8007040:	b2d2      	uxtb	r2, r2
 8007042:	f042 0220 	orr.w	r2, r2, #32
 8007046:	b2d2      	uxtb	r2, r2
 8007048:	f002 021f 	and.w	r2, r2, #31
 800704c:	2101      	movs	r1, #1
 800704e:	fa01 f202 	lsl.w	r2, r1, r2
 8007052:	4013      	ands	r3, r2
 8007054:	2b00      	cmp	r3, #0
 8007056:	d13a      	bne.n	80070ce <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8007058:	2301      	movs	r3, #1
 800705a:	e0b2      	b.n	80071c2 <HAL_RCC_ClockConfig+0x2de>
 800705c:	2302      	movs	r3, #2
 800705e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007062:	fa93 f3a3 	rbit	r3, r3
 8007066:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8007068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800706a:	fab3 f383 	clz	r3, r3
 800706e:	b2db      	uxtb	r3, r3
 8007070:	095b      	lsrs	r3, r3, #5
 8007072:	b2db      	uxtb	r3, r3
 8007074:	f043 0301 	orr.w	r3, r3, #1
 8007078:	b2db      	uxtb	r3, r3
 800707a:	2b01      	cmp	r3, #1
 800707c:	d102      	bne.n	8007084 <HAL_RCC_ClockConfig+0x1a0>
 800707e:	4b31      	ldr	r3, [pc, #196]	; (8007144 <HAL_RCC_ClockConfig+0x260>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	e00d      	b.n	80070a0 <HAL_RCC_ClockConfig+0x1bc>
 8007084:	2302      	movs	r3, #2
 8007086:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800708a:	fa93 f3a3 	rbit	r3, r3
 800708e:	627b      	str	r3, [r7, #36]	; 0x24
 8007090:	2302      	movs	r3, #2
 8007092:	623b      	str	r3, [r7, #32]
 8007094:	6a3b      	ldr	r3, [r7, #32]
 8007096:	fa93 f3a3 	rbit	r3, r3
 800709a:	61fb      	str	r3, [r7, #28]
 800709c:	4b29      	ldr	r3, [pc, #164]	; (8007144 <HAL_RCC_ClockConfig+0x260>)
 800709e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070a0:	2202      	movs	r2, #2
 80070a2:	61ba      	str	r2, [r7, #24]
 80070a4:	69ba      	ldr	r2, [r7, #24]
 80070a6:	fa92 f2a2 	rbit	r2, r2
 80070aa:	617a      	str	r2, [r7, #20]
  return result;
 80070ac:	697a      	ldr	r2, [r7, #20]
 80070ae:	fab2 f282 	clz	r2, r2
 80070b2:	b2d2      	uxtb	r2, r2
 80070b4:	f042 0220 	orr.w	r2, r2, #32
 80070b8:	b2d2      	uxtb	r2, r2
 80070ba:	f002 021f 	and.w	r2, r2, #31
 80070be:	2101      	movs	r1, #1
 80070c0:	fa01 f202 	lsl.w	r2, r1, r2
 80070c4:	4013      	ands	r3, r2
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d101      	bne.n	80070ce <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80070ca:	2301      	movs	r3, #1
 80070cc:	e079      	b.n	80071c2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80070ce:	4b1d      	ldr	r3, [pc, #116]	; (8007144 <HAL_RCC_ClockConfig+0x260>)
 80070d0:	685b      	ldr	r3, [r3, #4]
 80070d2:	f023 0203 	bic.w	r2, r3, #3
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	685b      	ldr	r3, [r3, #4]
 80070da:	491a      	ldr	r1, [pc, #104]	; (8007144 <HAL_RCC_ClockConfig+0x260>)
 80070dc:	4313      	orrs	r3, r2
 80070de:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80070e0:	f7fb f9be 	bl	8002460 <HAL_GetTick>
 80070e4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80070e6:	e00a      	b.n	80070fe <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80070e8:	f7fb f9ba 	bl	8002460 <HAL_GetTick>
 80070ec:	4602      	mov	r2, r0
 80070ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80070f0:	1ad3      	subs	r3, r2, r3
 80070f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80070f6:	4293      	cmp	r3, r2
 80070f8:	d901      	bls.n	80070fe <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80070fa:	2303      	movs	r3, #3
 80070fc:	e061      	b.n	80071c2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80070fe:	4b11      	ldr	r3, [pc, #68]	; (8007144 <HAL_RCC_ClockConfig+0x260>)
 8007100:	685b      	ldr	r3, [r3, #4]
 8007102:	f003 020c 	and.w	r2, r3, #12
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	685b      	ldr	r3, [r3, #4]
 800710a:	009b      	lsls	r3, r3, #2
 800710c:	429a      	cmp	r2, r3
 800710e:	d1eb      	bne.n	80070e8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007110:	4b0b      	ldr	r3, [pc, #44]	; (8007140 <HAL_RCC_ClockConfig+0x25c>)
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f003 0307 	and.w	r3, r3, #7
 8007118:	683a      	ldr	r2, [r7, #0]
 800711a:	429a      	cmp	r2, r3
 800711c:	d214      	bcs.n	8007148 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800711e:	4b08      	ldr	r3, [pc, #32]	; (8007140 <HAL_RCC_ClockConfig+0x25c>)
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f023 0207 	bic.w	r2, r3, #7
 8007126:	4906      	ldr	r1, [pc, #24]	; (8007140 <HAL_RCC_ClockConfig+0x25c>)
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	4313      	orrs	r3, r2
 800712c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800712e:	4b04      	ldr	r3, [pc, #16]	; (8007140 <HAL_RCC_ClockConfig+0x25c>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f003 0307 	and.w	r3, r3, #7
 8007136:	683a      	ldr	r2, [r7, #0]
 8007138:	429a      	cmp	r2, r3
 800713a:	d005      	beq.n	8007148 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800713c:	2301      	movs	r3, #1
 800713e:	e040      	b.n	80071c2 <HAL_RCC_ClockConfig+0x2de>
 8007140:	40022000 	.word	0x40022000
 8007144:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f003 0304 	and.w	r3, r3, #4
 8007150:	2b00      	cmp	r3, #0
 8007152:	d008      	beq.n	8007166 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007154:	4b1d      	ldr	r3, [pc, #116]	; (80071cc <HAL_RCC_ClockConfig+0x2e8>)
 8007156:	685b      	ldr	r3, [r3, #4]
 8007158:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	68db      	ldr	r3, [r3, #12]
 8007160:	491a      	ldr	r1, [pc, #104]	; (80071cc <HAL_RCC_ClockConfig+0x2e8>)
 8007162:	4313      	orrs	r3, r2
 8007164:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f003 0308 	and.w	r3, r3, #8
 800716e:	2b00      	cmp	r3, #0
 8007170:	d009      	beq.n	8007186 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007172:	4b16      	ldr	r3, [pc, #88]	; (80071cc <HAL_RCC_ClockConfig+0x2e8>)
 8007174:	685b      	ldr	r3, [r3, #4]
 8007176:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	691b      	ldr	r3, [r3, #16]
 800717e:	00db      	lsls	r3, r3, #3
 8007180:	4912      	ldr	r1, [pc, #72]	; (80071cc <HAL_RCC_ClockConfig+0x2e8>)
 8007182:	4313      	orrs	r3, r2
 8007184:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8007186:	f000 f829 	bl	80071dc <HAL_RCC_GetSysClockFreq>
 800718a:	4601      	mov	r1, r0
 800718c:	4b0f      	ldr	r3, [pc, #60]	; (80071cc <HAL_RCC_ClockConfig+0x2e8>)
 800718e:	685b      	ldr	r3, [r3, #4]
 8007190:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007194:	22f0      	movs	r2, #240	; 0xf0
 8007196:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007198:	693a      	ldr	r2, [r7, #16]
 800719a:	fa92 f2a2 	rbit	r2, r2
 800719e:	60fa      	str	r2, [r7, #12]
  return result;
 80071a0:	68fa      	ldr	r2, [r7, #12]
 80071a2:	fab2 f282 	clz	r2, r2
 80071a6:	b2d2      	uxtb	r2, r2
 80071a8:	40d3      	lsrs	r3, r2
 80071aa:	4a09      	ldr	r2, [pc, #36]	; (80071d0 <HAL_RCC_ClockConfig+0x2ec>)
 80071ac:	5cd3      	ldrb	r3, [r2, r3]
 80071ae:	fa21 f303 	lsr.w	r3, r1, r3
 80071b2:	4a08      	ldr	r2, [pc, #32]	; (80071d4 <HAL_RCC_ClockConfig+0x2f0>)
 80071b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80071b6:	4b08      	ldr	r3, [pc, #32]	; (80071d8 <HAL_RCC_ClockConfig+0x2f4>)
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	4618      	mov	r0, r3
 80071bc:	f7fb f90c 	bl	80023d8 <HAL_InitTick>
  
  return HAL_OK;
 80071c0:	2300      	movs	r3, #0
}
 80071c2:	4618      	mov	r0, r3
 80071c4:	3778      	adds	r7, #120	; 0x78
 80071c6:	46bd      	mov	sp, r7
 80071c8:	bd80      	pop	{r7, pc}
 80071ca:	bf00      	nop
 80071cc:	40021000 	.word	0x40021000
 80071d0:	0800dfb8 	.word	0x0800dfb8
 80071d4:	20000028 	.word	0x20000028
 80071d8:	2000002c 	.word	0x2000002c

080071dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80071dc:	b480      	push	{r7}
 80071de:	b08b      	sub	sp, #44	; 0x2c
 80071e0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80071e2:	2300      	movs	r3, #0
 80071e4:	61fb      	str	r3, [r7, #28]
 80071e6:	2300      	movs	r3, #0
 80071e8:	61bb      	str	r3, [r7, #24]
 80071ea:	2300      	movs	r3, #0
 80071ec:	627b      	str	r3, [r7, #36]	; 0x24
 80071ee:	2300      	movs	r3, #0
 80071f0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80071f2:	2300      	movs	r3, #0
 80071f4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80071f6:	4b29      	ldr	r3, [pc, #164]	; (800729c <HAL_RCC_GetSysClockFreq+0xc0>)
 80071f8:	685b      	ldr	r3, [r3, #4]
 80071fa:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80071fc:	69fb      	ldr	r3, [r7, #28]
 80071fe:	f003 030c 	and.w	r3, r3, #12
 8007202:	2b04      	cmp	r3, #4
 8007204:	d002      	beq.n	800720c <HAL_RCC_GetSysClockFreq+0x30>
 8007206:	2b08      	cmp	r3, #8
 8007208:	d003      	beq.n	8007212 <HAL_RCC_GetSysClockFreq+0x36>
 800720a:	e03c      	b.n	8007286 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800720c:	4b24      	ldr	r3, [pc, #144]	; (80072a0 <HAL_RCC_GetSysClockFreq+0xc4>)
 800720e:	623b      	str	r3, [r7, #32]
      break;
 8007210:	e03c      	b.n	800728c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8007212:	69fb      	ldr	r3, [r7, #28]
 8007214:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8007218:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800721c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800721e:	68ba      	ldr	r2, [r7, #8]
 8007220:	fa92 f2a2 	rbit	r2, r2
 8007224:	607a      	str	r2, [r7, #4]
  return result;
 8007226:	687a      	ldr	r2, [r7, #4]
 8007228:	fab2 f282 	clz	r2, r2
 800722c:	b2d2      	uxtb	r2, r2
 800722e:	40d3      	lsrs	r3, r2
 8007230:	4a1c      	ldr	r2, [pc, #112]	; (80072a4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8007232:	5cd3      	ldrb	r3, [r2, r3]
 8007234:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8007236:	4b19      	ldr	r3, [pc, #100]	; (800729c <HAL_RCC_GetSysClockFreq+0xc0>)
 8007238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800723a:	f003 030f 	and.w	r3, r3, #15
 800723e:	220f      	movs	r2, #15
 8007240:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007242:	693a      	ldr	r2, [r7, #16]
 8007244:	fa92 f2a2 	rbit	r2, r2
 8007248:	60fa      	str	r2, [r7, #12]
  return result;
 800724a:	68fa      	ldr	r2, [r7, #12]
 800724c:	fab2 f282 	clz	r2, r2
 8007250:	b2d2      	uxtb	r2, r2
 8007252:	40d3      	lsrs	r3, r2
 8007254:	4a14      	ldr	r2, [pc, #80]	; (80072a8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8007256:	5cd3      	ldrb	r3, [r2, r3]
 8007258:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800725a:	69fb      	ldr	r3, [r7, #28]
 800725c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007260:	2b00      	cmp	r3, #0
 8007262:	d008      	beq.n	8007276 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8007264:	4a0e      	ldr	r2, [pc, #56]	; (80072a0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8007266:	69bb      	ldr	r3, [r7, #24]
 8007268:	fbb2 f2f3 	udiv	r2, r2, r3
 800726c:	697b      	ldr	r3, [r7, #20]
 800726e:	fb02 f303 	mul.w	r3, r2, r3
 8007272:	627b      	str	r3, [r7, #36]	; 0x24
 8007274:	e004      	b.n	8007280 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8007276:	697b      	ldr	r3, [r7, #20]
 8007278:	4a0c      	ldr	r2, [pc, #48]	; (80072ac <HAL_RCC_GetSysClockFreq+0xd0>)
 800727a:	fb02 f303 	mul.w	r3, r2, r3
 800727e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8007280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007282:	623b      	str	r3, [r7, #32]
      break;
 8007284:	e002      	b.n	800728c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007286:	4b06      	ldr	r3, [pc, #24]	; (80072a0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8007288:	623b      	str	r3, [r7, #32]
      break;
 800728a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800728c:	6a3b      	ldr	r3, [r7, #32]
}
 800728e:	4618      	mov	r0, r3
 8007290:	372c      	adds	r7, #44	; 0x2c
 8007292:	46bd      	mov	sp, r7
 8007294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007298:	4770      	bx	lr
 800729a:	bf00      	nop
 800729c:	40021000 	.word	0x40021000
 80072a0:	007a1200 	.word	0x007a1200
 80072a4:	0800dfd0 	.word	0x0800dfd0
 80072a8:	0800dfe0 	.word	0x0800dfe0
 80072ac:	003d0900 	.word	0x003d0900

080072b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80072b0:	b480      	push	{r7}
 80072b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80072b4:	4b03      	ldr	r3, [pc, #12]	; (80072c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80072b6:	681b      	ldr	r3, [r3, #0]
}
 80072b8:	4618      	mov	r0, r3
 80072ba:	46bd      	mov	sp, r7
 80072bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c0:	4770      	bx	lr
 80072c2:	bf00      	nop
 80072c4:	20000028 	.word	0x20000028

080072c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b082      	sub	sp, #8
 80072cc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80072ce:	f7ff ffef 	bl	80072b0 <HAL_RCC_GetHCLKFreq>
 80072d2:	4601      	mov	r1, r0
 80072d4:	4b0b      	ldr	r3, [pc, #44]	; (8007304 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80072d6:	685b      	ldr	r3, [r3, #4]
 80072d8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80072dc:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80072e0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80072e2:	687a      	ldr	r2, [r7, #4]
 80072e4:	fa92 f2a2 	rbit	r2, r2
 80072e8:	603a      	str	r2, [r7, #0]
  return result;
 80072ea:	683a      	ldr	r2, [r7, #0]
 80072ec:	fab2 f282 	clz	r2, r2
 80072f0:	b2d2      	uxtb	r2, r2
 80072f2:	40d3      	lsrs	r3, r2
 80072f4:	4a04      	ldr	r2, [pc, #16]	; (8007308 <HAL_RCC_GetPCLK1Freq+0x40>)
 80072f6:	5cd3      	ldrb	r3, [r2, r3]
 80072f8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80072fc:	4618      	mov	r0, r3
 80072fe:	3708      	adds	r7, #8
 8007300:	46bd      	mov	sp, r7
 8007302:	bd80      	pop	{r7, pc}
 8007304:	40021000 	.word	0x40021000
 8007308:	0800dfc8 	.word	0x0800dfc8

0800730c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b082      	sub	sp, #8
 8007310:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8007312:	f7ff ffcd 	bl	80072b0 <HAL_RCC_GetHCLKFreq>
 8007316:	4601      	mov	r1, r0
 8007318:	4b0b      	ldr	r3, [pc, #44]	; (8007348 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800731a:	685b      	ldr	r3, [r3, #4]
 800731c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8007320:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8007324:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007326:	687a      	ldr	r2, [r7, #4]
 8007328:	fa92 f2a2 	rbit	r2, r2
 800732c:	603a      	str	r2, [r7, #0]
  return result;
 800732e:	683a      	ldr	r2, [r7, #0]
 8007330:	fab2 f282 	clz	r2, r2
 8007334:	b2d2      	uxtb	r2, r2
 8007336:	40d3      	lsrs	r3, r2
 8007338:	4a04      	ldr	r2, [pc, #16]	; (800734c <HAL_RCC_GetPCLK2Freq+0x40>)
 800733a:	5cd3      	ldrb	r3, [r2, r3]
 800733c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8007340:	4618      	mov	r0, r3
 8007342:	3708      	adds	r7, #8
 8007344:	46bd      	mov	sp, r7
 8007346:	bd80      	pop	{r7, pc}
 8007348:	40021000 	.word	0x40021000
 800734c:	0800dfc8 	.word	0x0800dfc8

08007350 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007350:	b580      	push	{r7, lr}
 8007352:	b092      	sub	sp, #72	; 0x48
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007358:	2300      	movs	r3, #0
 800735a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800735c:	2300      	movs	r3, #0
 800735e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8007360:	2300      	movs	r3, #0
 8007362:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800736e:	2b00      	cmp	r3, #0
 8007370:	f000 80d4 	beq.w	800751c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007374:	4b4e      	ldr	r3, [pc, #312]	; (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007376:	69db      	ldr	r3, [r3, #28]
 8007378:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800737c:	2b00      	cmp	r3, #0
 800737e:	d10e      	bne.n	800739e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007380:	4b4b      	ldr	r3, [pc, #300]	; (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007382:	69db      	ldr	r3, [r3, #28]
 8007384:	4a4a      	ldr	r2, [pc, #296]	; (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007386:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800738a:	61d3      	str	r3, [r2, #28]
 800738c:	4b48      	ldr	r3, [pc, #288]	; (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800738e:	69db      	ldr	r3, [r3, #28]
 8007390:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007394:	60bb      	str	r3, [r7, #8]
 8007396:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007398:	2301      	movs	r3, #1
 800739a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800739e:	4b45      	ldr	r3, [pc, #276]	; (80074b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d118      	bne.n	80073dc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80073aa:	4b42      	ldr	r3, [pc, #264]	; (80074b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	4a41      	ldr	r2, [pc, #260]	; (80074b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80073b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80073b4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80073b6:	f7fb f853 	bl	8002460 <HAL_GetTick>
 80073ba:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80073bc:	e008      	b.n	80073d0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80073be:	f7fb f84f 	bl	8002460 <HAL_GetTick>
 80073c2:	4602      	mov	r2, r0
 80073c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073c6:	1ad3      	subs	r3, r2, r3
 80073c8:	2b64      	cmp	r3, #100	; 0x64
 80073ca:	d901      	bls.n	80073d0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80073cc:	2303      	movs	r3, #3
 80073ce:	e14b      	b.n	8007668 <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80073d0:	4b38      	ldr	r3, [pc, #224]	; (80074b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d0f0      	beq.n	80073be <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80073dc:	4b34      	ldr	r3, [pc, #208]	; (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80073de:	6a1b      	ldr	r3, [r3, #32]
 80073e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80073e4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80073e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	f000 8084 	beq.w	80074f6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	685b      	ldr	r3, [r3, #4]
 80073f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80073f6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80073f8:	429a      	cmp	r2, r3
 80073fa:	d07c      	beq.n	80074f6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80073fc:	4b2c      	ldr	r3, [pc, #176]	; (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80073fe:	6a1b      	ldr	r3, [r3, #32]
 8007400:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007404:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007406:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800740a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800740c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800740e:	fa93 f3a3 	rbit	r3, r3
 8007412:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8007414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007416:	fab3 f383 	clz	r3, r3
 800741a:	b2db      	uxtb	r3, r3
 800741c:	461a      	mov	r2, r3
 800741e:	4b26      	ldr	r3, [pc, #152]	; (80074b8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007420:	4413      	add	r3, r2
 8007422:	009b      	lsls	r3, r3, #2
 8007424:	461a      	mov	r2, r3
 8007426:	2301      	movs	r3, #1
 8007428:	6013      	str	r3, [r2, #0]
 800742a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800742e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007432:	fa93 f3a3 	rbit	r3, r3
 8007436:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8007438:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800743a:	fab3 f383 	clz	r3, r3
 800743e:	b2db      	uxtb	r3, r3
 8007440:	461a      	mov	r2, r3
 8007442:	4b1d      	ldr	r3, [pc, #116]	; (80074b8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007444:	4413      	add	r3, r2
 8007446:	009b      	lsls	r3, r3, #2
 8007448:	461a      	mov	r2, r3
 800744a:	2300      	movs	r3, #0
 800744c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800744e:	4a18      	ldr	r2, [pc, #96]	; (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007450:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007452:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8007454:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007456:	f003 0301 	and.w	r3, r3, #1
 800745a:	2b00      	cmp	r3, #0
 800745c:	d04b      	beq.n	80074f6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800745e:	f7fa ffff 	bl	8002460 <HAL_GetTick>
 8007462:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007464:	e00a      	b.n	800747c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007466:	f7fa fffb 	bl	8002460 <HAL_GetTick>
 800746a:	4602      	mov	r2, r0
 800746c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800746e:	1ad3      	subs	r3, r2, r3
 8007470:	f241 3288 	movw	r2, #5000	; 0x1388
 8007474:	4293      	cmp	r3, r2
 8007476:	d901      	bls.n	800747c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8007478:	2303      	movs	r3, #3
 800747a:	e0f5      	b.n	8007668 <HAL_RCCEx_PeriphCLKConfig+0x318>
 800747c:	2302      	movs	r3, #2
 800747e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007482:	fa93 f3a3 	rbit	r3, r3
 8007486:	627b      	str	r3, [r7, #36]	; 0x24
 8007488:	2302      	movs	r3, #2
 800748a:	623b      	str	r3, [r7, #32]
 800748c:	6a3b      	ldr	r3, [r7, #32]
 800748e:	fa93 f3a3 	rbit	r3, r3
 8007492:	61fb      	str	r3, [r7, #28]
  return result;
 8007494:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007496:	fab3 f383 	clz	r3, r3
 800749a:	b2db      	uxtb	r3, r3
 800749c:	095b      	lsrs	r3, r3, #5
 800749e:	b2db      	uxtb	r3, r3
 80074a0:	f043 0302 	orr.w	r3, r3, #2
 80074a4:	b2db      	uxtb	r3, r3
 80074a6:	2b02      	cmp	r3, #2
 80074a8:	d108      	bne.n	80074bc <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80074aa:	4b01      	ldr	r3, [pc, #4]	; (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80074ac:	6a1b      	ldr	r3, [r3, #32]
 80074ae:	e00d      	b.n	80074cc <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80074b0:	40021000 	.word	0x40021000
 80074b4:	40007000 	.word	0x40007000
 80074b8:	10908100 	.word	0x10908100
 80074bc:	2302      	movs	r3, #2
 80074be:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80074c0:	69bb      	ldr	r3, [r7, #24]
 80074c2:	fa93 f3a3 	rbit	r3, r3
 80074c6:	617b      	str	r3, [r7, #20]
 80074c8:	4b69      	ldr	r3, [pc, #420]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80074ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074cc:	2202      	movs	r2, #2
 80074ce:	613a      	str	r2, [r7, #16]
 80074d0:	693a      	ldr	r2, [r7, #16]
 80074d2:	fa92 f2a2 	rbit	r2, r2
 80074d6:	60fa      	str	r2, [r7, #12]
  return result;
 80074d8:	68fa      	ldr	r2, [r7, #12]
 80074da:	fab2 f282 	clz	r2, r2
 80074de:	b2d2      	uxtb	r2, r2
 80074e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80074e4:	b2d2      	uxtb	r2, r2
 80074e6:	f002 021f 	and.w	r2, r2, #31
 80074ea:	2101      	movs	r1, #1
 80074ec:	fa01 f202 	lsl.w	r2, r1, r2
 80074f0:	4013      	ands	r3, r2
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d0b7      	beq.n	8007466 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80074f6:	4b5e      	ldr	r3, [pc, #376]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80074f8:	6a1b      	ldr	r3, [r3, #32]
 80074fa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	685b      	ldr	r3, [r3, #4]
 8007502:	495b      	ldr	r1, [pc, #364]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8007504:	4313      	orrs	r3, r2
 8007506:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8007508:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800750c:	2b01      	cmp	r3, #1
 800750e:	d105      	bne.n	800751c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007510:	4b57      	ldr	r3, [pc, #348]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8007512:	69db      	ldr	r3, [r3, #28]
 8007514:	4a56      	ldr	r2, [pc, #344]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8007516:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800751a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f003 0301 	and.w	r3, r3, #1
 8007524:	2b00      	cmp	r3, #0
 8007526:	d008      	beq.n	800753a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007528:	4b51      	ldr	r3, [pc, #324]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800752a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800752c:	f023 0203 	bic.w	r2, r3, #3
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	689b      	ldr	r3, [r3, #8]
 8007534:	494e      	ldr	r1, [pc, #312]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8007536:	4313      	orrs	r3, r2
 8007538:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	f003 0320 	and.w	r3, r3, #32
 8007542:	2b00      	cmp	r3, #0
 8007544:	d008      	beq.n	8007558 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007546:	4b4a      	ldr	r3, [pc, #296]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8007548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800754a:	f023 0210 	bic.w	r2, r3, #16
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	68db      	ldr	r3, [r3, #12]
 8007552:	4947      	ldr	r1, [pc, #284]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8007554:	4313      	orrs	r3, r2
 8007556:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007560:	2b00      	cmp	r3, #0
 8007562:	d008      	beq.n	8007576 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8007564:	4b42      	ldr	r3, [pc, #264]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8007566:	685b      	ldr	r3, [r3, #4]
 8007568:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007570:	493f      	ldr	r1, [pc, #252]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8007572:	4313      	orrs	r3, r2
 8007574:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800757e:	2b00      	cmp	r3, #0
 8007580:	d008      	beq.n	8007594 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007582:	4b3b      	ldr	r3, [pc, #236]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8007584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007586:	f023 0220 	bic.w	r2, r3, #32
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	691b      	ldr	r3, [r3, #16]
 800758e:	4938      	ldr	r1, [pc, #224]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8007590:	4313      	orrs	r3, r2
 8007592:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800759c:	2b00      	cmp	r3, #0
 800759e:	d008      	beq.n	80075b2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80075a0:	4b33      	ldr	r3, [pc, #204]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80075a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075a4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	695b      	ldr	r3, [r3, #20]
 80075ac:	4930      	ldr	r1, [pc, #192]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80075ae:	4313      	orrs	r3, r2
 80075b0:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d008      	beq.n	80075d0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80075be:	4b2c      	ldr	r3, [pc, #176]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80075c0:	685b      	ldr	r3, [r3, #4]
 80075c2:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	69db      	ldr	r3, [r3, #28]
 80075ca:	4929      	ldr	r1, [pc, #164]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80075cc:	4313      	orrs	r3, r2
 80075ce:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d008      	beq.n	80075ee <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 80075dc:	4b24      	ldr	r3, [pc, #144]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80075de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075e0:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	699b      	ldr	r3, [r3, #24]
 80075e8:	4921      	ldr	r1, [pc, #132]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80075ea:	4313      	orrs	r3, r2
 80075ec:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d008      	beq.n	800760c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80075fa:	4b1d      	ldr	r3, [pc, #116]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80075fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075fe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	6a1b      	ldr	r3, [r3, #32]
 8007606:	491a      	ldr	r1, [pc, #104]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8007608:	4313      	orrs	r3, r2
 800760a:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007614:	2b00      	cmp	r3, #0
 8007616:	d008      	beq.n	800762a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8007618:	4b15      	ldr	r3, [pc, #84]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800761a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800761c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007624:	4912      	ldr	r1, [pc, #72]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8007626:	4313      	orrs	r3, r2
 8007628:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007632:	2b00      	cmp	r3, #0
 8007634:	d008      	beq.n	8007648 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8007636:	4b0e      	ldr	r3, [pc, #56]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8007638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800763a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007642:	490b      	ldr	r1, [pc, #44]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8007644:	4313      	orrs	r3, r2
 8007646:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007650:	2b00      	cmp	r3, #0
 8007652:	d008      	beq.n	8007666 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8007654:	4b06      	ldr	r3, [pc, #24]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8007656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007658:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007660:	4903      	ldr	r1, [pc, #12]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8007662:	4313      	orrs	r3, r2
 8007664:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8007666:	2300      	movs	r3, #0
}
 8007668:	4618      	mov	r0, r3
 800766a:	3748      	adds	r7, #72	; 0x48
 800766c:	46bd      	mov	sp, r7
 800766e:	bd80      	pop	{r7, pc}
 8007670:	40021000 	.word	0x40021000

08007674 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007674:	b580      	push	{r7, lr}
 8007676:	b082      	sub	sp, #8
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d101      	bne.n	8007686 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007682:	2301      	movs	r3, #1
 8007684:	e049      	b.n	800771a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800768c:	b2db      	uxtb	r3, r3
 800768e:	2b00      	cmp	r3, #0
 8007690:	d106      	bne.n	80076a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	2200      	movs	r2, #0
 8007696:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800769a:	6878      	ldr	r0, [r7, #4]
 800769c:	f7fa fcf0 	bl	8002080 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2202      	movs	r2, #2
 80076a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681a      	ldr	r2, [r3, #0]
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	3304      	adds	r3, #4
 80076b0:	4619      	mov	r1, r3
 80076b2:	4610      	mov	r0, r2
 80076b4:	f000 fdd4 	bl	8008260 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2201      	movs	r2, #1
 80076bc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2201      	movs	r2, #1
 80076c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2201      	movs	r2, #1
 80076cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2201      	movs	r2, #1
 80076d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2201      	movs	r2, #1
 80076dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2201      	movs	r2, #1
 80076e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2201      	movs	r2, #1
 80076ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2201      	movs	r2, #1
 80076f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2201      	movs	r2, #1
 80076fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2201      	movs	r2, #1
 8007704:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2201      	movs	r2, #1
 800770c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2201      	movs	r2, #1
 8007714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007718:	2300      	movs	r3, #0
}
 800771a:	4618      	mov	r0, r3
 800771c:	3708      	adds	r7, #8
 800771e:	46bd      	mov	sp, r7
 8007720:	bd80      	pop	{r7, pc}

08007722 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007722:	b580      	push	{r7, lr}
 8007724:	b082      	sub	sp, #8
 8007726:	af00      	add	r7, sp, #0
 8007728:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d101      	bne.n	8007734 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007730:	2301      	movs	r3, #1
 8007732:	e049      	b.n	80077c8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800773a:	b2db      	uxtb	r3, r3
 800773c:	2b00      	cmp	r3, #0
 800773e:	d106      	bne.n	800774e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2200      	movs	r2, #0
 8007744:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007748:	6878      	ldr	r0, [r7, #4]
 800774a:	f000 f841 	bl	80077d0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	2202      	movs	r2, #2
 8007752:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681a      	ldr	r2, [r3, #0]
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	3304      	adds	r3, #4
 800775e:	4619      	mov	r1, r3
 8007760:	4610      	mov	r0, r2
 8007762:	f000 fd7d 	bl	8008260 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2201      	movs	r2, #1
 800776a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2201      	movs	r2, #1
 8007772:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2201      	movs	r2, #1
 800777a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	2201      	movs	r2, #1
 8007782:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	2201      	movs	r2, #1
 800778a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2201      	movs	r2, #1
 8007792:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	2201      	movs	r2, #1
 800779a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2201      	movs	r2, #1
 80077a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2201      	movs	r2, #1
 80077aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2201      	movs	r2, #1
 80077b2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2201      	movs	r2, #1
 80077ba:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2201      	movs	r2, #1
 80077c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80077c6:	2300      	movs	r3, #0
}
 80077c8:	4618      	mov	r0, r3
 80077ca:	3708      	adds	r7, #8
 80077cc:	46bd      	mov	sp, r7
 80077ce:	bd80      	pop	{r7, pc}

080077d0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80077d0:	b480      	push	{r7}
 80077d2:	b083      	sub	sp, #12
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80077d8:	bf00      	nop
 80077da:	370c      	adds	r7, #12
 80077dc:	46bd      	mov	sp, r7
 80077de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e2:	4770      	bx	lr

080077e4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b084      	sub	sp, #16
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
 80077ec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d109      	bne.n	8007808 <HAL_TIM_PWM_Start+0x24>
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80077fa:	b2db      	uxtb	r3, r3
 80077fc:	2b01      	cmp	r3, #1
 80077fe:	bf14      	ite	ne
 8007800:	2301      	movne	r3, #1
 8007802:	2300      	moveq	r3, #0
 8007804:	b2db      	uxtb	r3, r3
 8007806:	e03c      	b.n	8007882 <HAL_TIM_PWM_Start+0x9e>
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	2b04      	cmp	r3, #4
 800780c:	d109      	bne.n	8007822 <HAL_TIM_PWM_Start+0x3e>
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007814:	b2db      	uxtb	r3, r3
 8007816:	2b01      	cmp	r3, #1
 8007818:	bf14      	ite	ne
 800781a:	2301      	movne	r3, #1
 800781c:	2300      	moveq	r3, #0
 800781e:	b2db      	uxtb	r3, r3
 8007820:	e02f      	b.n	8007882 <HAL_TIM_PWM_Start+0x9e>
 8007822:	683b      	ldr	r3, [r7, #0]
 8007824:	2b08      	cmp	r3, #8
 8007826:	d109      	bne.n	800783c <HAL_TIM_PWM_Start+0x58>
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800782e:	b2db      	uxtb	r3, r3
 8007830:	2b01      	cmp	r3, #1
 8007832:	bf14      	ite	ne
 8007834:	2301      	movne	r3, #1
 8007836:	2300      	moveq	r3, #0
 8007838:	b2db      	uxtb	r3, r3
 800783a:	e022      	b.n	8007882 <HAL_TIM_PWM_Start+0x9e>
 800783c:	683b      	ldr	r3, [r7, #0]
 800783e:	2b0c      	cmp	r3, #12
 8007840:	d109      	bne.n	8007856 <HAL_TIM_PWM_Start+0x72>
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007848:	b2db      	uxtb	r3, r3
 800784a:	2b01      	cmp	r3, #1
 800784c:	bf14      	ite	ne
 800784e:	2301      	movne	r3, #1
 8007850:	2300      	moveq	r3, #0
 8007852:	b2db      	uxtb	r3, r3
 8007854:	e015      	b.n	8007882 <HAL_TIM_PWM_Start+0x9e>
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	2b10      	cmp	r3, #16
 800785a:	d109      	bne.n	8007870 <HAL_TIM_PWM_Start+0x8c>
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007862:	b2db      	uxtb	r3, r3
 8007864:	2b01      	cmp	r3, #1
 8007866:	bf14      	ite	ne
 8007868:	2301      	movne	r3, #1
 800786a:	2300      	moveq	r3, #0
 800786c:	b2db      	uxtb	r3, r3
 800786e:	e008      	b.n	8007882 <HAL_TIM_PWM_Start+0x9e>
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007876:	b2db      	uxtb	r3, r3
 8007878:	2b01      	cmp	r3, #1
 800787a:	bf14      	ite	ne
 800787c:	2301      	movne	r3, #1
 800787e:	2300      	moveq	r3, #0
 8007880:	b2db      	uxtb	r3, r3
 8007882:	2b00      	cmp	r3, #0
 8007884:	d001      	beq.n	800788a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007886:	2301      	movs	r3, #1
 8007888:	e083      	b.n	8007992 <HAL_TIM_PWM_Start+0x1ae>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800788a:	683b      	ldr	r3, [r7, #0]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d104      	bne.n	800789a <HAL_TIM_PWM_Start+0xb6>
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2202      	movs	r2, #2
 8007894:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007898:	e023      	b.n	80078e2 <HAL_TIM_PWM_Start+0xfe>
 800789a:	683b      	ldr	r3, [r7, #0]
 800789c:	2b04      	cmp	r3, #4
 800789e:	d104      	bne.n	80078aa <HAL_TIM_PWM_Start+0xc6>
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2202      	movs	r2, #2
 80078a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80078a8:	e01b      	b.n	80078e2 <HAL_TIM_PWM_Start+0xfe>
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	2b08      	cmp	r3, #8
 80078ae:	d104      	bne.n	80078ba <HAL_TIM_PWM_Start+0xd6>
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2202      	movs	r2, #2
 80078b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80078b8:	e013      	b.n	80078e2 <HAL_TIM_PWM_Start+0xfe>
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	2b0c      	cmp	r3, #12
 80078be:	d104      	bne.n	80078ca <HAL_TIM_PWM_Start+0xe6>
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2202      	movs	r2, #2
 80078c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80078c8:	e00b      	b.n	80078e2 <HAL_TIM_PWM_Start+0xfe>
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	2b10      	cmp	r3, #16
 80078ce:	d104      	bne.n	80078da <HAL_TIM_PWM_Start+0xf6>
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2202      	movs	r2, #2
 80078d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80078d8:	e003      	b.n	80078e2 <HAL_TIM_PWM_Start+0xfe>
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	2202      	movs	r2, #2
 80078de:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	2201      	movs	r2, #1
 80078e8:	6839      	ldr	r1, [r7, #0]
 80078ea:	4618      	mov	r0, r3
 80078ec:	f001 f866 	bl	80089bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	4a29      	ldr	r2, [pc, #164]	; (800799c <HAL_TIM_PWM_Start+0x1b8>)
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d00e      	beq.n	8007918 <HAL_TIM_PWM_Start+0x134>
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	4a28      	ldr	r2, [pc, #160]	; (80079a0 <HAL_TIM_PWM_Start+0x1bc>)
 8007900:	4293      	cmp	r3, r2
 8007902:	d009      	beq.n	8007918 <HAL_TIM_PWM_Start+0x134>
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	4a26      	ldr	r2, [pc, #152]	; (80079a4 <HAL_TIM_PWM_Start+0x1c0>)
 800790a:	4293      	cmp	r3, r2
 800790c:	d004      	beq.n	8007918 <HAL_TIM_PWM_Start+0x134>
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	4a25      	ldr	r2, [pc, #148]	; (80079a8 <HAL_TIM_PWM_Start+0x1c4>)
 8007914:	4293      	cmp	r3, r2
 8007916:	d101      	bne.n	800791c <HAL_TIM_PWM_Start+0x138>
 8007918:	2301      	movs	r3, #1
 800791a:	e000      	b.n	800791e <HAL_TIM_PWM_Start+0x13a>
 800791c:	2300      	movs	r3, #0
 800791e:	2b00      	cmp	r3, #0
 8007920:	d007      	beq.n	8007932 <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007930:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	4a19      	ldr	r2, [pc, #100]	; (800799c <HAL_TIM_PWM_Start+0x1b8>)
 8007938:	4293      	cmp	r3, r2
 800793a:	d009      	beq.n	8007950 <HAL_TIM_PWM_Start+0x16c>
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007944:	d004      	beq.n	8007950 <HAL_TIM_PWM_Start+0x16c>
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	4a15      	ldr	r2, [pc, #84]	; (80079a0 <HAL_TIM_PWM_Start+0x1bc>)
 800794c:	4293      	cmp	r3, r2
 800794e:	d115      	bne.n	800797c <HAL_TIM_PWM_Start+0x198>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	689a      	ldr	r2, [r3, #8]
 8007956:	4b15      	ldr	r3, [pc, #84]	; (80079ac <HAL_TIM_PWM_Start+0x1c8>)
 8007958:	4013      	ands	r3, r2
 800795a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	2b06      	cmp	r3, #6
 8007960:	d015      	beq.n	800798e <HAL_TIM_PWM_Start+0x1aa>
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007968:	d011      	beq.n	800798e <HAL_TIM_PWM_Start+0x1aa>
    {
      __HAL_TIM_ENABLE(htim);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	681a      	ldr	r2, [r3, #0]
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	f042 0201 	orr.w	r2, r2, #1
 8007978:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800797a:	e008      	b.n	800798e <HAL_TIM_PWM_Start+0x1aa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	681a      	ldr	r2, [r3, #0]
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	f042 0201 	orr.w	r2, r2, #1
 800798a:	601a      	str	r2, [r3, #0]
 800798c:	e000      	b.n	8007990 <HAL_TIM_PWM_Start+0x1ac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800798e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007990:	2300      	movs	r3, #0
}
 8007992:	4618      	mov	r0, r3
 8007994:	3710      	adds	r7, #16
 8007996:	46bd      	mov	sp, r7
 8007998:	bd80      	pop	{r7, pc}
 800799a:	bf00      	nop
 800799c:	40012c00 	.word	0x40012c00
 80079a0:	40014000 	.word	0x40014000
 80079a4:	40014400 	.word	0x40014400
 80079a8:	40014800 	.word	0x40014800
 80079ac:	00010007 	.word	0x00010007

080079b0 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b084      	sub	sp, #16
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
 80079b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80079ba:	2300      	movs	r3, #0
 80079bc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80079be:	683b      	ldr	r3, [r7, #0]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d109      	bne.n	80079d8 <HAL_TIM_PWM_Start_IT+0x28>
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80079ca:	b2db      	uxtb	r3, r3
 80079cc:	2b01      	cmp	r3, #1
 80079ce:	bf14      	ite	ne
 80079d0:	2301      	movne	r3, #1
 80079d2:	2300      	moveq	r3, #0
 80079d4:	b2db      	uxtb	r3, r3
 80079d6:	e03c      	b.n	8007a52 <HAL_TIM_PWM_Start_IT+0xa2>
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	2b04      	cmp	r3, #4
 80079dc:	d109      	bne.n	80079f2 <HAL_TIM_PWM_Start_IT+0x42>
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80079e4:	b2db      	uxtb	r3, r3
 80079e6:	2b01      	cmp	r3, #1
 80079e8:	bf14      	ite	ne
 80079ea:	2301      	movne	r3, #1
 80079ec:	2300      	moveq	r3, #0
 80079ee:	b2db      	uxtb	r3, r3
 80079f0:	e02f      	b.n	8007a52 <HAL_TIM_PWM_Start_IT+0xa2>
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	2b08      	cmp	r3, #8
 80079f6:	d109      	bne.n	8007a0c <HAL_TIM_PWM_Start_IT+0x5c>
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80079fe:	b2db      	uxtb	r3, r3
 8007a00:	2b01      	cmp	r3, #1
 8007a02:	bf14      	ite	ne
 8007a04:	2301      	movne	r3, #1
 8007a06:	2300      	moveq	r3, #0
 8007a08:	b2db      	uxtb	r3, r3
 8007a0a:	e022      	b.n	8007a52 <HAL_TIM_PWM_Start_IT+0xa2>
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	2b0c      	cmp	r3, #12
 8007a10:	d109      	bne.n	8007a26 <HAL_TIM_PWM_Start_IT+0x76>
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007a18:	b2db      	uxtb	r3, r3
 8007a1a:	2b01      	cmp	r3, #1
 8007a1c:	bf14      	ite	ne
 8007a1e:	2301      	movne	r3, #1
 8007a20:	2300      	moveq	r3, #0
 8007a22:	b2db      	uxtb	r3, r3
 8007a24:	e015      	b.n	8007a52 <HAL_TIM_PWM_Start_IT+0xa2>
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	2b10      	cmp	r3, #16
 8007a2a:	d109      	bne.n	8007a40 <HAL_TIM_PWM_Start_IT+0x90>
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007a32:	b2db      	uxtb	r3, r3
 8007a34:	2b01      	cmp	r3, #1
 8007a36:	bf14      	ite	ne
 8007a38:	2301      	movne	r3, #1
 8007a3a:	2300      	moveq	r3, #0
 8007a3c:	b2db      	uxtb	r3, r3
 8007a3e:	e008      	b.n	8007a52 <HAL_TIM_PWM_Start_IT+0xa2>
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007a46:	b2db      	uxtb	r3, r3
 8007a48:	2b01      	cmp	r3, #1
 8007a4a:	bf14      	ite	ne
 8007a4c:	2301      	movne	r3, #1
 8007a4e:	2300      	moveq	r3, #0
 8007a50:	b2db      	uxtb	r3, r3
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d001      	beq.n	8007a5a <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 8007a56:	2301      	movs	r3, #1
 8007a58:	e0ce      	b.n	8007bf8 <HAL_TIM_PWM_Start_IT+0x248>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d104      	bne.n	8007a6a <HAL_TIM_PWM_Start_IT+0xba>
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2202      	movs	r2, #2
 8007a64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007a68:	e023      	b.n	8007ab2 <HAL_TIM_PWM_Start_IT+0x102>
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	2b04      	cmp	r3, #4
 8007a6e:	d104      	bne.n	8007a7a <HAL_TIM_PWM_Start_IT+0xca>
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2202      	movs	r2, #2
 8007a74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007a78:	e01b      	b.n	8007ab2 <HAL_TIM_PWM_Start_IT+0x102>
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	2b08      	cmp	r3, #8
 8007a7e:	d104      	bne.n	8007a8a <HAL_TIM_PWM_Start_IT+0xda>
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2202      	movs	r2, #2
 8007a84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007a88:	e013      	b.n	8007ab2 <HAL_TIM_PWM_Start_IT+0x102>
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	2b0c      	cmp	r3, #12
 8007a8e:	d104      	bne.n	8007a9a <HAL_TIM_PWM_Start_IT+0xea>
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2202      	movs	r2, #2
 8007a94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007a98:	e00b      	b.n	8007ab2 <HAL_TIM_PWM_Start_IT+0x102>
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	2b10      	cmp	r3, #16
 8007a9e:	d104      	bne.n	8007aaa <HAL_TIM_PWM_Start_IT+0xfa>
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2202      	movs	r2, #2
 8007aa4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007aa8:	e003      	b.n	8007ab2 <HAL_TIM_PWM_Start_IT+0x102>
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2202      	movs	r2, #2
 8007aae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	2b0c      	cmp	r3, #12
 8007ab6:	d841      	bhi.n	8007b3c <HAL_TIM_PWM_Start_IT+0x18c>
 8007ab8:	a201      	add	r2, pc, #4	; (adr r2, 8007ac0 <HAL_TIM_PWM_Start_IT+0x110>)
 8007aba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007abe:	bf00      	nop
 8007ac0:	08007af5 	.word	0x08007af5
 8007ac4:	08007b3d 	.word	0x08007b3d
 8007ac8:	08007b3d 	.word	0x08007b3d
 8007acc:	08007b3d 	.word	0x08007b3d
 8007ad0:	08007b07 	.word	0x08007b07
 8007ad4:	08007b3d 	.word	0x08007b3d
 8007ad8:	08007b3d 	.word	0x08007b3d
 8007adc:	08007b3d 	.word	0x08007b3d
 8007ae0:	08007b19 	.word	0x08007b19
 8007ae4:	08007b3d 	.word	0x08007b3d
 8007ae8:	08007b3d 	.word	0x08007b3d
 8007aec:	08007b3d 	.word	0x08007b3d
 8007af0:	08007b2b 	.word	0x08007b2b
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	68da      	ldr	r2, [r3, #12]
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	f042 0202 	orr.w	r2, r2, #2
 8007b02:	60da      	str	r2, [r3, #12]
      break;
 8007b04:	e01d      	b.n	8007b42 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	68da      	ldr	r2, [r3, #12]
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f042 0204 	orr.w	r2, r2, #4
 8007b14:	60da      	str	r2, [r3, #12]
      break;
 8007b16:	e014      	b.n	8007b42 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	68da      	ldr	r2, [r3, #12]
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f042 0208 	orr.w	r2, r2, #8
 8007b26:	60da      	str	r2, [r3, #12]
      break;
 8007b28:	e00b      	b.n	8007b42 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	68da      	ldr	r2, [r3, #12]
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	f042 0210 	orr.w	r2, r2, #16
 8007b38:	60da      	str	r2, [r3, #12]
      break;
 8007b3a:	e002      	b.n	8007b42 <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8007b3c:	2301      	movs	r3, #1
 8007b3e:	73fb      	strb	r3, [r7, #15]
      break;
 8007b40:	bf00      	nop
  }

  if (status == HAL_OK)
 8007b42:	7bfb      	ldrb	r3, [r7, #15]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d156      	bne.n	8007bf6 <HAL_TIM_PWM_Start_IT+0x246>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	2201      	movs	r2, #1
 8007b4e:	6839      	ldr	r1, [r7, #0]
 8007b50:	4618      	mov	r0, r3
 8007b52:	f000 ff33 	bl	80089bc <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	4a29      	ldr	r2, [pc, #164]	; (8007c00 <HAL_TIM_PWM_Start_IT+0x250>)
 8007b5c:	4293      	cmp	r3, r2
 8007b5e:	d00e      	beq.n	8007b7e <HAL_TIM_PWM_Start_IT+0x1ce>
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	4a27      	ldr	r2, [pc, #156]	; (8007c04 <HAL_TIM_PWM_Start_IT+0x254>)
 8007b66:	4293      	cmp	r3, r2
 8007b68:	d009      	beq.n	8007b7e <HAL_TIM_PWM_Start_IT+0x1ce>
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	4a26      	ldr	r2, [pc, #152]	; (8007c08 <HAL_TIM_PWM_Start_IT+0x258>)
 8007b70:	4293      	cmp	r3, r2
 8007b72:	d004      	beq.n	8007b7e <HAL_TIM_PWM_Start_IT+0x1ce>
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	4a24      	ldr	r2, [pc, #144]	; (8007c0c <HAL_TIM_PWM_Start_IT+0x25c>)
 8007b7a:	4293      	cmp	r3, r2
 8007b7c:	d101      	bne.n	8007b82 <HAL_TIM_PWM_Start_IT+0x1d2>
 8007b7e:	2301      	movs	r3, #1
 8007b80:	e000      	b.n	8007b84 <HAL_TIM_PWM_Start_IT+0x1d4>
 8007b82:	2300      	movs	r3, #0
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d007      	beq.n	8007b98 <HAL_TIM_PWM_Start_IT+0x1e8>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007b96:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	4a18      	ldr	r2, [pc, #96]	; (8007c00 <HAL_TIM_PWM_Start_IT+0x250>)
 8007b9e:	4293      	cmp	r3, r2
 8007ba0:	d009      	beq.n	8007bb6 <HAL_TIM_PWM_Start_IT+0x206>
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007baa:	d004      	beq.n	8007bb6 <HAL_TIM_PWM_Start_IT+0x206>
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	4a14      	ldr	r2, [pc, #80]	; (8007c04 <HAL_TIM_PWM_Start_IT+0x254>)
 8007bb2:	4293      	cmp	r3, r2
 8007bb4:	d115      	bne.n	8007be2 <HAL_TIM_PWM_Start_IT+0x232>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	689a      	ldr	r2, [r3, #8]
 8007bbc:	4b14      	ldr	r3, [pc, #80]	; (8007c10 <HAL_TIM_PWM_Start_IT+0x260>)
 8007bbe:	4013      	ands	r3, r2
 8007bc0:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007bc2:	68bb      	ldr	r3, [r7, #8]
 8007bc4:	2b06      	cmp	r3, #6
 8007bc6:	d015      	beq.n	8007bf4 <HAL_TIM_PWM_Start_IT+0x244>
 8007bc8:	68bb      	ldr	r3, [r7, #8]
 8007bca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007bce:	d011      	beq.n	8007bf4 <HAL_TIM_PWM_Start_IT+0x244>
      {
        __HAL_TIM_ENABLE(htim);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	681a      	ldr	r2, [r3, #0]
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f042 0201 	orr.w	r2, r2, #1
 8007bde:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007be0:	e008      	b.n	8007bf4 <HAL_TIM_PWM_Start_IT+0x244>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	681a      	ldr	r2, [r3, #0]
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f042 0201 	orr.w	r2, r2, #1
 8007bf0:	601a      	str	r2, [r3, #0]
 8007bf2:	e000      	b.n	8007bf6 <HAL_TIM_PWM_Start_IT+0x246>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007bf4:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8007bf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	3710      	adds	r7, #16
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	bd80      	pop	{r7, pc}
 8007c00:	40012c00 	.word	0x40012c00
 8007c04:	40014000 	.word	0x40014000
 8007c08:	40014400 	.word	0x40014400
 8007c0c:	40014800 	.word	0x40014800
 8007c10:	00010007 	.word	0x00010007

08007c14 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b082      	sub	sp, #8
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	691b      	ldr	r3, [r3, #16]
 8007c22:	f003 0302 	and.w	r3, r3, #2
 8007c26:	2b02      	cmp	r3, #2
 8007c28:	d122      	bne.n	8007c70 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	68db      	ldr	r3, [r3, #12]
 8007c30:	f003 0302 	and.w	r3, r3, #2
 8007c34:	2b02      	cmp	r3, #2
 8007c36:	d11b      	bne.n	8007c70 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f06f 0202 	mvn.w	r2, #2
 8007c40:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	2201      	movs	r2, #1
 8007c46:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	699b      	ldr	r3, [r3, #24]
 8007c4e:	f003 0303 	and.w	r3, r3, #3
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d003      	beq.n	8007c5e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007c56:	6878      	ldr	r0, [r7, #4]
 8007c58:	f000 fae3 	bl	8008222 <HAL_TIM_IC_CaptureCallback>
 8007c5c:	e005      	b.n	8007c6a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c5e:	6878      	ldr	r0, [r7, #4]
 8007c60:	f000 fad5 	bl	800820e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c64:	6878      	ldr	r0, [r7, #4]
 8007c66:	f000 fae6 	bl	8008236 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	691b      	ldr	r3, [r3, #16]
 8007c76:	f003 0304 	and.w	r3, r3, #4
 8007c7a:	2b04      	cmp	r3, #4
 8007c7c:	d122      	bne.n	8007cc4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	68db      	ldr	r3, [r3, #12]
 8007c84:	f003 0304 	and.w	r3, r3, #4
 8007c88:	2b04      	cmp	r3, #4
 8007c8a:	d11b      	bne.n	8007cc4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	f06f 0204 	mvn.w	r2, #4
 8007c94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	2202      	movs	r2, #2
 8007c9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	699b      	ldr	r3, [r3, #24]
 8007ca2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d003      	beq.n	8007cb2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007caa:	6878      	ldr	r0, [r7, #4]
 8007cac:	f000 fab9 	bl	8008222 <HAL_TIM_IC_CaptureCallback>
 8007cb0:	e005      	b.n	8007cbe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007cb2:	6878      	ldr	r0, [r7, #4]
 8007cb4:	f000 faab 	bl	800820e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007cb8:	6878      	ldr	r0, [r7, #4]
 8007cba:	f000 fabc 	bl	8008236 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	691b      	ldr	r3, [r3, #16]
 8007cca:	f003 0308 	and.w	r3, r3, #8
 8007cce:	2b08      	cmp	r3, #8
 8007cd0:	d122      	bne.n	8007d18 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	68db      	ldr	r3, [r3, #12]
 8007cd8:	f003 0308 	and.w	r3, r3, #8
 8007cdc:	2b08      	cmp	r3, #8
 8007cde:	d11b      	bne.n	8007d18 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	f06f 0208 	mvn.w	r2, #8
 8007ce8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	2204      	movs	r2, #4
 8007cee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	69db      	ldr	r3, [r3, #28]
 8007cf6:	f003 0303 	and.w	r3, r3, #3
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d003      	beq.n	8007d06 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007cfe:	6878      	ldr	r0, [r7, #4]
 8007d00:	f000 fa8f 	bl	8008222 <HAL_TIM_IC_CaptureCallback>
 8007d04:	e005      	b.n	8007d12 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d06:	6878      	ldr	r0, [r7, #4]
 8007d08:	f000 fa81 	bl	800820e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d0c:	6878      	ldr	r0, [r7, #4]
 8007d0e:	f000 fa92 	bl	8008236 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2200      	movs	r2, #0
 8007d16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	691b      	ldr	r3, [r3, #16]
 8007d1e:	f003 0310 	and.w	r3, r3, #16
 8007d22:	2b10      	cmp	r3, #16
 8007d24:	d122      	bne.n	8007d6c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	68db      	ldr	r3, [r3, #12]
 8007d2c:	f003 0310 	and.w	r3, r3, #16
 8007d30:	2b10      	cmp	r3, #16
 8007d32:	d11b      	bne.n	8007d6c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	f06f 0210 	mvn.w	r2, #16
 8007d3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	2208      	movs	r2, #8
 8007d42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	69db      	ldr	r3, [r3, #28]
 8007d4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d003      	beq.n	8007d5a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d52:	6878      	ldr	r0, [r7, #4]
 8007d54:	f000 fa65 	bl	8008222 <HAL_TIM_IC_CaptureCallback>
 8007d58:	e005      	b.n	8007d66 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d5a:	6878      	ldr	r0, [r7, #4]
 8007d5c:	f000 fa57 	bl	800820e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d60:	6878      	ldr	r0, [r7, #4]
 8007d62:	f000 fa68 	bl	8008236 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	2200      	movs	r2, #0
 8007d6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	691b      	ldr	r3, [r3, #16]
 8007d72:	f003 0301 	and.w	r3, r3, #1
 8007d76:	2b01      	cmp	r3, #1
 8007d78:	d10e      	bne.n	8007d98 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	68db      	ldr	r3, [r3, #12]
 8007d80:	f003 0301 	and.w	r3, r3, #1
 8007d84:	2b01      	cmp	r3, #1
 8007d86:	d107      	bne.n	8007d98 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	f06f 0201 	mvn.w	r2, #1
 8007d90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007d92:	6878      	ldr	r0, [r7, #4]
 8007d94:	f7f8 fd2c 	bl	80007f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	691b      	ldr	r3, [r3, #16]
 8007d9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007da2:	2b80      	cmp	r3, #128	; 0x80
 8007da4:	d10e      	bne.n	8007dc4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	68db      	ldr	r3, [r3, #12]
 8007dac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007db0:	2b80      	cmp	r3, #128	; 0x80
 8007db2:	d107      	bne.n	8007dc4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007dbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007dbe:	6878      	ldr	r0, [r7, #4]
 8007dc0:	f000 ffa8 	bl	8008d14 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	691b      	ldr	r3, [r3, #16]
 8007dca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007dce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007dd2:	d10e      	bne.n	8007df2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	68db      	ldr	r3, [r3, #12]
 8007dda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007dde:	2b80      	cmp	r3, #128	; 0x80
 8007de0:	d107      	bne.n	8007df2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007dea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007dec:	6878      	ldr	r0, [r7, #4]
 8007dee:	f000 ff9b 	bl	8008d28 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	691b      	ldr	r3, [r3, #16]
 8007df8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dfc:	2b40      	cmp	r3, #64	; 0x40
 8007dfe:	d10e      	bne.n	8007e1e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	68db      	ldr	r3, [r3, #12]
 8007e06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e0a:	2b40      	cmp	r3, #64	; 0x40
 8007e0c:	d107      	bne.n	8007e1e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007e16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007e18:	6878      	ldr	r0, [r7, #4]
 8007e1a:	f000 fa16 	bl	800824a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	691b      	ldr	r3, [r3, #16]
 8007e24:	f003 0320 	and.w	r3, r3, #32
 8007e28:	2b20      	cmp	r3, #32
 8007e2a:	d10e      	bne.n	8007e4a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	68db      	ldr	r3, [r3, #12]
 8007e32:	f003 0320 	and.w	r3, r3, #32
 8007e36:	2b20      	cmp	r3, #32
 8007e38:	d107      	bne.n	8007e4a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	f06f 0220 	mvn.w	r2, #32
 8007e42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007e44:	6878      	ldr	r0, [r7, #4]
 8007e46:	f000 ff5b 	bl	8008d00 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007e4a:	bf00      	nop
 8007e4c:	3708      	adds	r7, #8
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	bd80      	pop	{r7, pc}
	...

08007e54 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b086      	sub	sp, #24
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	60f8      	str	r0, [r7, #12]
 8007e5c:	60b9      	str	r1, [r7, #8]
 8007e5e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007e60:	2300      	movs	r3, #0
 8007e62:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e6a:	2b01      	cmp	r3, #1
 8007e6c:	d101      	bne.n	8007e72 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007e6e:	2302      	movs	r3, #2
 8007e70:	e0ff      	b.n	8008072 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	2201      	movs	r2, #1
 8007e76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	2b14      	cmp	r3, #20
 8007e7e:	f200 80f0 	bhi.w	8008062 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007e82:	a201      	add	r2, pc, #4	; (adr r2, 8007e88 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007e84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e88:	08007edd 	.word	0x08007edd
 8007e8c:	08008063 	.word	0x08008063
 8007e90:	08008063 	.word	0x08008063
 8007e94:	08008063 	.word	0x08008063
 8007e98:	08007f1d 	.word	0x08007f1d
 8007e9c:	08008063 	.word	0x08008063
 8007ea0:	08008063 	.word	0x08008063
 8007ea4:	08008063 	.word	0x08008063
 8007ea8:	08007f5f 	.word	0x08007f5f
 8007eac:	08008063 	.word	0x08008063
 8007eb0:	08008063 	.word	0x08008063
 8007eb4:	08008063 	.word	0x08008063
 8007eb8:	08007f9f 	.word	0x08007f9f
 8007ebc:	08008063 	.word	0x08008063
 8007ec0:	08008063 	.word	0x08008063
 8007ec4:	08008063 	.word	0x08008063
 8007ec8:	08007fe1 	.word	0x08007fe1
 8007ecc:	08008063 	.word	0x08008063
 8007ed0:	08008063 	.word	0x08008063
 8007ed4:	08008063 	.word	0x08008063
 8007ed8:	08008021 	.word	0x08008021
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	68b9      	ldr	r1, [r7, #8]
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	f000 fa2a 	bl	800833c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	699a      	ldr	r2, [r3, #24]
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	f042 0208 	orr.w	r2, r2, #8
 8007ef6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	699a      	ldr	r2, [r3, #24]
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f022 0204 	bic.w	r2, r2, #4
 8007f06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	6999      	ldr	r1, [r3, #24]
 8007f0e:	68bb      	ldr	r3, [r7, #8]
 8007f10:	691a      	ldr	r2, [r3, #16]
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	430a      	orrs	r2, r1
 8007f18:	619a      	str	r2, [r3, #24]
      break;
 8007f1a:	e0a5      	b.n	8008068 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	68b9      	ldr	r1, [r7, #8]
 8007f22:	4618      	mov	r0, r3
 8007f24:	f000 fa90 	bl	8008448 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	699a      	ldr	r2, [r3, #24]
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007f36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	699a      	ldr	r2, [r3, #24]
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	6999      	ldr	r1, [r3, #24]
 8007f4e:	68bb      	ldr	r3, [r7, #8]
 8007f50:	691b      	ldr	r3, [r3, #16]
 8007f52:	021a      	lsls	r2, r3, #8
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	430a      	orrs	r2, r1
 8007f5a:	619a      	str	r2, [r3, #24]
      break;
 8007f5c:	e084      	b.n	8008068 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	68b9      	ldr	r1, [r7, #8]
 8007f64:	4618      	mov	r0, r3
 8007f66:	f000 faef 	bl	8008548 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	69da      	ldr	r2, [r3, #28]
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	f042 0208 	orr.w	r2, r2, #8
 8007f78:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	69da      	ldr	r2, [r3, #28]
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	f022 0204 	bic.w	r2, r2, #4
 8007f88:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	69d9      	ldr	r1, [r3, #28]
 8007f90:	68bb      	ldr	r3, [r7, #8]
 8007f92:	691a      	ldr	r2, [r3, #16]
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	430a      	orrs	r2, r1
 8007f9a:	61da      	str	r2, [r3, #28]
      break;
 8007f9c:	e064      	b.n	8008068 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	68b9      	ldr	r1, [r7, #8]
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	f000 fb4d 	bl	8008644 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	69da      	ldr	r2, [r3, #28]
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007fb8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	69da      	ldr	r2, [r3, #28]
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007fc8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	69d9      	ldr	r1, [r3, #28]
 8007fd0:	68bb      	ldr	r3, [r7, #8]
 8007fd2:	691b      	ldr	r3, [r3, #16]
 8007fd4:	021a      	lsls	r2, r3, #8
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	430a      	orrs	r2, r1
 8007fdc:	61da      	str	r2, [r3, #28]
      break;
 8007fde:	e043      	b.n	8008068 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	68b9      	ldr	r1, [r7, #8]
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	f000 fb90 	bl	800870c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	f042 0208 	orr.w	r2, r2, #8
 8007ffa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	f022 0204 	bic.w	r2, r2, #4
 800800a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008012:	68bb      	ldr	r3, [r7, #8]
 8008014:	691a      	ldr	r2, [r3, #16]
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	430a      	orrs	r2, r1
 800801c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800801e:	e023      	b.n	8008068 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	68b9      	ldr	r1, [r7, #8]
 8008026:	4618      	mov	r0, r3
 8008028:	f000 fbce 	bl	80087c8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800803a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800804a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008052:	68bb      	ldr	r3, [r7, #8]
 8008054:	691b      	ldr	r3, [r3, #16]
 8008056:	021a      	lsls	r2, r3, #8
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	430a      	orrs	r2, r1
 800805e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008060:	e002      	b.n	8008068 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8008062:	2301      	movs	r3, #1
 8008064:	75fb      	strb	r3, [r7, #23]
      break;
 8008066:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	2200      	movs	r2, #0
 800806c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008070:	7dfb      	ldrb	r3, [r7, #23]
}
 8008072:	4618      	mov	r0, r3
 8008074:	3718      	adds	r7, #24
 8008076:	46bd      	mov	sp, r7
 8008078:	bd80      	pop	{r7, pc}
 800807a:	bf00      	nop

0800807c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b084      	sub	sp, #16
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
 8008084:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008086:	2300      	movs	r3, #0
 8008088:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008090:	2b01      	cmp	r3, #1
 8008092:	d101      	bne.n	8008098 <HAL_TIM_ConfigClockSource+0x1c>
 8008094:	2302      	movs	r3, #2
 8008096:	e0b6      	b.n	8008206 <HAL_TIM_ConfigClockSource+0x18a>
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2201      	movs	r2, #1
 800809c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2202      	movs	r2, #2
 80080a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	689b      	ldr	r3, [r3, #8]
 80080ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80080b0:	68bb      	ldr	r3, [r7, #8]
 80080b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80080b6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80080ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80080bc:	68bb      	ldr	r3, [r7, #8]
 80080be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80080c2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	68ba      	ldr	r2, [r7, #8]
 80080ca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80080cc:	683b      	ldr	r3, [r7, #0]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80080d4:	d03e      	beq.n	8008154 <HAL_TIM_ConfigClockSource+0xd8>
 80080d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80080da:	f200 8087 	bhi.w	80081ec <HAL_TIM_ConfigClockSource+0x170>
 80080de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080e2:	f000 8086 	beq.w	80081f2 <HAL_TIM_ConfigClockSource+0x176>
 80080e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080ea:	d87f      	bhi.n	80081ec <HAL_TIM_ConfigClockSource+0x170>
 80080ec:	2b70      	cmp	r3, #112	; 0x70
 80080ee:	d01a      	beq.n	8008126 <HAL_TIM_ConfigClockSource+0xaa>
 80080f0:	2b70      	cmp	r3, #112	; 0x70
 80080f2:	d87b      	bhi.n	80081ec <HAL_TIM_ConfigClockSource+0x170>
 80080f4:	2b60      	cmp	r3, #96	; 0x60
 80080f6:	d050      	beq.n	800819a <HAL_TIM_ConfigClockSource+0x11e>
 80080f8:	2b60      	cmp	r3, #96	; 0x60
 80080fa:	d877      	bhi.n	80081ec <HAL_TIM_ConfigClockSource+0x170>
 80080fc:	2b50      	cmp	r3, #80	; 0x50
 80080fe:	d03c      	beq.n	800817a <HAL_TIM_ConfigClockSource+0xfe>
 8008100:	2b50      	cmp	r3, #80	; 0x50
 8008102:	d873      	bhi.n	80081ec <HAL_TIM_ConfigClockSource+0x170>
 8008104:	2b40      	cmp	r3, #64	; 0x40
 8008106:	d058      	beq.n	80081ba <HAL_TIM_ConfigClockSource+0x13e>
 8008108:	2b40      	cmp	r3, #64	; 0x40
 800810a:	d86f      	bhi.n	80081ec <HAL_TIM_ConfigClockSource+0x170>
 800810c:	2b30      	cmp	r3, #48	; 0x30
 800810e:	d064      	beq.n	80081da <HAL_TIM_ConfigClockSource+0x15e>
 8008110:	2b30      	cmp	r3, #48	; 0x30
 8008112:	d86b      	bhi.n	80081ec <HAL_TIM_ConfigClockSource+0x170>
 8008114:	2b20      	cmp	r3, #32
 8008116:	d060      	beq.n	80081da <HAL_TIM_ConfigClockSource+0x15e>
 8008118:	2b20      	cmp	r3, #32
 800811a:	d867      	bhi.n	80081ec <HAL_TIM_ConfigClockSource+0x170>
 800811c:	2b00      	cmp	r3, #0
 800811e:	d05c      	beq.n	80081da <HAL_TIM_ConfigClockSource+0x15e>
 8008120:	2b10      	cmp	r3, #16
 8008122:	d05a      	beq.n	80081da <HAL_TIM_ConfigClockSource+0x15e>
 8008124:	e062      	b.n	80081ec <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	6818      	ldr	r0, [r3, #0]
 800812a:	683b      	ldr	r3, [r7, #0]
 800812c:	6899      	ldr	r1, [r3, #8]
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	685a      	ldr	r2, [r3, #4]
 8008132:	683b      	ldr	r3, [r7, #0]
 8008134:	68db      	ldr	r3, [r3, #12]
 8008136:	f000 fc21 	bl	800897c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	689b      	ldr	r3, [r3, #8]
 8008140:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008142:	68bb      	ldr	r3, [r7, #8]
 8008144:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008148:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	68ba      	ldr	r2, [r7, #8]
 8008150:	609a      	str	r2, [r3, #8]
      break;
 8008152:	e04f      	b.n	80081f4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	6818      	ldr	r0, [r3, #0]
 8008158:	683b      	ldr	r3, [r7, #0]
 800815a:	6899      	ldr	r1, [r3, #8]
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	685a      	ldr	r2, [r3, #4]
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	68db      	ldr	r3, [r3, #12]
 8008164:	f000 fc0a 	bl	800897c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	689a      	ldr	r2, [r3, #8]
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008176:	609a      	str	r2, [r3, #8]
      break;
 8008178:	e03c      	b.n	80081f4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	6818      	ldr	r0, [r3, #0]
 800817e:	683b      	ldr	r3, [r7, #0]
 8008180:	6859      	ldr	r1, [r3, #4]
 8008182:	683b      	ldr	r3, [r7, #0]
 8008184:	68db      	ldr	r3, [r3, #12]
 8008186:	461a      	mov	r2, r3
 8008188:	f000 fb7e 	bl	8008888 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	2150      	movs	r1, #80	; 0x50
 8008192:	4618      	mov	r0, r3
 8008194:	f000 fbd7 	bl	8008946 <TIM_ITRx_SetConfig>
      break;
 8008198:	e02c      	b.n	80081f4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	6818      	ldr	r0, [r3, #0]
 800819e:	683b      	ldr	r3, [r7, #0]
 80081a0:	6859      	ldr	r1, [r3, #4]
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	68db      	ldr	r3, [r3, #12]
 80081a6:	461a      	mov	r2, r3
 80081a8:	f000 fb9d 	bl	80088e6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	2160      	movs	r1, #96	; 0x60
 80081b2:	4618      	mov	r0, r3
 80081b4:	f000 fbc7 	bl	8008946 <TIM_ITRx_SetConfig>
      break;
 80081b8:	e01c      	b.n	80081f4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	6818      	ldr	r0, [r3, #0]
 80081be:	683b      	ldr	r3, [r7, #0]
 80081c0:	6859      	ldr	r1, [r3, #4]
 80081c2:	683b      	ldr	r3, [r7, #0]
 80081c4:	68db      	ldr	r3, [r3, #12]
 80081c6:	461a      	mov	r2, r3
 80081c8:	f000 fb5e 	bl	8008888 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	2140      	movs	r1, #64	; 0x40
 80081d2:	4618      	mov	r0, r3
 80081d4:	f000 fbb7 	bl	8008946 <TIM_ITRx_SetConfig>
      break;
 80081d8:	e00c      	b.n	80081f4 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681a      	ldr	r2, [r3, #0]
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	4619      	mov	r1, r3
 80081e4:	4610      	mov	r0, r2
 80081e6:	f000 fbae 	bl	8008946 <TIM_ITRx_SetConfig>
      break;
 80081ea:	e003      	b.n	80081f4 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80081ec:	2301      	movs	r3, #1
 80081ee:	73fb      	strb	r3, [r7, #15]
      break;
 80081f0:	e000      	b.n	80081f4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80081f2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2201      	movs	r2, #1
 80081f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2200      	movs	r2, #0
 8008200:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008204:	7bfb      	ldrb	r3, [r7, #15]
}
 8008206:	4618      	mov	r0, r3
 8008208:	3710      	adds	r7, #16
 800820a:	46bd      	mov	sp, r7
 800820c:	bd80      	pop	{r7, pc}

0800820e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800820e:	b480      	push	{r7}
 8008210:	b083      	sub	sp, #12
 8008212:	af00      	add	r7, sp, #0
 8008214:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008216:	bf00      	nop
 8008218:	370c      	adds	r7, #12
 800821a:	46bd      	mov	sp, r7
 800821c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008220:	4770      	bx	lr

08008222 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008222:	b480      	push	{r7}
 8008224:	b083      	sub	sp, #12
 8008226:	af00      	add	r7, sp, #0
 8008228:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800822a:	bf00      	nop
 800822c:	370c      	adds	r7, #12
 800822e:	46bd      	mov	sp, r7
 8008230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008234:	4770      	bx	lr

08008236 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008236:	b480      	push	{r7}
 8008238:	b083      	sub	sp, #12
 800823a:	af00      	add	r7, sp, #0
 800823c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800823e:	bf00      	nop
 8008240:	370c      	adds	r7, #12
 8008242:	46bd      	mov	sp, r7
 8008244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008248:	4770      	bx	lr

0800824a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800824a:	b480      	push	{r7}
 800824c:	b083      	sub	sp, #12
 800824e:	af00      	add	r7, sp, #0
 8008250:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008252:	bf00      	nop
 8008254:	370c      	adds	r7, #12
 8008256:	46bd      	mov	sp, r7
 8008258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825c:	4770      	bx	lr
	...

08008260 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008260:	b480      	push	{r7}
 8008262:	b085      	sub	sp, #20
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
 8008268:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	4a2e      	ldr	r2, [pc, #184]	; (800832c <TIM_Base_SetConfig+0xcc>)
 8008274:	4293      	cmp	r3, r2
 8008276:	d003      	beq.n	8008280 <TIM_Base_SetConfig+0x20>
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800827e:	d108      	bne.n	8008292 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008286:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008288:	683b      	ldr	r3, [r7, #0]
 800828a:	685b      	ldr	r3, [r3, #4]
 800828c:	68fa      	ldr	r2, [r7, #12]
 800828e:	4313      	orrs	r3, r2
 8008290:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	4a25      	ldr	r2, [pc, #148]	; (800832c <TIM_Base_SetConfig+0xcc>)
 8008296:	4293      	cmp	r3, r2
 8008298:	d00f      	beq.n	80082ba <TIM_Base_SetConfig+0x5a>
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082a0:	d00b      	beq.n	80082ba <TIM_Base_SetConfig+0x5a>
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	4a22      	ldr	r2, [pc, #136]	; (8008330 <TIM_Base_SetConfig+0xd0>)
 80082a6:	4293      	cmp	r3, r2
 80082a8:	d007      	beq.n	80082ba <TIM_Base_SetConfig+0x5a>
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	4a21      	ldr	r2, [pc, #132]	; (8008334 <TIM_Base_SetConfig+0xd4>)
 80082ae:	4293      	cmp	r3, r2
 80082b0:	d003      	beq.n	80082ba <TIM_Base_SetConfig+0x5a>
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	4a20      	ldr	r2, [pc, #128]	; (8008338 <TIM_Base_SetConfig+0xd8>)
 80082b6:	4293      	cmp	r3, r2
 80082b8:	d108      	bne.n	80082cc <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80082c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	68db      	ldr	r3, [r3, #12]
 80082c6:	68fa      	ldr	r2, [r7, #12]
 80082c8:	4313      	orrs	r3, r2
 80082ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	695b      	ldr	r3, [r3, #20]
 80082d6:	4313      	orrs	r3, r2
 80082d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	68fa      	ldr	r2, [r7, #12]
 80082de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80082e0:	683b      	ldr	r3, [r7, #0]
 80082e2:	689a      	ldr	r2, [r3, #8]
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80082e8:	683b      	ldr	r3, [r7, #0]
 80082ea:	681a      	ldr	r2, [r3, #0]
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	4a0e      	ldr	r2, [pc, #56]	; (800832c <TIM_Base_SetConfig+0xcc>)
 80082f4:	4293      	cmp	r3, r2
 80082f6:	d00b      	beq.n	8008310 <TIM_Base_SetConfig+0xb0>
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	4a0d      	ldr	r2, [pc, #52]	; (8008330 <TIM_Base_SetConfig+0xd0>)
 80082fc:	4293      	cmp	r3, r2
 80082fe:	d007      	beq.n	8008310 <TIM_Base_SetConfig+0xb0>
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	4a0c      	ldr	r2, [pc, #48]	; (8008334 <TIM_Base_SetConfig+0xd4>)
 8008304:	4293      	cmp	r3, r2
 8008306:	d003      	beq.n	8008310 <TIM_Base_SetConfig+0xb0>
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	4a0b      	ldr	r2, [pc, #44]	; (8008338 <TIM_Base_SetConfig+0xd8>)
 800830c:	4293      	cmp	r3, r2
 800830e:	d103      	bne.n	8008318 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	691a      	ldr	r2, [r3, #16]
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	2201      	movs	r2, #1
 800831c:	615a      	str	r2, [r3, #20]
}
 800831e:	bf00      	nop
 8008320:	3714      	adds	r7, #20
 8008322:	46bd      	mov	sp, r7
 8008324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008328:	4770      	bx	lr
 800832a:	bf00      	nop
 800832c:	40012c00 	.word	0x40012c00
 8008330:	40014000 	.word	0x40014000
 8008334:	40014400 	.word	0x40014400
 8008338:	40014800 	.word	0x40014800

0800833c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800833c:	b480      	push	{r7}
 800833e:	b087      	sub	sp, #28
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
 8008344:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	6a1b      	ldr	r3, [r3, #32]
 800834a:	f023 0201 	bic.w	r2, r3, #1
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	6a1b      	ldr	r3, [r3, #32]
 8008356:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	685b      	ldr	r3, [r3, #4]
 800835c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	699b      	ldr	r3, [r3, #24]
 8008362:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800836a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800836e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	f023 0303 	bic.w	r3, r3, #3
 8008376:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008378:	683b      	ldr	r3, [r7, #0]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	68fa      	ldr	r2, [r7, #12]
 800837e:	4313      	orrs	r3, r2
 8008380:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008382:	697b      	ldr	r3, [r7, #20]
 8008384:	f023 0302 	bic.w	r3, r3, #2
 8008388:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800838a:	683b      	ldr	r3, [r7, #0]
 800838c:	689b      	ldr	r3, [r3, #8]
 800838e:	697a      	ldr	r2, [r7, #20]
 8008390:	4313      	orrs	r3, r2
 8008392:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	4a28      	ldr	r2, [pc, #160]	; (8008438 <TIM_OC1_SetConfig+0xfc>)
 8008398:	4293      	cmp	r3, r2
 800839a:	d00b      	beq.n	80083b4 <TIM_OC1_SetConfig+0x78>
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	4a27      	ldr	r2, [pc, #156]	; (800843c <TIM_OC1_SetConfig+0x100>)
 80083a0:	4293      	cmp	r3, r2
 80083a2:	d007      	beq.n	80083b4 <TIM_OC1_SetConfig+0x78>
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	4a26      	ldr	r2, [pc, #152]	; (8008440 <TIM_OC1_SetConfig+0x104>)
 80083a8:	4293      	cmp	r3, r2
 80083aa:	d003      	beq.n	80083b4 <TIM_OC1_SetConfig+0x78>
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	4a25      	ldr	r2, [pc, #148]	; (8008444 <TIM_OC1_SetConfig+0x108>)
 80083b0:	4293      	cmp	r3, r2
 80083b2:	d10c      	bne.n	80083ce <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80083b4:	697b      	ldr	r3, [r7, #20]
 80083b6:	f023 0308 	bic.w	r3, r3, #8
 80083ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80083bc:	683b      	ldr	r3, [r7, #0]
 80083be:	68db      	ldr	r3, [r3, #12]
 80083c0:	697a      	ldr	r2, [r7, #20]
 80083c2:	4313      	orrs	r3, r2
 80083c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80083c6:	697b      	ldr	r3, [r7, #20]
 80083c8:	f023 0304 	bic.w	r3, r3, #4
 80083cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	4a19      	ldr	r2, [pc, #100]	; (8008438 <TIM_OC1_SetConfig+0xfc>)
 80083d2:	4293      	cmp	r3, r2
 80083d4:	d00b      	beq.n	80083ee <TIM_OC1_SetConfig+0xb2>
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	4a18      	ldr	r2, [pc, #96]	; (800843c <TIM_OC1_SetConfig+0x100>)
 80083da:	4293      	cmp	r3, r2
 80083dc:	d007      	beq.n	80083ee <TIM_OC1_SetConfig+0xb2>
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	4a17      	ldr	r2, [pc, #92]	; (8008440 <TIM_OC1_SetConfig+0x104>)
 80083e2:	4293      	cmp	r3, r2
 80083e4:	d003      	beq.n	80083ee <TIM_OC1_SetConfig+0xb2>
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	4a16      	ldr	r2, [pc, #88]	; (8008444 <TIM_OC1_SetConfig+0x108>)
 80083ea:	4293      	cmp	r3, r2
 80083ec:	d111      	bne.n	8008412 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80083ee:	693b      	ldr	r3, [r7, #16]
 80083f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80083f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80083f6:	693b      	ldr	r3, [r7, #16]
 80083f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80083fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80083fe:	683b      	ldr	r3, [r7, #0]
 8008400:	695b      	ldr	r3, [r3, #20]
 8008402:	693a      	ldr	r2, [r7, #16]
 8008404:	4313      	orrs	r3, r2
 8008406:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008408:	683b      	ldr	r3, [r7, #0]
 800840a:	699b      	ldr	r3, [r3, #24]
 800840c:	693a      	ldr	r2, [r7, #16]
 800840e:	4313      	orrs	r3, r2
 8008410:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	693a      	ldr	r2, [r7, #16]
 8008416:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	68fa      	ldr	r2, [r7, #12]
 800841c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800841e:	683b      	ldr	r3, [r7, #0]
 8008420:	685a      	ldr	r2, [r3, #4]
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	697a      	ldr	r2, [r7, #20]
 800842a:	621a      	str	r2, [r3, #32]
}
 800842c:	bf00      	nop
 800842e:	371c      	adds	r7, #28
 8008430:	46bd      	mov	sp, r7
 8008432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008436:	4770      	bx	lr
 8008438:	40012c00 	.word	0x40012c00
 800843c:	40014000 	.word	0x40014000
 8008440:	40014400 	.word	0x40014400
 8008444:	40014800 	.word	0x40014800

08008448 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008448:	b480      	push	{r7}
 800844a:	b087      	sub	sp, #28
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
 8008450:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	6a1b      	ldr	r3, [r3, #32]
 8008456:	f023 0210 	bic.w	r2, r3, #16
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	6a1b      	ldr	r3, [r3, #32]
 8008462:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	685b      	ldr	r3, [r3, #4]
 8008468:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	699b      	ldr	r3, [r3, #24]
 800846e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008476:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800847a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008482:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008484:	683b      	ldr	r3, [r7, #0]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	021b      	lsls	r3, r3, #8
 800848a:	68fa      	ldr	r2, [r7, #12]
 800848c:	4313      	orrs	r3, r2
 800848e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008490:	697b      	ldr	r3, [r7, #20]
 8008492:	f023 0320 	bic.w	r3, r3, #32
 8008496:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	689b      	ldr	r3, [r3, #8]
 800849c:	011b      	lsls	r3, r3, #4
 800849e:	697a      	ldr	r2, [r7, #20]
 80084a0:	4313      	orrs	r3, r2
 80084a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	4a24      	ldr	r2, [pc, #144]	; (8008538 <TIM_OC2_SetConfig+0xf0>)
 80084a8:	4293      	cmp	r3, r2
 80084aa:	d10d      	bne.n	80084c8 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80084ac:	697b      	ldr	r3, [r7, #20]
 80084ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80084b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80084b4:	683b      	ldr	r3, [r7, #0]
 80084b6:	68db      	ldr	r3, [r3, #12]
 80084b8:	011b      	lsls	r3, r3, #4
 80084ba:	697a      	ldr	r2, [r7, #20]
 80084bc:	4313      	orrs	r3, r2
 80084be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80084c0:	697b      	ldr	r3, [r7, #20]
 80084c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80084c6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	4a1b      	ldr	r2, [pc, #108]	; (8008538 <TIM_OC2_SetConfig+0xf0>)
 80084cc:	4293      	cmp	r3, r2
 80084ce:	d00b      	beq.n	80084e8 <TIM_OC2_SetConfig+0xa0>
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	4a1a      	ldr	r2, [pc, #104]	; (800853c <TIM_OC2_SetConfig+0xf4>)
 80084d4:	4293      	cmp	r3, r2
 80084d6:	d007      	beq.n	80084e8 <TIM_OC2_SetConfig+0xa0>
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	4a19      	ldr	r2, [pc, #100]	; (8008540 <TIM_OC2_SetConfig+0xf8>)
 80084dc:	4293      	cmp	r3, r2
 80084de:	d003      	beq.n	80084e8 <TIM_OC2_SetConfig+0xa0>
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	4a18      	ldr	r2, [pc, #96]	; (8008544 <TIM_OC2_SetConfig+0xfc>)
 80084e4:	4293      	cmp	r3, r2
 80084e6:	d113      	bne.n	8008510 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80084e8:	693b      	ldr	r3, [r7, #16]
 80084ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80084ee:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80084f0:	693b      	ldr	r3, [r7, #16]
 80084f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80084f6:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80084f8:	683b      	ldr	r3, [r7, #0]
 80084fa:	695b      	ldr	r3, [r3, #20]
 80084fc:	009b      	lsls	r3, r3, #2
 80084fe:	693a      	ldr	r2, [r7, #16]
 8008500:	4313      	orrs	r3, r2
 8008502:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008504:	683b      	ldr	r3, [r7, #0]
 8008506:	699b      	ldr	r3, [r3, #24]
 8008508:	009b      	lsls	r3, r3, #2
 800850a:	693a      	ldr	r2, [r7, #16]
 800850c:	4313      	orrs	r3, r2
 800850e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	693a      	ldr	r2, [r7, #16]
 8008514:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	68fa      	ldr	r2, [r7, #12]
 800851a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800851c:	683b      	ldr	r3, [r7, #0]
 800851e:	685a      	ldr	r2, [r3, #4]
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	697a      	ldr	r2, [r7, #20]
 8008528:	621a      	str	r2, [r3, #32]
}
 800852a:	bf00      	nop
 800852c:	371c      	adds	r7, #28
 800852e:	46bd      	mov	sp, r7
 8008530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008534:	4770      	bx	lr
 8008536:	bf00      	nop
 8008538:	40012c00 	.word	0x40012c00
 800853c:	40014000 	.word	0x40014000
 8008540:	40014400 	.word	0x40014400
 8008544:	40014800 	.word	0x40014800

08008548 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008548:	b480      	push	{r7}
 800854a:	b087      	sub	sp, #28
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
 8008550:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	6a1b      	ldr	r3, [r3, #32]
 8008556:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	6a1b      	ldr	r3, [r3, #32]
 8008562:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	685b      	ldr	r3, [r3, #4]
 8008568:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	69db      	ldr	r3, [r3, #28]
 800856e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008576:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800857a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	f023 0303 	bic.w	r3, r3, #3
 8008582:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	68fa      	ldr	r2, [r7, #12]
 800858a:	4313      	orrs	r3, r2
 800858c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800858e:	697b      	ldr	r3, [r7, #20]
 8008590:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008594:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008596:	683b      	ldr	r3, [r7, #0]
 8008598:	689b      	ldr	r3, [r3, #8]
 800859a:	021b      	lsls	r3, r3, #8
 800859c:	697a      	ldr	r2, [r7, #20]
 800859e:	4313      	orrs	r3, r2
 80085a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	4a23      	ldr	r2, [pc, #140]	; (8008634 <TIM_OC3_SetConfig+0xec>)
 80085a6:	4293      	cmp	r3, r2
 80085a8:	d10d      	bne.n	80085c6 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80085aa:	697b      	ldr	r3, [r7, #20]
 80085ac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80085b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	68db      	ldr	r3, [r3, #12]
 80085b6:	021b      	lsls	r3, r3, #8
 80085b8:	697a      	ldr	r2, [r7, #20]
 80085ba:	4313      	orrs	r3, r2
 80085bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80085be:	697b      	ldr	r3, [r7, #20]
 80085c0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80085c4:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	4a1a      	ldr	r2, [pc, #104]	; (8008634 <TIM_OC3_SetConfig+0xec>)
 80085ca:	4293      	cmp	r3, r2
 80085cc:	d00b      	beq.n	80085e6 <TIM_OC3_SetConfig+0x9e>
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	4a19      	ldr	r2, [pc, #100]	; (8008638 <TIM_OC3_SetConfig+0xf0>)
 80085d2:	4293      	cmp	r3, r2
 80085d4:	d007      	beq.n	80085e6 <TIM_OC3_SetConfig+0x9e>
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	4a18      	ldr	r2, [pc, #96]	; (800863c <TIM_OC3_SetConfig+0xf4>)
 80085da:	4293      	cmp	r3, r2
 80085dc:	d003      	beq.n	80085e6 <TIM_OC3_SetConfig+0x9e>
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	4a17      	ldr	r2, [pc, #92]	; (8008640 <TIM_OC3_SetConfig+0xf8>)
 80085e2:	4293      	cmp	r3, r2
 80085e4:	d113      	bne.n	800860e <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80085e6:	693b      	ldr	r3, [r7, #16]
 80085e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80085ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80085ee:	693b      	ldr	r3, [r7, #16]
 80085f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80085f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80085f6:	683b      	ldr	r3, [r7, #0]
 80085f8:	695b      	ldr	r3, [r3, #20]
 80085fa:	011b      	lsls	r3, r3, #4
 80085fc:	693a      	ldr	r2, [r7, #16]
 80085fe:	4313      	orrs	r3, r2
 8008600:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	699b      	ldr	r3, [r3, #24]
 8008606:	011b      	lsls	r3, r3, #4
 8008608:	693a      	ldr	r2, [r7, #16]
 800860a:	4313      	orrs	r3, r2
 800860c:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	693a      	ldr	r2, [r7, #16]
 8008612:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	68fa      	ldr	r2, [r7, #12]
 8008618:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800861a:	683b      	ldr	r3, [r7, #0]
 800861c:	685a      	ldr	r2, [r3, #4]
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	697a      	ldr	r2, [r7, #20]
 8008626:	621a      	str	r2, [r3, #32]
}
 8008628:	bf00      	nop
 800862a:	371c      	adds	r7, #28
 800862c:	46bd      	mov	sp, r7
 800862e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008632:	4770      	bx	lr
 8008634:	40012c00 	.word	0x40012c00
 8008638:	40014000 	.word	0x40014000
 800863c:	40014400 	.word	0x40014400
 8008640:	40014800 	.word	0x40014800

08008644 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008644:	b480      	push	{r7}
 8008646:	b087      	sub	sp, #28
 8008648:	af00      	add	r7, sp, #0
 800864a:	6078      	str	r0, [r7, #4]
 800864c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	6a1b      	ldr	r3, [r3, #32]
 8008652:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	6a1b      	ldr	r3, [r3, #32]
 800865e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	685b      	ldr	r3, [r3, #4]
 8008664:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	69db      	ldr	r3, [r3, #28]
 800866a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008672:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008676:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800867e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008680:	683b      	ldr	r3, [r7, #0]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	021b      	lsls	r3, r3, #8
 8008686:	68fa      	ldr	r2, [r7, #12]
 8008688:	4313      	orrs	r3, r2
 800868a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800868c:	693b      	ldr	r3, [r7, #16]
 800868e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008692:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008694:	683b      	ldr	r3, [r7, #0]
 8008696:	689b      	ldr	r3, [r3, #8]
 8008698:	031b      	lsls	r3, r3, #12
 800869a:	693a      	ldr	r2, [r7, #16]
 800869c:	4313      	orrs	r3, r2
 800869e:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	4a16      	ldr	r2, [pc, #88]	; (80086fc <TIM_OC4_SetConfig+0xb8>)
 80086a4:	4293      	cmp	r3, r2
 80086a6:	d00b      	beq.n	80086c0 <TIM_OC4_SetConfig+0x7c>
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	4a15      	ldr	r2, [pc, #84]	; (8008700 <TIM_OC4_SetConfig+0xbc>)
 80086ac:	4293      	cmp	r3, r2
 80086ae:	d007      	beq.n	80086c0 <TIM_OC4_SetConfig+0x7c>
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	4a14      	ldr	r2, [pc, #80]	; (8008704 <TIM_OC4_SetConfig+0xc0>)
 80086b4:	4293      	cmp	r3, r2
 80086b6:	d003      	beq.n	80086c0 <TIM_OC4_SetConfig+0x7c>
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	4a13      	ldr	r2, [pc, #76]	; (8008708 <TIM_OC4_SetConfig+0xc4>)
 80086bc:	4293      	cmp	r3, r2
 80086be:	d109      	bne.n	80086d4 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80086c0:	697b      	ldr	r3, [r7, #20]
 80086c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80086c6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	695b      	ldr	r3, [r3, #20]
 80086cc:	019b      	lsls	r3, r3, #6
 80086ce:	697a      	ldr	r2, [r7, #20]
 80086d0:	4313      	orrs	r3, r2
 80086d2:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	697a      	ldr	r2, [r7, #20]
 80086d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	68fa      	ldr	r2, [r7, #12]
 80086de:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80086e0:	683b      	ldr	r3, [r7, #0]
 80086e2:	685a      	ldr	r2, [r3, #4]
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	693a      	ldr	r2, [r7, #16]
 80086ec:	621a      	str	r2, [r3, #32]
}
 80086ee:	bf00      	nop
 80086f0:	371c      	adds	r7, #28
 80086f2:	46bd      	mov	sp, r7
 80086f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f8:	4770      	bx	lr
 80086fa:	bf00      	nop
 80086fc:	40012c00 	.word	0x40012c00
 8008700:	40014000 	.word	0x40014000
 8008704:	40014400 	.word	0x40014400
 8008708:	40014800 	.word	0x40014800

0800870c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800870c:	b480      	push	{r7}
 800870e:	b087      	sub	sp, #28
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
 8008714:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	6a1b      	ldr	r3, [r3, #32]
 800871a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	6a1b      	ldr	r3, [r3, #32]
 8008726:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	685b      	ldr	r3, [r3, #4]
 800872c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008732:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800873a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800873e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008740:	683b      	ldr	r3, [r7, #0]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	68fa      	ldr	r2, [r7, #12]
 8008746:	4313      	orrs	r3, r2
 8008748:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800874a:	693b      	ldr	r3, [r7, #16]
 800874c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008750:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008752:	683b      	ldr	r3, [r7, #0]
 8008754:	689b      	ldr	r3, [r3, #8]
 8008756:	041b      	lsls	r3, r3, #16
 8008758:	693a      	ldr	r2, [r7, #16]
 800875a:	4313      	orrs	r3, r2
 800875c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	4a15      	ldr	r2, [pc, #84]	; (80087b8 <TIM_OC5_SetConfig+0xac>)
 8008762:	4293      	cmp	r3, r2
 8008764:	d00b      	beq.n	800877e <TIM_OC5_SetConfig+0x72>
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	4a14      	ldr	r2, [pc, #80]	; (80087bc <TIM_OC5_SetConfig+0xb0>)
 800876a:	4293      	cmp	r3, r2
 800876c:	d007      	beq.n	800877e <TIM_OC5_SetConfig+0x72>
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	4a13      	ldr	r2, [pc, #76]	; (80087c0 <TIM_OC5_SetConfig+0xb4>)
 8008772:	4293      	cmp	r3, r2
 8008774:	d003      	beq.n	800877e <TIM_OC5_SetConfig+0x72>
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	4a12      	ldr	r2, [pc, #72]	; (80087c4 <TIM_OC5_SetConfig+0xb8>)
 800877a:	4293      	cmp	r3, r2
 800877c:	d109      	bne.n	8008792 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800877e:	697b      	ldr	r3, [r7, #20]
 8008780:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008784:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008786:	683b      	ldr	r3, [r7, #0]
 8008788:	695b      	ldr	r3, [r3, #20]
 800878a:	021b      	lsls	r3, r3, #8
 800878c:	697a      	ldr	r2, [r7, #20]
 800878e:	4313      	orrs	r3, r2
 8008790:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	697a      	ldr	r2, [r7, #20]
 8008796:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	68fa      	ldr	r2, [r7, #12]
 800879c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	685a      	ldr	r2, [r3, #4]
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	693a      	ldr	r2, [r7, #16]
 80087aa:	621a      	str	r2, [r3, #32]
}
 80087ac:	bf00      	nop
 80087ae:	371c      	adds	r7, #28
 80087b0:	46bd      	mov	sp, r7
 80087b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b6:	4770      	bx	lr
 80087b8:	40012c00 	.word	0x40012c00
 80087bc:	40014000 	.word	0x40014000
 80087c0:	40014400 	.word	0x40014400
 80087c4:	40014800 	.word	0x40014800

080087c8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80087c8:	b480      	push	{r7}
 80087ca:	b087      	sub	sp, #28
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
 80087d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	6a1b      	ldr	r3, [r3, #32]
 80087d6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	6a1b      	ldr	r3, [r3, #32]
 80087e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	685b      	ldr	r3, [r3, #4]
 80087e8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80087f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80087fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80087fc:	683b      	ldr	r3, [r7, #0]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	021b      	lsls	r3, r3, #8
 8008802:	68fa      	ldr	r2, [r7, #12]
 8008804:	4313      	orrs	r3, r2
 8008806:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008808:	693b      	ldr	r3, [r7, #16]
 800880a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800880e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008810:	683b      	ldr	r3, [r7, #0]
 8008812:	689b      	ldr	r3, [r3, #8]
 8008814:	051b      	lsls	r3, r3, #20
 8008816:	693a      	ldr	r2, [r7, #16]
 8008818:	4313      	orrs	r3, r2
 800881a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	4a16      	ldr	r2, [pc, #88]	; (8008878 <TIM_OC6_SetConfig+0xb0>)
 8008820:	4293      	cmp	r3, r2
 8008822:	d00b      	beq.n	800883c <TIM_OC6_SetConfig+0x74>
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	4a15      	ldr	r2, [pc, #84]	; (800887c <TIM_OC6_SetConfig+0xb4>)
 8008828:	4293      	cmp	r3, r2
 800882a:	d007      	beq.n	800883c <TIM_OC6_SetConfig+0x74>
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	4a14      	ldr	r2, [pc, #80]	; (8008880 <TIM_OC6_SetConfig+0xb8>)
 8008830:	4293      	cmp	r3, r2
 8008832:	d003      	beq.n	800883c <TIM_OC6_SetConfig+0x74>
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	4a13      	ldr	r2, [pc, #76]	; (8008884 <TIM_OC6_SetConfig+0xbc>)
 8008838:	4293      	cmp	r3, r2
 800883a:	d109      	bne.n	8008850 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800883c:	697b      	ldr	r3, [r7, #20]
 800883e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008842:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008844:	683b      	ldr	r3, [r7, #0]
 8008846:	695b      	ldr	r3, [r3, #20]
 8008848:	029b      	lsls	r3, r3, #10
 800884a:	697a      	ldr	r2, [r7, #20]
 800884c:	4313      	orrs	r3, r2
 800884e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	697a      	ldr	r2, [r7, #20]
 8008854:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	68fa      	ldr	r2, [r7, #12]
 800885a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800885c:	683b      	ldr	r3, [r7, #0]
 800885e:	685a      	ldr	r2, [r3, #4]
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	693a      	ldr	r2, [r7, #16]
 8008868:	621a      	str	r2, [r3, #32]
}
 800886a:	bf00      	nop
 800886c:	371c      	adds	r7, #28
 800886e:	46bd      	mov	sp, r7
 8008870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008874:	4770      	bx	lr
 8008876:	bf00      	nop
 8008878:	40012c00 	.word	0x40012c00
 800887c:	40014000 	.word	0x40014000
 8008880:	40014400 	.word	0x40014400
 8008884:	40014800 	.word	0x40014800

08008888 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008888:	b480      	push	{r7}
 800888a:	b087      	sub	sp, #28
 800888c:	af00      	add	r7, sp, #0
 800888e:	60f8      	str	r0, [r7, #12]
 8008890:	60b9      	str	r1, [r7, #8]
 8008892:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	6a1b      	ldr	r3, [r3, #32]
 8008898:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	6a1b      	ldr	r3, [r3, #32]
 800889e:	f023 0201 	bic.w	r2, r3, #1
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	699b      	ldr	r3, [r3, #24]
 80088aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80088ac:	693b      	ldr	r3, [r7, #16]
 80088ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80088b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	011b      	lsls	r3, r3, #4
 80088b8:	693a      	ldr	r2, [r7, #16]
 80088ba:	4313      	orrs	r3, r2
 80088bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80088be:	697b      	ldr	r3, [r7, #20]
 80088c0:	f023 030a 	bic.w	r3, r3, #10
 80088c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80088c6:	697a      	ldr	r2, [r7, #20]
 80088c8:	68bb      	ldr	r3, [r7, #8]
 80088ca:	4313      	orrs	r3, r2
 80088cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	693a      	ldr	r2, [r7, #16]
 80088d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	697a      	ldr	r2, [r7, #20]
 80088d8:	621a      	str	r2, [r3, #32]
}
 80088da:	bf00      	nop
 80088dc:	371c      	adds	r7, #28
 80088de:	46bd      	mov	sp, r7
 80088e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e4:	4770      	bx	lr

080088e6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80088e6:	b480      	push	{r7}
 80088e8:	b087      	sub	sp, #28
 80088ea:	af00      	add	r7, sp, #0
 80088ec:	60f8      	str	r0, [r7, #12]
 80088ee:	60b9      	str	r1, [r7, #8]
 80088f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	6a1b      	ldr	r3, [r3, #32]
 80088f6:	f023 0210 	bic.w	r2, r3, #16
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	699b      	ldr	r3, [r3, #24]
 8008902:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	6a1b      	ldr	r3, [r3, #32]
 8008908:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800890a:	697b      	ldr	r3, [r7, #20]
 800890c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008910:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	031b      	lsls	r3, r3, #12
 8008916:	697a      	ldr	r2, [r7, #20]
 8008918:	4313      	orrs	r3, r2
 800891a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800891c:	693b      	ldr	r3, [r7, #16]
 800891e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008922:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008924:	68bb      	ldr	r3, [r7, #8]
 8008926:	011b      	lsls	r3, r3, #4
 8008928:	693a      	ldr	r2, [r7, #16]
 800892a:	4313      	orrs	r3, r2
 800892c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	697a      	ldr	r2, [r7, #20]
 8008932:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	693a      	ldr	r2, [r7, #16]
 8008938:	621a      	str	r2, [r3, #32]
}
 800893a:	bf00      	nop
 800893c:	371c      	adds	r7, #28
 800893e:	46bd      	mov	sp, r7
 8008940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008944:	4770      	bx	lr

08008946 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008946:	b480      	push	{r7}
 8008948:	b085      	sub	sp, #20
 800894a:	af00      	add	r7, sp, #0
 800894c:	6078      	str	r0, [r7, #4]
 800894e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	689b      	ldr	r3, [r3, #8]
 8008954:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800895c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800895e:	683a      	ldr	r2, [r7, #0]
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	4313      	orrs	r3, r2
 8008964:	f043 0307 	orr.w	r3, r3, #7
 8008968:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	68fa      	ldr	r2, [r7, #12]
 800896e:	609a      	str	r2, [r3, #8]
}
 8008970:	bf00      	nop
 8008972:	3714      	adds	r7, #20
 8008974:	46bd      	mov	sp, r7
 8008976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897a:	4770      	bx	lr

0800897c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800897c:	b480      	push	{r7}
 800897e:	b087      	sub	sp, #28
 8008980:	af00      	add	r7, sp, #0
 8008982:	60f8      	str	r0, [r7, #12]
 8008984:	60b9      	str	r1, [r7, #8]
 8008986:	607a      	str	r2, [r7, #4]
 8008988:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	689b      	ldr	r3, [r3, #8]
 800898e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008990:	697b      	ldr	r3, [r7, #20]
 8008992:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008996:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008998:	683b      	ldr	r3, [r7, #0]
 800899a:	021a      	lsls	r2, r3, #8
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	431a      	orrs	r2, r3
 80089a0:	68bb      	ldr	r3, [r7, #8]
 80089a2:	4313      	orrs	r3, r2
 80089a4:	697a      	ldr	r2, [r7, #20]
 80089a6:	4313      	orrs	r3, r2
 80089a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	697a      	ldr	r2, [r7, #20]
 80089ae:	609a      	str	r2, [r3, #8]
}
 80089b0:	bf00      	nop
 80089b2:	371c      	adds	r7, #28
 80089b4:	46bd      	mov	sp, r7
 80089b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ba:	4770      	bx	lr

080089bc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80089bc:	b480      	push	{r7}
 80089be:	b087      	sub	sp, #28
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	60f8      	str	r0, [r7, #12]
 80089c4:	60b9      	str	r1, [r7, #8]
 80089c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80089c8:	68bb      	ldr	r3, [r7, #8]
 80089ca:	f003 031f 	and.w	r3, r3, #31
 80089ce:	2201      	movs	r2, #1
 80089d0:	fa02 f303 	lsl.w	r3, r2, r3
 80089d4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	6a1a      	ldr	r2, [r3, #32]
 80089da:	697b      	ldr	r3, [r7, #20]
 80089dc:	43db      	mvns	r3, r3
 80089de:	401a      	ands	r2, r3
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	6a1a      	ldr	r2, [r3, #32]
 80089e8:	68bb      	ldr	r3, [r7, #8]
 80089ea:	f003 031f 	and.w	r3, r3, #31
 80089ee:	6879      	ldr	r1, [r7, #4]
 80089f0:	fa01 f303 	lsl.w	r3, r1, r3
 80089f4:	431a      	orrs	r2, r3
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	621a      	str	r2, [r3, #32]
}
 80089fa:	bf00      	nop
 80089fc:	371c      	adds	r7, #28
 80089fe:	46bd      	mov	sp, r7
 8008a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a04:	4770      	bx	lr
	...

08008a08 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b084      	sub	sp, #16
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
 8008a10:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008a12:	683b      	ldr	r3, [r7, #0]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d109      	bne.n	8008a2c <HAL_TIMEx_PWMN_Start+0x24>
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008a1e:	b2db      	uxtb	r3, r3
 8008a20:	2b01      	cmp	r3, #1
 8008a22:	bf14      	ite	ne
 8008a24:	2301      	movne	r3, #1
 8008a26:	2300      	moveq	r3, #0
 8008a28:	b2db      	uxtb	r3, r3
 8008a2a:	e022      	b.n	8008a72 <HAL_TIMEx_PWMN_Start+0x6a>
 8008a2c:	683b      	ldr	r3, [r7, #0]
 8008a2e:	2b04      	cmp	r3, #4
 8008a30:	d109      	bne.n	8008a46 <HAL_TIMEx_PWMN_Start+0x3e>
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008a38:	b2db      	uxtb	r3, r3
 8008a3a:	2b01      	cmp	r3, #1
 8008a3c:	bf14      	ite	ne
 8008a3e:	2301      	movne	r3, #1
 8008a40:	2300      	moveq	r3, #0
 8008a42:	b2db      	uxtb	r3, r3
 8008a44:	e015      	b.n	8008a72 <HAL_TIMEx_PWMN_Start+0x6a>
 8008a46:	683b      	ldr	r3, [r7, #0]
 8008a48:	2b08      	cmp	r3, #8
 8008a4a:	d109      	bne.n	8008a60 <HAL_TIMEx_PWMN_Start+0x58>
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8008a52:	b2db      	uxtb	r3, r3
 8008a54:	2b01      	cmp	r3, #1
 8008a56:	bf14      	ite	ne
 8008a58:	2301      	movne	r3, #1
 8008a5a:	2300      	moveq	r3, #0
 8008a5c:	b2db      	uxtb	r3, r3
 8008a5e:	e008      	b.n	8008a72 <HAL_TIMEx_PWMN_Start+0x6a>
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8008a66:	b2db      	uxtb	r3, r3
 8008a68:	2b01      	cmp	r3, #1
 8008a6a:	bf14      	ite	ne
 8008a6c:	2301      	movne	r3, #1
 8008a6e:	2300      	moveq	r3, #0
 8008a70:	b2db      	uxtb	r3, r3
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d001      	beq.n	8008a7a <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8008a76:	2301      	movs	r3, #1
 8008a78:	e05a      	b.n	8008b30 <HAL_TIMEx_PWMN_Start+0x128>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008a7a:	683b      	ldr	r3, [r7, #0]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d104      	bne.n	8008a8a <HAL_TIMEx_PWMN_Start+0x82>
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	2202      	movs	r2, #2
 8008a84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008a88:	e013      	b.n	8008ab2 <HAL_TIMEx_PWMN_Start+0xaa>
 8008a8a:	683b      	ldr	r3, [r7, #0]
 8008a8c:	2b04      	cmp	r3, #4
 8008a8e:	d104      	bne.n	8008a9a <HAL_TIMEx_PWMN_Start+0x92>
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	2202      	movs	r2, #2
 8008a94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008a98:	e00b      	b.n	8008ab2 <HAL_TIMEx_PWMN_Start+0xaa>
 8008a9a:	683b      	ldr	r3, [r7, #0]
 8008a9c:	2b08      	cmp	r3, #8
 8008a9e:	d104      	bne.n	8008aaa <HAL_TIMEx_PWMN_Start+0xa2>
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	2202      	movs	r2, #2
 8008aa4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008aa8:	e003      	b.n	8008ab2 <HAL_TIMEx_PWMN_Start+0xaa>
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	2202      	movs	r2, #2
 8008aae:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	2204      	movs	r2, #4
 8008ab8:	6839      	ldr	r1, [r7, #0]
 8008aba:	4618      	mov	r0, r3
 8008abc:	f000 f93e 	bl	8008d3c <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008ace:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	4a18      	ldr	r2, [pc, #96]	; (8008b38 <HAL_TIMEx_PWMN_Start+0x130>)
 8008ad6:	4293      	cmp	r3, r2
 8008ad8:	d009      	beq.n	8008aee <HAL_TIMEx_PWMN_Start+0xe6>
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ae2:	d004      	beq.n	8008aee <HAL_TIMEx_PWMN_Start+0xe6>
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	4a14      	ldr	r2, [pc, #80]	; (8008b3c <HAL_TIMEx_PWMN_Start+0x134>)
 8008aea:	4293      	cmp	r3, r2
 8008aec:	d115      	bne.n	8008b1a <HAL_TIMEx_PWMN_Start+0x112>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	689a      	ldr	r2, [r3, #8]
 8008af4:	4b12      	ldr	r3, [pc, #72]	; (8008b40 <HAL_TIMEx_PWMN_Start+0x138>)
 8008af6:	4013      	ands	r3, r2
 8008af8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	2b06      	cmp	r3, #6
 8008afe:	d015      	beq.n	8008b2c <HAL_TIMEx_PWMN_Start+0x124>
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b06:	d011      	beq.n	8008b2c <HAL_TIMEx_PWMN_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	681a      	ldr	r2, [r3, #0]
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	f042 0201 	orr.w	r2, r2, #1
 8008b16:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b18:	e008      	b.n	8008b2c <HAL_TIMEx_PWMN_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	681a      	ldr	r2, [r3, #0]
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	f042 0201 	orr.w	r2, r2, #1
 8008b28:	601a      	str	r2, [r3, #0]
 8008b2a:	e000      	b.n	8008b2e <HAL_TIMEx_PWMN_Start+0x126>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b2c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008b2e:	2300      	movs	r3, #0
}
 8008b30:	4618      	mov	r0, r3
 8008b32:	3710      	adds	r7, #16
 8008b34:	46bd      	mov	sp, r7
 8008b36:	bd80      	pop	{r7, pc}
 8008b38:	40012c00 	.word	0x40012c00
 8008b3c:	40014000 	.word	0x40014000
 8008b40:	00010007 	.word	0x00010007

08008b44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008b44:	b480      	push	{r7}
 8008b46:	b085      	sub	sp, #20
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
 8008b4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008b54:	2b01      	cmp	r3, #1
 8008b56:	d101      	bne.n	8008b5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008b58:	2302      	movs	r3, #2
 8008b5a:	e04f      	b.n	8008bfc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	2201      	movs	r2, #1
 8008b60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	2202      	movs	r2, #2
 8008b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	685b      	ldr	r3, [r3, #4]
 8008b72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	689b      	ldr	r3, [r3, #8]
 8008b7a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	4a21      	ldr	r2, [pc, #132]	; (8008c08 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8008b82:	4293      	cmp	r3, r2
 8008b84:	d108      	bne.n	8008b98 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008b8c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008b8e:	683b      	ldr	r3, [r7, #0]
 8008b90:	685b      	ldr	r3, [r3, #4]
 8008b92:	68fa      	ldr	r2, [r7, #12]
 8008b94:	4313      	orrs	r3, r2
 8008b96:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b9e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	68fa      	ldr	r2, [r7, #12]
 8008ba6:	4313      	orrs	r3, r2
 8008ba8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	68fa      	ldr	r2, [r7, #12]
 8008bb0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	4a14      	ldr	r2, [pc, #80]	; (8008c08 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8008bb8:	4293      	cmp	r3, r2
 8008bba:	d009      	beq.n	8008bd0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008bc4:	d004      	beq.n	8008bd0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	4a10      	ldr	r2, [pc, #64]	; (8008c0c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008bcc:	4293      	cmp	r3, r2
 8008bce:	d10c      	bne.n	8008bea <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008bd0:	68bb      	ldr	r3, [r7, #8]
 8008bd2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008bd6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008bd8:	683b      	ldr	r3, [r7, #0]
 8008bda:	689b      	ldr	r3, [r3, #8]
 8008bdc:	68ba      	ldr	r2, [r7, #8]
 8008bde:	4313      	orrs	r3, r2
 8008be0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	68ba      	ldr	r2, [r7, #8]
 8008be8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	2201      	movs	r2, #1
 8008bee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	2200      	movs	r2, #0
 8008bf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008bfa:	2300      	movs	r3, #0
}
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	3714      	adds	r7, #20
 8008c00:	46bd      	mov	sp, r7
 8008c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c06:	4770      	bx	lr
 8008c08:	40012c00 	.word	0x40012c00
 8008c0c:	40014000 	.word	0x40014000

08008c10 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008c10:	b480      	push	{r7}
 8008c12:	b085      	sub	sp, #20
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
 8008c18:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008c24:	2b01      	cmp	r3, #1
 8008c26:	d101      	bne.n	8008c2c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008c28:	2302      	movs	r3, #2
 8008c2a:	e060      	b.n	8008cee <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2201      	movs	r2, #1
 8008c30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008c3a:	683b      	ldr	r3, [r7, #0]
 8008c3c:	68db      	ldr	r3, [r3, #12]
 8008c3e:	4313      	orrs	r3, r2
 8008c40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008c48:	683b      	ldr	r3, [r7, #0]
 8008c4a:	689b      	ldr	r3, [r3, #8]
 8008c4c:	4313      	orrs	r3, r2
 8008c4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008c56:	683b      	ldr	r3, [r7, #0]
 8008c58:	685b      	ldr	r3, [r3, #4]
 8008c5a:	4313      	orrs	r3, r2
 8008c5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008c64:	683b      	ldr	r3, [r7, #0]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	4313      	orrs	r3, r2
 8008c6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008c72:	683b      	ldr	r3, [r7, #0]
 8008c74:	691b      	ldr	r3, [r3, #16]
 8008c76:	4313      	orrs	r3, r2
 8008c78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008c80:	683b      	ldr	r3, [r7, #0]
 8008c82:	695b      	ldr	r3, [r3, #20]
 8008c84:	4313      	orrs	r3, r2
 8008c86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008c8e:	683b      	ldr	r3, [r7, #0]
 8008c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c92:	4313      	orrs	r3, r2
 8008c94:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8008c9c:	683b      	ldr	r3, [r7, #0]
 8008c9e:	699b      	ldr	r3, [r3, #24]
 8008ca0:	041b      	lsls	r3, r3, #16
 8008ca2:	4313      	orrs	r3, r2
 8008ca4:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	4a14      	ldr	r2, [pc, #80]	; (8008cfc <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8008cac:	4293      	cmp	r3, r2
 8008cae:	d115      	bne.n	8008cdc <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8008cb6:	683b      	ldr	r3, [r7, #0]
 8008cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cba:	051b      	lsls	r3, r3, #20
 8008cbc:	4313      	orrs	r3, r2
 8008cbe:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008cc6:	683b      	ldr	r3, [r7, #0]
 8008cc8:	69db      	ldr	r3, [r3, #28]
 8008cca:	4313      	orrs	r3, r2
 8008ccc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	6a1b      	ldr	r3, [r3, #32]
 8008cd8:	4313      	orrs	r3, r2
 8008cda:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	68fa      	ldr	r2, [r7, #12]
 8008ce2:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008cec:	2300      	movs	r3, #0
}
 8008cee:	4618      	mov	r0, r3
 8008cf0:	3714      	adds	r7, #20
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf8:	4770      	bx	lr
 8008cfa:	bf00      	nop
 8008cfc:	40012c00 	.word	0x40012c00

08008d00 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008d00:	b480      	push	{r7}
 8008d02:	b083      	sub	sp, #12
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008d08:	bf00      	nop
 8008d0a:	370c      	adds	r7, #12
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d12:	4770      	bx	lr

08008d14 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008d14:	b480      	push	{r7}
 8008d16:	b083      	sub	sp, #12
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008d1c:	bf00      	nop
 8008d1e:	370c      	adds	r7, #12
 8008d20:	46bd      	mov	sp, r7
 8008d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d26:	4770      	bx	lr

08008d28 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008d28:	b480      	push	{r7}
 8008d2a:	b083      	sub	sp, #12
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008d30:	bf00      	nop
 8008d32:	370c      	adds	r7, #12
 8008d34:	46bd      	mov	sp, r7
 8008d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3a:	4770      	bx	lr

08008d3c <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8008d3c:	b480      	push	{r7}
 8008d3e:	b087      	sub	sp, #28
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	60f8      	str	r0, [r7, #12]
 8008d44:	60b9      	str	r1, [r7, #8]
 8008d46:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008d48:	68bb      	ldr	r3, [r7, #8]
 8008d4a:	f003 031f 	and.w	r3, r3, #31
 8008d4e:	2204      	movs	r2, #4
 8008d50:	fa02 f303 	lsl.w	r3, r2, r3
 8008d54:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	6a1a      	ldr	r2, [r3, #32]
 8008d5a:	697b      	ldr	r3, [r7, #20]
 8008d5c:	43db      	mvns	r3, r3
 8008d5e:	401a      	ands	r2, r3
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	6a1a      	ldr	r2, [r3, #32]
 8008d68:	68bb      	ldr	r3, [r7, #8]
 8008d6a:	f003 031f 	and.w	r3, r3, #31
 8008d6e:	6879      	ldr	r1, [r7, #4]
 8008d70:	fa01 f303 	lsl.w	r3, r1, r3
 8008d74:	431a      	orrs	r2, r3
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	621a      	str	r2, [r3, #32]
}
 8008d7a:	bf00      	nop
 8008d7c:	371c      	adds	r7, #28
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d84:	4770      	bx	lr

08008d86 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008d86:	b580      	push	{r7, lr}
 8008d88:	b082      	sub	sp, #8
 8008d8a:	af00      	add	r7, sp, #0
 8008d8c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d101      	bne.n	8008d98 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008d94:	2301      	movs	r3, #1
 8008d96:	e040      	b.n	8008e1a <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d106      	bne.n	8008dae <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	2200      	movs	r2, #0
 8008da4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008da8:	6878      	ldr	r0, [r7, #4]
 8008daa:	f7f9 fa5f 	bl	800226c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	2224      	movs	r2, #36	; 0x24
 8008db2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	681a      	ldr	r2, [r3, #0]
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	f022 0201 	bic.w	r2, r2, #1
 8008dc2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008dc4:	6878      	ldr	r0, [r7, #4]
 8008dc6:	f000 fb2b 	bl	8009420 <UART_SetConfig>
 8008dca:	4603      	mov	r3, r0
 8008dcc:	2b01      	cmp	r3, #1
 8008dce:	d101      	bne.n	8008dd4 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8008dd0:	2301      	movs	r3, #1
 8008dd2:	e022      	b.n	8008e1a <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d002      	beq.n	8008de2 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8008ddc:	6878      	ldr	r0, [r7, #4]
 8008dde:	f000 fc55 	bl	800968c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	685a      	ldr	r2, [r3, #4]
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008df0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	689a      	ldr	r2, [r3, #8]
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008e00:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	681a      	ldr	r2, [r3, #0]
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	f042 0201 	orr.w	r2, r2, #1
 8008e10:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008e12:	6878      	ldr	r0, [r7, #4]
 8008e14:	f000 fcdc 	bl	80097d0 <UART_CheckIdleState>
 8008e18:	4603      	mov	r3, r0
}
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	3708      	adds	r7, #8
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	bd80      	pop	{r7, pc}
	...

08008e24 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008e24:	b580      	push	{r7, lr}
 8008e26:	b0ba      	sub	sp, #232	; 0xe8
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	69db      	ldr	r3, [r3, #28]
 8008e32:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	689b      	ldr	r3, [r3, #8]
 8008e46:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008e4a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8008e4e:	f640 030f 	movw	r3, #2063	; 0x80f
 8008e52:	4013      	ands	r3, r2
 8008e54:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8008e58:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d115      	bne.n	8008e8c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8008e60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e64:	f003 0320 	and.w	r3, r3, #32
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d00f      	beq.n	8008e8c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008e6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008e70:	f003 0320 	and.w	r3, r3, #32
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d009      	beq.n	8008e8c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	f000 82a3 	beq.w	80093c8 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008e86:	6878      	ldr	r0, [r7, #4]
 8008e88:	4798      	blx	r3
      }
      return;
 8008e8a:	e29d      	b.n	80093c8 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008e8c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	f000 8117 	beq.w	80090c4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8008e96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008e9a:	f003 0301 	and.w	r3, r3, #1
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d106      	bne.n	8008eb0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8008ea2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8008ea6:	4b85      	ldr	r3, [pc, #532]	; (80090bc <HAL_UART_IRQHandler+0x298>)
 8008ea8:	4013      	ands	r3, r2
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	f000 810a 	beq.w	80090c4 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008eb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008eb4:	f003 0301 	and.w	r3, r3, #1
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d011      	beq.n	8008ee0 <HAL_UART_IRQHandler+0xbc>
 8008ebc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008ec0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d00b      	beq.n	8008ee0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	2201      	movs	r2, #1
 8008ece:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008ed6:	f043 0201 	orr.w	r2, r3, #1
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008ee0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ee4:	f003 0302 	and.w	r3, r3, #2
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d011      	beq.n	8008f10 <HAL_UART_IRQHandler+0xec>
 8008eec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008ef0:	f003 0301 	and.w	r3, r3, #1
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d00b      	beq.n	8008f10 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	2202      	movs	r2, #2
 8008efe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f06:	f043 0204 	orr.w	r2, r3, #4
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008f10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f14:	f003 0304 	and.w	r3, r3, #4
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d011      	beq.n	8008f40 <HAL_UART_IRQHandler+0x11c>
 8008f1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008f20:	f003 0301 	and.w	r3, r3, #1
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d00b      	beq.n	8008f40 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	2204      	movs	r2, #4
 8008f2e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f36:	f043 0202 	orr.w	r2, r3, #2
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008f40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f44:	f003 0308 	and.w	r3, r3, #8
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d017      	beq.n	8008f7c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008f4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008f50:	f003 0320 	and.w	r3, r3, #32
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d105      	bne.n	8008f64 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8008f58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008f5c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d00b      	beq.n	8008f7c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	2208      	movs	r2, #8
 8008f6a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f72:	f043 0208 	orr.w	r2, r3, #8
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008f7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d012      	beq.n	8008fae <HAL_UART_IRQHandler+0x18a>
 8008f88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008f8c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d00c      	beq.n	8008fae <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008f9c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008fa4:	f043 0220 	orr.w	r2, r3, #32
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	f000 8209 	beq.w	80093cc <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8008fba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008fbe:	f003 0320 	and.w	r3, r3, #32
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d00d      	beq.n	8008fe2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008fc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008fca:	f003 0320 	and.w	r3, r3, #32
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d007      	beq.n	8008fe2 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d003      	beq.n	8008fe2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008fde:	6878      	ldr	r0, [r7, #4]
 8008fe0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008fe8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	689b      	ldr	r3, [r3, #8]
 8008ff2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ff6:	2b40      	cmp	r3, #64	; 0x40
 8008ff8:	d005      	beq.n	8009006 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008ffa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008ffe:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009002:	2b00      	cmp	r3, #0
 8009004:	d04f      	beq.n	80090a6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009006:	6878      	ldr	r0, [r7, #4]
 8009008:	f000 fcef 	bl	80099ea <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	689b      	ldr	r3, [r3, #8]
 8009012:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009016:	2b40      	cmp	r3, #64	; 0x40
 8009018:	d141      	bne.n	800909e <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	3308      	adds	r3, #8
 8009020:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009024:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009028:	e853 3f00 	ldrex	r3, [r3]
 800902c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009030:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009034:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009038:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	3308      	adds	r3, #8
 8009042:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009046:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800904a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800904e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009052:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009056:	e841 2300 	strex	r3, r2, [r1]
 800905a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800905e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009062:	2b00      	cmp	r3, #0
 8009064:	d1d9      	bne.n	800901a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800906a:	2b00      	cmp	r3, #0
 800906c:	d013      	beq.n	8009096 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009072:	4a13      	ldr	r2, [pc, #76]	; (80090c0 <HAL_UART_IRQHandler+0x29c>)
 8009074:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800907a:	4618      	mov	r0, r3
 800907c:	f7fa ff42 	bl	8003f04 <HAL_DMA_Abort_IT>
 8009080:	4603      	mov	r3, r0
 8009082:	2b00      	cmp	r3, #0
 8009084:	d017      	beq.n	80090b6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800908a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800908c:	687a      	ldr	r2, [r7, #4]
 800908e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8009090:	4610      	mov	r0, r2
 8009092:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009094:	e00f      	b.n	80090b6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009096:	6878      	ldr	r0, [r7, #4]
 8009098:	f000 f9ac 	bl	80093f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800909c:	e00b      	b.n	80090b6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800909e:	6878      	ldr	r0, [r7, #4]
 80090a0:	f000 f9a8 	bl	80093f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80090a4:	e007      	b.n	80090b6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80090a6:	6878      	ldr	r0, [r7, #4]
 80090a8:	f000 f9a4 	bl	80093f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	2200      	movs	r2, #0
 80090b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80090b4:	e18a      	b.n	80093cc <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80090b6:	bf00      	nop
    return;
 80090b8:	e188      	b.n	80093cc <HAL_UART_IRQHandler+0x5a8>
 80090ba:	bf00      	nop
 80090bc:	04000120 	.word	0x04000120
 80090c0:	08009ab1 	.word	0x08009ab1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80090c8:	2b01      	cmp	r3, #1
 80090ca:	f040 8143 	bne.w	8009354 <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80090ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80090d2:	f003 0310 	and.w	r3, r3, #16
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	f000 813c 	beq.w	8009354 <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80090dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80090e0:	f003 0310 	and.w	r3, r3, #16
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	f000 8135 	beq.w	8009354 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	2210      	movs	r2, #16
 80090f0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	689b      	ldr	r3, [r3, #8]
 80090f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090fc:	2b40      	cmp	r3, #64	; 0x40
 80090fe:	f040 80b1 	bne.w	8009264 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	685b      	ldr	r3, [r3, #4]
 800910a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800910e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009112:	2b00      	cmp	r3, #0
 8009114:	f000 815c 	beq.w	80093d0 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800911e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009122:	429a      	cmp	r2, r3
 8009124:	f080 8154 	bcs.w	80093d0 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800912e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009136:	699b      	ldr	r3, [r3, #24]
 8009138:	2b20      	cmp	r3, #32
 800913a:	f000 8085 	beq.w	8009248 <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009146:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800914a:	e853 3f00 	ldrex	r3, [r3]
 800914e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009152:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009156:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800915a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	461a      	mov	r2, r3
 8009164:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009168:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800916c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009170:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009174:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009178:	e841 2300 	strex	r3, r2, [r1]
 800917c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009180:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009184:	2b00      	cmp	r3, #0
 8009186:	d1da      	bne.n	800913e <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	3308      	adds	r3, #8
 800918e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009190:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009192:	e853 3f00 	ldrex	r3, [r3]
 8009196:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009198:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800919a:	f023 0301 	bic.w	r3, r3, #1
 800919e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	3308      	adds	r3, #8
 80091a8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80091ac:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80091b0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091b2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80091b4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80091b8:	e841 2300 	strex	r3, r2, [r1]
 80091bc:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80091be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d1e1      	bne.n	8009188 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	3308      	adds	r3, #8
 80091ca:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80091ce:	e853 3f00 	ldrex	r3, [r3]
 80091d2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80091d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80091d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80091da:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	3308      	adds	r3, #8
 80091e4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80091e8:	66fa      	str	r2, [r7, #108]	; 0x6c
 80091ea:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091ec:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80091ee:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80091f0:	e841 2300 	strex	r3, r2, [r1]
 80091f4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80091f6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d1e3      	bne.n	80091c4 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	2220      	movs	r2, #32
 8009200:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	2200      	movs	r2, #0
 8009206:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800920e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009210:	e853 3f00 	ldrex	r3, [r3]
 8009214:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009216:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009218:	f023 0310 	bic.w	r3, r3, #16
 800921c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	461a      	mov	r2, r3
 8009226:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800922a:	65bb      	str	r3, [r7, #88]	; 0x58
 800922c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800922e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009230:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009232:	e841 2300 	strex	r3, r2, [r1]
 8009236:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009238:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800923a:	2b00      	cmp	r3, #0
 800923c:	d1e4      	bne.n	8009208 <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009242:	4618      	mov	r0, r3
 8009244:	f7fa fe25 	bl	8003e92 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009254:	b29b      	uxth	r3, r3
 8009256:	1ad3      	subs	r3, r2, r3
 8009258:	b29b      	uxth	r3, r3
 800925a:	4619      	mov	r1, r3
 800925c:	6878      	ldr	r0, [r7, #4]
 800925e:	f000 f8d3 	bl	8009408 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009262:	e0b5      	b.n	80093d0 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009270:	b29b      	uxth	r3, r3
 8009272:	1ad3      	subs	r3, r2, r3
 8009274:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800927e:	b29b      	uxth	r3, r3
 8009280:	2b00      	cmp	r3, #0
 8009282:	f000 80a7 	beq.w	80093d4 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 8009286:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800928a:	2b00      	cmp	r3, #0
 800928c:	f000 80a2 	beq.w	80093d4 <HAL_UART_IRQHandler+0x5b0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009298:	e853 3f00 	ldrex	r3, [r3]
 800929c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800929e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092a0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80092a4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	461a      	mov	r2, r3
 80092ae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80092b2:	647b      	str	r3, [r7, #68]	; 0x44
 80092b4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092b6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80092b8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80092ba:	e841 2300 	strex	r3, r2, [r1]
 80092be:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80092c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d1e4      	bne.n	8009290 <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	3308      	adds	r3, #8
 80092cc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092d0:	e853 3f00 	ldrex	r3, [r3]
 80092d4:	623b      	str	r3, [r7, #32]
   return(result);
 80092d6:	6a3b      	ldr	r3, [r7, #32]
 80092d8:	f023 0301 	bic.w	r3, r3, #1
 80092dc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	3308      	adds	r3, #8
 80092e6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80092ea:	633a      	str	r2, [r7, #48]	; 0x30
 80092ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80092f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80092f2:	e841 2300 	strex	r3, r2, [r1]
 80092f6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80092f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d1e3      	bne.n	80092c6 <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	2220      	movs	r2, #32
 8009302:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	2200      	movs	r2, #0
 8009308:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	2200      	movs	r2, #0
 800930e:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009316:	693b      	ldr	r3, [r7, #16]
 8009318:	e853 3f00 	ldrex	r3, [r3]
 800931c:	60fb      	str	r3, [r7, #12]
   return(result);
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	f023 0310 	bic.w	r3, r3, #16
 8009324:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	461a      	mov	r2, r3
 800932e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009332:	61fb      	str	r3, [r7, #28]
 8009334:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009336:	69b9      	ldr	r1, [r7, #24]
 8009338:	69fa      	ldr	r2, [r7, #28]
 800933a:	e841 2300 	strex	r3, r2, [r1]
 800933e:	617b      	str	r3, [r7, #20]
   return(result);
 8009340:	697b      	ldr	r3, [r7, #20]
 8009342:	2b00      	cmp	r3, #0
 8009344:	d1e4      	bne.n	8009310 <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009346:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800934a:	4619      	mov	r1, r3
 800934c:	6878      	ldr	r0, [r7, #4]
 800934e:	f000 f85b 	bl	8009408 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009352:	e03f      	b.n	80093d4 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009354:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009358:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800935c:	2b00      	cmp	r3, #0
 800935e:	d00e      	beq.n	800937e <HAL_UART_IRQHandler+0x55a>
 8009360:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009364:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009368:	2b00      	cmp	r3, #0
 800936a:	d008      	beq.n	800937e <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009374:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009376:	6878      	ldr	r0, [r7, #4]
 8009378:	f000 fbda 	bl	8009b30 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800937c:	e02d      	b.n	80093da <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800937e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009382:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009386:	2b00      	cmp	r3, #0
 8009388:	d00e      	beq.n	80093a8 <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800938a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800938e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009392:	2b00      	cmp	r3, #0
 8009394:	d008      	beq.n	80093a8 <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800939a:	2b00      	cmp	r3, #0
 800939c:	d01c      	beq.n	80093d8 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80093a2:	6878      	ldr	r0, [r7, #4]
 80093a4:	4798      	blx	r3
    }
    return;
 80093a6:	e017      	b.n	80093d8 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80093a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80093ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d012      	beq.n	80093da <HAL_UART_IRQHandler+0x5b6>
 80093b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80093b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d00c      	beq.n	80093da <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 80093c0:	6878      	ldr	r0, [r7, #4]
 80093c2:	f000 fb8b 	bl	8009adc <UART_EndTransmit_IT>
    return;
 80093c6:	e008      	b.n	80093da <HAL_UART_IRQHandler+0x5b6>
      return;
 80093c8:	bf00      	nop
 80093ca:	e006      	b.n	80093da <HAL_UART_IRQHandler+0x5b6>
    return;
 80093cc:	bf00      	nop
 80093ce:	e004      	b.n	80093da <HAL_UART_IRQHandler+0x5b6>
      return;
 80093d0:	bf00      	nop
 80093d2:	e002      	b.n	80093da <HAL_UART_IRQHandler+0x5b6>
      return;
 80093d4:	bf00      	nop
 80093d6:	e000      	b.n	80093da <HAL_UART_IRQHandler+0x5b6>
    return;
 80093d8:	bf00      	nop
  }

}
 80093da:	37e8      	adds	r7, #232	; 0xe8
 80093dc:	46bd      	mov	sp, r7
 80093de:	bd80      	pop	{r7, pc}

080093e0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80093e0:	b480      	push	{r7}
 80093e2:	b083      	sub	sp, #12
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80093e8:	bf00      	nop
 80093ea:	370c      	adds	r7, #12
 80093ec:	46bd      	mov	sp, r7
 80093ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f2:	4770      	bx	lr

080093f4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80093f4:	b480      	push	{r7}
 80093f6:	b083      	sub	sp, #12
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80093fc:	bf00      	nop
 80093fe:	370c      	adds	r7, #12
 8009400:	46bd      	mov	sp, r7
 8009402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009406:	4770      	bx	lr

08009408 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009408:	b480      	push	{r7}
 800940a:	b083      	sub	sp, #12
 800940c:	af00      	add	r7, sp, #0
 800940e:	6078      	str	r0, [r7, #4]
 8009410:	460b      	mov	r3, r1
 8009412:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009414:	bf00      	nop
 8009416:	370c      	adds	r7, #12
 8009418:	46bd      	mov	sp, r7
 800941a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941e:	4770      	bx	lr

08009420 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009420:	b580      	push	{r7, lr}
 8009422:	b088      	sub	sp, #32
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009428:	2300      	movs	r3, #0
 800942a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	689a      	ldr	r2, [r3, #8]
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	691b      	ldr	r3, [r3, #16]
 8009434:	431a      	orrs	r2, r3
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	695b      	ldr	r3, [r3, #20]
 800943a:	431a      	orrs	r2, r3
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	69db      	ldr	r3, [r3, #28]
 8009440:	4313      	orrs	r3, r2
 8009442:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	681a      	ldr	r2, [r3, #0]
 800944a:	4b8a      	ldr	r3, [pc, #552]	; (8009674 <UART_SetConfig+0x254>)
 800944c:	4013      	ands	r3, r2
 800944e:	687a      	ldr	r2, [r7, #4]
 8009450:	6812      	ldr	r2, [r2, #0]
 8009452:	6979      	ldr	r1, [r7, #20]
 8009454:	430b      	orrs	r3, r1
 8009456:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	685b      	ldr	r3, [r3, #4]
 800945e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	68da      	ldr	r2, [r3, #12]
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	430a      	orrs	r2, r1
 800946c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	699b      	ldr	r3, [r3, #24]
 8009472:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	6a1b      	ldr	r3, [r3, #32]
 8009478:	697a      	ldr	r2, [r7, #20]
 800947a:	4313      	orrs	r3, r2
 800947c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	689b      	ldr	r3, [r3, #8]
 8009484:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	697a      	ldr	r2, [r7, #20]
 800948e:	430a      	orrs	r2, r1
 8009490:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	4a78      	ldr	r2, [pc, #480]	; (8009678 <UART_SetConfig+0x258>)
 8009498:	4293      	cmp	r3, r2
 800949a:	d120      	bne.n	80094de <UART_SetConfig+0xbe>
 800949c:	4b77      	ldr	r3, [pc, #476]	; (800967c <UART_SetConfig+0x25c>)
 800949e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094a0:	f003 0303 	and.w	r3, r3, #3
 80094a4:	2b03      	cmp	r3, #3
 80094a6:	d817      	bhi.n	80094d8 <UART_SetConfig+0xb8>
 80094a8:	a201      	add	r2, pc, #4	; (adr r2, 80094b0 <UART_SetConfig+0x90>)
 80094aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094ae:	bf00      	nop
 80094b0:	080094c1 	.word	0x080094c1
 80094b4:	080094cd 	.word	0x080094cd
 80094b8:	080094d3 	.word	0x080094d3
 80094bc:	080094c7 	.word	0x080094c7
 80094c0:	2300      	movs	r3, #0
 80094c2:	77fb      	strb	r3, [r7, #31]
 80094c4:	e01d      	b.n	8009502 <UART_SetConfig+0xe2>
 80094c6:	2302      	movs	r3, #2
 80094c8:	77fb      	strb	r3, [r7, #31]
 80094ca:	e01a      	b.n	8009502 <UART_SetConfig+0xe2>
 80094cc:	2304      	movs	r3, #4
 80094ce:	77fb      	strb	r3, [r7, #31]
 80094d0:	e017      	b.n	8009502 <UART_SetConfig+0xe2>
 80094d2:	2308      	movs	r3, #8
 80094d4:	77fb      	strb	r3, [r7, #31]
 80094d6:	e014      	b.n	8009502 <UART_SetConfig+0xe2>
 80094d8:	2310      	movs	r3, #16
 80094da:	77fb      	strb	r3, [r7, #31]
 80094dc:	e011      	b.n	8009502 <UART_SetConfig+0xe2>
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	4a67      	ldr	r2, [pc, #412]	; (8009680 <UART_SetConfig+0x260>)
 80094e4:	4293      	cmp	r3, r2
 80094e6:	d102      	bne.n	80094ee <UART_SetConfig+0xce>
 80094e8:	2300      	movs	r3, #0
 80094ea:	77fb      	strb	r3, [r7, #31]
 80094ec:	e009      	b.n	8009502 <UART_SetConfig+0xe2>
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	4a64      	ldr	r2, [pc, #400]	; (8009684 <UART_SetConfig+0x264>)
 80094f4:	4293      	cmp	r3, r2
 80094f6:	d102      	bne.n	80094fe <UART_SetConfig+0xde>
 80094f8:	2300      	movs	r3, #0
 80094fa:	77fb      	strb	r3, [r7, #31]
 80094fc:	e001      	b.n	8009502 <UART_SetConfig+0xe2>
 80094fe:	2310      	movs	r3, #16
 8009500:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	69db      	ldr	r3, [r3, #28]
 8009506:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800950a:	d15b      	bne.n	80095c4 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 800950c:	7ffb      	ldrb	r3, [r7, #31]
 800950e:	2b08      	cmp	r3, #8
 8009510:	d827      	bhi.n	8009562 <UART_SetConfig+0x142>
 8009512:	a201      	add	r2, pc, #4	; (adr r2, 8009518 <UART_SetConfig+0xf8>)
 8009514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009518:	0800953d 	.word	0x0800953d
 800951c:	08009545 	.word	0x08009545
 8009520:	0800954d 	.word	0x0800954d
 8009524:	08009563 	.word	0x08009563
 8009528:	08009553 	.word	0x08009553
 800952c:	08009563 	.word	0x08009563
 8009530:	08009563 	.word	0x08009563
 8009534:	08009563 	.word	0x08009563
 8009538:	0800955b 	.word	0x0800955b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800953c:	f7fd fec4 	bl	80072c8 <HAL_RCC_GetPCLK1Freq>
 8009540:	61b8      	str	r0, [r7, #24]
        break;
 8009542:	e013      	b.n	800956c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009544:	f7fd fee2 	bl	800730c <HAL_RCC_GetPCLK2Freq>
 8009548:	61b8      	str	r0, [r7, #24]
        break;
 800954a:	e00f      	b.n	800956c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800954c:	4b4e      	ldr	r3, [pc, #312]	; (8009688 <UART_SetConfig+0x268>)
 800954e:	61bb      	str	r3, [r7, #24]
        break;
 8009550:	e00c      	b.n	800956c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009552:	f7fd fe43 	bl	80071dc <HAL_RCC_GetSysClockFreq>
 8009556:	61b8      	str	r0, [r7, #24]
        break;
 8009558:	e008      	b.n	800956c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800955a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800955e:	61bb      	str	r3, [r7, #24]
        break;
 8009560:	e004      	b.n	800956c <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8009562:	2300      	movs	r3, #0
 8009564:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009566:	2301      	movs	r3, #1
 8009568:	77bb      	strb	r3, [r7, #30]
        break;
 800956a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800956c:	69bb      	ldr	r3, [r7, #24]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d074      	beq.n	800965c <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009572:	69bb      	ldr	r3, [r7, #24]
 8009574:	005a      	lsls	r2, r3, #1
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	685b      	ldr	r3, [r3, #4]
 800957a:	085b      	lsrs	r3, r3, #1
 800957c:	441a      	add	r2, r3
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	685b      	ldr	r3, [r3, #4]
 8009582:	fbb2 f3f3 	udiv	r3, r2, r3
 8009586:	b29b      	uxth	r3, r3
 8009588:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800958a:	693b      	ldr	r3, [r7, #16]
 800958c:	2b0f      	cmp	r3, #15
 800958e:	d916      	bls.n	80095be <UART_SetConfig+0x19e>
 8009590:	693b      	ldr	r3, [r7, #16]
 8009592:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009596:	d212      	bcs.n	80095be <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009598:	693b      	ldr	r3, [r7, #16]
 800959a:	b29b      	uxth	r3, r3
 800959c:	f023 030f 	bic.w	r3, r3, #15
 80095a0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80095a2:	693b      	ldr	r3, [r7, #16]
 80095a4:	085b      	lsrs	r3, r3, #1
 80095a6:	b29b      	uxth	r3, r3
 80095a8:	f003 0307 	and.w	r3, r3, #7
 80095ac:	b29a      	uxth	r2, r3
 80095ae:	89fb      	ldrh	r3, [r7, #14]
 80095b0:	4313      	orrs	r3, r2
 80095b2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	89fa      	ldrh	r2, [r7, #14]
 80095ba:	60da      	str	r2, [r3, #12]
 80095bc:	e04e      	b.n	800965c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80095be:	2301      	movs	r3, #1
 80095c0:	77bb      	strb	r3, [r7, #30]
 80095c2:	e04b      	b.n	800965c <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80095c4:	7ffb      	ldrb	r3, [r7, #31]
 80095c6:	2b08      	cmp	r3, #8
 80095c8:	d827      	bhi.n	800961a <UART_SetConfig+0x1fa>
 80095ca:	a201      	add	r2, pc, #4	; (adr r2, 80095d0 <UART_SetConfig+0x1b0>)
 80095cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095d0:	080095f5 	.word	0x080095f5
 80095d4:	080095fd 	.word	0x080095fd
 80095d8:	08009605 	.word	0x08009605
 80095dc:	0800961b 	.word	0x0800961b
 80095e0:	0800960b 	.word	0x0800960b
 80095e4:	0800961b 	.word	0x0800961b
 80095e8:	0800961b 	.word	0x0800961b
 80095ec:	0800961b 	.word	0x0800961b
 80095f0:	08009613 	.word	0x08009613
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80095f4:	f7fd fe68 	bl	80072c8 <HAL_RCC_GetPCLK1Freq>
 80095f8:	61b8      	str	r0, [r7, #24]
        break;
 80095fa:	e013      	b.n	8009624 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80095fc:	f7fd fe86 	bl	800730c <HAL_RCC_GetPCLK2Freq>
 8009600:	61b8      	str	r0, [r7, #24]
        break;
 8009602:	e00f      	b.n	8009624 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009604:	4b20      	ldr	r3, [pc, #128]	; (8009688 <UART_SetConfig+0x268>)
 8009606:	61bb      	str	r3, [r7, #24]
        break;
 8009608:	e00c      	b.n	8009624 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800960a:	f7fd fde7 	bl	80071dc <HAL_RCC_GetSysClockFreq>
 800960e:	61b8      	str	r0, [r7, #24]
        break;
 8009610:	e008      	b.n	8009624 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009612:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009616:	61bb      	str	r3, [r7, #24]
        break;
 8009618:	e004      	b.n	8009624 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800961a:	2300      	movs	r3, #0
 800961c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800961e:	2301      	movs	r3, #1
 8009620:	77bb      	strb	r3, [r7, #30]
        break;
 8009622:	bf00      	nop
    }

    if (pclk != 0U)
 8009624:	69bb      	ldr	r3, [r7, #24]
 8009626:	2b00      	cmp	r3, #0
 8009628:	d018      	beq.n	800965c <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	685b      	ldr	r3, [r3, #4]
 800962e:	085a      	lsrs	r2, r3, #1
 8009630:	69bb      	ldr	r3, [r7, #24]
 8009632:	441a      	add	r2, r3
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	685b      	ldr	r3, [r3, #4]
 8009638:	fbb2 f3f3 	udiv	r3, r2, r3
 800963c:	b29b      	uxth	r3, r3
 800963e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009640:	693b      	ldr	r3, [r7, #16]
 8009642:	2b0f      	cmp	r3, #15
 8009644:	d908      	bls.n	8009658 <UART_SetConfig+0x238>
 8009646:	693b      	ldr	r3, [r7, #16]
 8009648:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800964c:	d204      	bcs.n	8009658 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	693a      	ldr	r2, [r7, #16]
 8009654:	60da      	str	r2, [r3, #12]
 8009656:	e001      	b.n	800965c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8009658:	2301      	movs	r3, #1
 800965a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	2200      	movs	r2, #0
 8009660:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	2200      	movs	r2, #0
 8009666:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8009668:	7fbb      	ldrb	r3, [r7, #30]
}
 800966a:	4618      	mov	r0, r3
 800966c:	3720      	adds	r7, #32
 800966e:	46bd      	mov	sp, r7
 8009670:	bd80      	pop	{r7, pc}
 8009672:	bf00      	nop
 8009674:	efff69f3 	.word	0xefff69f3
 8009678:	40013800 	.word	0x40013800
 800967c:	40021000 	.word	0x40021000
 8009680:	40004400 	.word	0x40004400
 8009684:	40004800 	.word	0x40004800
 8009688:	007a1200 	.word	0x007a1200

0800968c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800968c:	b480      	push	{r7}
 800968e:	b083      	sub	sp, #12
 8009690:	af00      	add	r7, sp, #0
 8009692:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009698:	f003 0301 	and.w	r3, r3, #1
 800969c:	2b00      	cmp	r3, #0
 800969e:	d00a      	beq.n	80096b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	685b      	ldr	r3, [r3, #4]
 80096a6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	430a      	orrs	r2, r1
 80096b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096ba:	f003 0302 	and.w	r3, r3, #2
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d00a      	beq.n	80096d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	685b      	ldr	r3, [r3, #4]
 80096c8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	430a      	orrs	r2, r1
 80096d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096dc:	f003 0304 	and.w	r3, r3, #4
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d00a      	beq.n	80096fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	685b      	ldr	r3, [r3, #4]
 80096ea:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	430a      	orrs	r2, r1
 80096f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096fe:	f003 0308 	and.w	r3, r3, #8
 8009702:	2b00      	cmp	r3, #0
 8009704:	d00a      	beq.n	800971c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	685b      	ldr	r3, [r3, #4]
 800970c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	430a      	orrs	r2, r1
 800971a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009720:	f003 0310 	and.w	r3, r3, #16
 8009724:	2b00      	cmp	r3, #0
 8009726:	d00a      	beq.n	800973e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	689b      	ldr	r3, [r3, #8]
 800972e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	430a      	orrs	r2, r1
 800973c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009742:	f003 0320 	and.w	r3, r3, #32
 8009746:	2b00      	cmp	r3, #0
 8009748:	d00a      	beq.n	8009760 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	689b      	ldr	r3, [r3, #8]
 8009750:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	430a      	orrs	r2, r1
 800975e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009764:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009768:	2b00      	cmp	r3, #0
 800976a:	d01a      	beq.n	80097a2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	685b      	ldr	r3, [r3, #4]
 8009772:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	430a      	orrs	r2, r1
 8009780:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009786:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800978a:	d10a      	bne.n	80097a2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	685b      	ldr	r3, [r3, #4]
 8009792:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	430a      	orrs	r2, r1
 80097a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d00a      	beq.n	80097c4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	685b      	ldr	r3, [r3, #4]
 80097b4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	430a      	orrs	r2, r1
 80097c2:	605a      	str	r2, [r3, #4]
  }
}
 80097c4:	bf00      	nop
 80097c6:	370c      	adds	r7, #12
 80097c8:	46bd      	mov	sp, r7
 80097ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ce:	4770      	bx	lr

080097d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80097d0:	b580      	push	{r7, lr}
 80097d2:	b086      	sub	sp, #24
 80097d4:	af02      	add	r7, sp, #8
 80097d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	2200      	movs	r2, #0
 80097dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80097e0:	f7f8 fe3e 	bl	8002460 <HAL_GetTick>
 80097e4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	f003 0308 	and.w	r3, r3, #8
 80097f0:	2b08      	cmp	r3, #8
 80097f2:	d10e      	bne.n	8009812 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80097f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80097f8:	9300      	str	r3, [sp, #0]
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	2200      	movs	r2, #0
 80097fe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009802:	6878      	ldr	r0, [r7, #4]
 8009804:	f000 f82d 	bl	8009862 <UART_WaitOnFlagUntilTimeout>
 8009808:	4603      	mov	r3, r0
 800980a:	2b00      	cmp	r3, #0
 800980c:	d001      	beq.n	8009812 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800980e:	2303      	movs	r3, #3
 8009810:	e023      	b.n	800985a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	f003 0304 	and.w	r3, r3, #4
 800981c:	2b04      	cmp	r3, #4
 800981e:	d10e      	bne.n	800983e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009820:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009824:	9300      	str	r3, [sp, #0]
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	2200      	movs	r2, #0
 800982a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800982e:	6878      	ldr	r0, [r7, #4]
 8009830:	f000 f817 	bl	8009862 <UART_WaitOnFlagUntilTimeout>
 8009834:	4603      	mov	r3, r0
 8009836:	2b00      	cmp	r3, #0
 8009838:	d001      	beq.n	800983e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800983a:	2303      	movs	r3, #3
 800983c:	e00d      	b.n	800985a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	2220      	movs	r2, #32
 8009842:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	2220      	movs	r2, #32
 8009848:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	2200      	movs	r2, #0
 800984e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	2200      	movs	r2, #0
 8009854:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8009858:	2300      	movs	r3, #0
}
 800985a:	4618      	mov	r0, r3
 800985c:	3710      	adds	r7, #16
 800985e:	46bd      	mov	sp, r7
 8009860:	bd80      	pop	{r7, pc}

08009862 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009862:	b580      	push	{r7, lr}
 8009864:	b09c      	sub	sp, #112	; 0x70
 8009866:	af00      	add	r7, sp, #0
 8009868:	60f8      	str	r0, [r7, #12]
 800986a:	60b9      	str	r1, [r7, #8]
 800986c:	603b      	str	r3, [r7, #0]
 800986e:	4613      	mov	r3, r2
 8009870:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009872:	e0a5      	b.n	80099c0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009874:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009876:	f1b3 3fff 	cmp.w	r3, #4294967295
 800987a:	f000 80a1 	beq.w	80099c0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800987e:	f7f8 fdef 	bl	8002460 <HAL_GetTick>
 8009882:	4602      	mov	r2, r0
 8009884:	683b      	ldr	r3, [r7, #0]
 8009886:	1ad3      	subs	r3, r2, r3
 8009888:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800988a:	429a      	cmp	r2, r3
 800988c:	d302      	bcc.n	8009894 <UART_WaitOnFlagUntilTimeout+0x32>
 800988e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009890:	2b00      	cmp	r3, #0
 8009892:	d13e      	bne.n	8009912 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800989a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800989c:	e853 3f00 	ldrex	r3, [r3]
 80098a0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80098a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80098a4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80098a8:	667b      	str	r3, [r7, #100]	; 0x64
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	461a      	mov	r2, r3
 80098b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80098b2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80098b4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098b6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80098b8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80098ba:	e841 2300 	strex	r3, r2, [r1]
 80098be:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80098c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d1e6      	bne.n	8009894 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	3308      	adds	r3, #8
 80098cc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80098d0:	e853 3f00 	ldrex	r3, [r3]
 80098d4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80098d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098d8:	f023 0301 	bic.w	r3, r3, #1
 80098dc:	663b      	str	r3, [r7, #96]	; 0x60
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	3308      	adds	r3, #8
 80098e4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80098e6:	64ba      	str	r2, [r7, #72]	; 0x48
 80098e8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098ea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80098ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80098ee:	e841 2300 	strex	r3, r2, [r1]
 80098f2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80098f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d1e5      	bne.n	80098c6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	2220      	movs	r2, #32
 80098fe:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	2220      	movs	r2, #32
 8009904:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	2200      	movs	r2, #0
 800990a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800990e:	2303      	movs	r3, #3
 8009910:	e067      	b.n	80099e2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	f003 0304 	and.w	r3, r3, #4
 800991c:	2b00      	cmp	r3, #0
 800991e:	d04f      	beq.n	80099c0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	69db      	ldr	r3, [r3, #28]
 8009926:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800992a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800992e:	d147      	bne.n	80099c0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009938:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009942:	e853 3f00 	ldrex	r3, [r3]
 8009946:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800994a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800994e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	461a      	mov	r2, r3
 8009956:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009958:	637b      	str	r3, [r7, #52]	; 0x34
 800995a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800995c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800995e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009960:	e841 2300 	strex	r3, r2, [r1]
 8009964:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009968:	2b00      	cmp	r3, #0
 800996a:	d1e6      	bne.n	800993a <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	3308      	adds	r3, #8
 8009972:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009974:	697b      	ldr	r3, [r7, #20]
 8009976:	e853 3f00 	ldrex	r3, [r3]
 800997a:	613b      	str	r3, [r7, #16]
   return(result);
 800997c:	693b      	ldr	r3, [r7, #16]
 800997e:	f023 0301 	bic.w	r3, r3, #1
 8009982:	66bb      	str	r3, [r7, #104]	; 0x68
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	3308      	adds	r3, #8
 800998a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800998c:	623a      	str	r2, [r7, #32]
 800998e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009990:	69f9      	ldr	r1, [r7, #28]
 8009992:	6a3a      	ldr	r2, [r7, #32]
 8009994:	e841 2300 	strex	r3, r2, [r1]
 8009998:	61bb      	str	r3, [r7, #24]
   return(result);
 800999a:	69bb      	ldr	r3, [r7, #24]
 800999c:	2b00      	cmp	r3, #0
 800999e:	d1e5      	bne.n	800996c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	2220      	movs	r2, #32
 80099a4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	2220      	movs	r2, #32
 80099aa:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	2220      	movs	r2, #32
 80099b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	2200      	movs	r2, #0
 80099b8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80099bc:	2303      	movs	r3, #3
 80099be:	e010      	b.n	80099e2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	69da      	ldr	r2, [r3, #28]
 80099c6:	68bb      	ldr	r3, [r7, #8]
 80099c8:	4013      	ands	r3, r2
 80099ca:	68ba      	ldr	r2, [r7, #8]
 80099cc:	429a      	cmp	r2, r3
 80099ce:	bf0c      	ite	eq
 80099d0:	2301      	moveq	r3, #1
 80099d2:	2300      	movne	r3, #0
 80099d4:	b2db      	uxtb	r3, r3
 80099d6:	461a      	mov	r2, r3
 80099d8:	79fb      	ldrb	r3, [r7, #7]
 80099da:	429a      	cmp	r2, r3
 80099dc:	f43f af4a 	beq.w	8009874 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80099e0:	2300      	movs	r3, #0
}
 80099e2:	4618      	mov	r0, r3
 80099e4:	3770      	adds	r7, #112	; 0x70
 80099e6:	46bd      	mov	sp, r7
 80099e8:	bd80      	pop	{r7, pc}

080099ea <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80099ea:	b480      	push	{r7}
 80099ec:	b095      	sub	sp, #84	; 0x54
 80099ee:	af00      	add	r7, sp, #0
 80099f0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099fa:	e853 3f00 	ldrex	r3, [r3]
 80099fe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a02:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009a06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	461a      	mov	r2, r3
 8009a0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a10:	643b      	str	r3, [r7, #64]	; 0x40
 8009a12:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a14:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009a16:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009a18:	e841 2300 	strex	r3, r2, [r1]
 8009a1c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009a1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d1e6      	bne.n	80099f2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	3308      	adds	r3, #8
 8009a2a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a2c:	6a3b      	ldr	r3, [r7, #32]
 8009a2e:	e853 3f00 	ldrex	r3, [r3]
 8009a32:	61fb      	str	r3, [r7, #28]
   return(result);
 8009a34:	69fb      	ldr	r3, [r7, #28]
 8009a36:	f023 0301 	bic.w	r3, r3, #1
 8009a3a:	64bb      	str	r3, [r7, #72]	; 0x48
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	3308      	adds	r3, #8
 8009a42:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009a44:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009a46:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a48:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009a4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009a4c:	e841 2300 	strex	r3, r2, [r1]
 8009a50:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d1e5      	bne.n	8009a24 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009a5c:	2b01      	cmp	r3, #1
 8009a5e:	d118      	bne.n	8009a92 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	e853 3f00 	ldrex	r3, [r3]
 8009a6c:	60bb      	str	r3, [r7, #8]
   return(result);
 8009a6e:	68bb      	ldr	r3, [r7, #8]
 8009a70:	f023 0310 	bic.w	r3, r3, #16
 8009a74:	647b      	str	r3, [r7, #68]	; 0x44
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	461a      	mov	r2, r3
 8009a7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009a7e:	61bb      	str	r3, [r7, #24]
 8009a80:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a82:	6979      	ldr	r1, [r7, #20]
 8009a84:	69ba      	ldr	r2, [r7, #24]
 8009a86:	e841 2300 	strex	r3, r2, [r1]
 8009a8a:	613b      	str	r3, [r7, #16]
   return(result);
 8009a8c:	693b      	ldr	r3, [r7, #16]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d1e6      	bne.n	8009a60 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	2220      	movs	r2, #32
 8009a96:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	2200      	movs	r2, #0
 8009a9c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	2200      	movs	r2, #0
 8009aa2:	665a      	str	r2, [r3, #100]	; 0x64
}
 8009aa4:	bf00      	nop
 8009aa6:	3754      	adds	r7, #84	; 0x54
 8009aa8:	46bd      	mov	sp, r7
 8009aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aae:	4770      	bx	lr

08009ab0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009ab0:	b580      	push	{r7, lr}
 8009ab2:	b084      	sub	sp, #16
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009abc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	2200      	movs	r2, #0
 8009ac2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	2200      	movs	r2, #0
 8009aca:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009ace:	68f8      	ldr	r0, [r7, #12]
 8009ad0:	f7ff fc90 	bl	80093f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009ad4:	bf00      	nop
 8009ad6:	3710      	adds	r7, #16
 8009ad8:	46bd      	mov	sp, r7
 8009ada:	bd80      	pop	{r7, pc}

08009adc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009adc:	b580      	push	{r7, lr}
 8009ade:	b088      	sub	sp, #32
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	e853 3f00 	ldrex	r3, [r3]
 8009af0:	60bb      	str	r3, [r7, #8]
   return(result);
 8009af2:	68bb      	ldr	r3, [r7, #8]
 8009af4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009af8:	61fb      	str	r3, [r7, #28]
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	461a      	mov	r2, r3
 8009b00:	69fb      	ldr	r3, [r7, #28]
 8009b02:	61bb      	str	r3, [r7, #24]
 8009b04:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b06:	6979      	ldr	r1, [r7, #20]
 8009b08:	69ba      	ldr	r2, [r7, #24]
 8009b0a:	e841 2300 	strex	r3, r2, [r1]
 8009b0e:	613b      	str	r3, [r7, #16]
   return(result);
 8009b10:	693b      	ldr	r3, [r7, #16]
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d1e6      	bne.n	8009ae4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	2220      	movs	r2, #32
 8009b1a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	2200      	movs	r2, #0
 8009b20:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009b22:	6878      	ldr	r0, [r7, #4]
 8009b24:	f7ff fc5c 	bl	80093e0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009b28:	bf00      	nop
 8009b2a:	3720      	adds	r7, #32
 8009b2c:	46bd      	mov	sp, r7
 8009b2e:	bd80      	pop	{r7, pc}

08009b30 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009b30:	b480      	push	{r7}
 8009b32:	b083      	sub	sp, #12
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009b38:	bf00      	nop
 8009b3a:	370c      	adds	r7, #12
 8009b3c:	46bd      	mov	sp, r7
 8009b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b42:	4770      	bx	lr

08009b44 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8009b44:	b480      	push	{r7}
 8009b46:	b085      	sub	sp, #20
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	2200      	movs	r2, #0
 8009b50:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8009b54:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8009b58:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	b29a      	uxth	r2, r3
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009b64:	2300      	movs	r3, #0
}
 8009b66:	4618      	mov	r0, r3
 8009b68:	3714      	adds	r7, #20
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b70:	4770      	bx	lr

08009b72 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8009b72:	b480      	push	{r7}
 8009b74:	b085      	sub	sp, #20
 8009b76:	af00      	add	r7, sp, #0
 8009b78:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8009b7a:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8009b7e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8009b86:	b29a      	uxth	r2, r3
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	b29b      	uxth	r3, r3
 8009b8c:	43db      	mvns	r3, r3
 8009b8e:	b29b      	uxth	r3, r3
 8009b90:	4013      	ands	r3, r2
 8009b92:	b29a      	uxth	r2, r3
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009b9a:	2300      	movs	r3, #0
}
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	3714      	adds	r7, #20
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba6:	4770      	bx	lr

08009ba8 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8009ba8:	b084      	sub	sp, #16
 8009baa:	b480      	push	{r7}
 8009bac:	b083      	sub	sp, #12
 8009bae:	af00      	add	r7, sp, #0
 8009bb0:	6078      	str	r0, [r7, #4]
 8009bb2:	f107 0014 	add.w	r0, r7, #20
 8009bb6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	2201      	movs	r2, #1
 8009bbe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	2200      	movs	r2, #0
 8009bc6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	2200      	movs	r2, #0
 8009bce:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	2200      	movs	r2, #0
 8009bd6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8009bda:	2300      	movs	r3, #0
}
 8009bdc:	4618      	mov	r0, r3
 8009bde:	370c      	adds	r7, #12
 8009be0:	46bd      	mov	sp, r7
 8009be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be6:	b004      	add	sp, #16
 8009be8:	4770      	bx	lr
	...

08009bec <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009bec:	b480      	push	{r7}
 8009bee:	b09d      	sub	sp, #116	; 0x74
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	6078      	str	r0, [r7, #4]
 8009bf4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8009bf6:	2300      	movs	r3, #0
 8009bf8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8009bfc:	687a      	ldr	r2, [r7, #4]
 8009bfe:	683b      	ldr	r3, [r7, #0]
 8009c00:	781b      	ldrb	r3, [r3, #0]
 8009c02:	009b      	lsls	r3, r3, #2
 8009c04:	4413      	add	r3, r2
 8009c06:	881b      	ldrh	r3, [r3, #0]
 8009c08:	b29b      	uxth	r3, r3
 8009c0a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8009c0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c12:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8009c16:	683b      	ldr	r3, [r7, #0]
 8009c18:	78db      	ldrb	r3, [r3, #3]
 8009c1a:	2b03      	cmp	r3, #3
 8009c1c:	d81f      	bhi.n	8009c5e <USB_ActivateEndpoint+0x72>
 8009c1e:	a201      	add	r2, pc, #4	; (adr r2, 8009c24 <USB_ActivateEndpoint+0x38>)
 8009c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c24:	08009c35 	.word	0x08009c35
 8009c28:	08009c51 	.word	0x08009c51
 8009c2c:	08009c67 	.word	0x08009c67
 8009c30:	08009c43 	.word	0x08009c43
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8009c34:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8009c38:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009c3c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8009c40:	e012      	b.n	8009c68 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8009c42:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8009c46:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8009c4a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8009c4e:	e00b      	b.n	8009c68 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8009c50:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8009c54:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009c58:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8009c5c:	e004      	b.n	8009c68 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8009c5e:	2301      	movs	r3, #1
 8009c60:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8009c64:	e000      	b.n	8009c68 <USB_ActivateEndpoint+0x7c>
      break;
 8009c66:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8009c68:	687a      	ldr	r2, [r7, #4]
 8009c6a:	683b      	ldr	r3, [r7, #0]
 8009c6c:	781b      	ldrb	r3, [r3, #0]
 8009c6e:	009b      	lsls	r3, r3, #2
 8009c70:	441a      	add	r2, r3
 8009c72:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8009c76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009c7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009c7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009c82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c86:	b29b      	uxth	r3, r3
 8009c88:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8009c8a:	687a      	ldr	r2, [r7, #4]
 8009c8c:	683b      	ldr	r3, [r7, #0]
 8009c8e:	781b      	ldrb	r3, [r3, #0]
 8009c90:	009b      	lsls	r3, r3, #2
 8009c92:	4413      	add	r3, r2
 8009c94:	881b      	ldrh	r3, [r3, #0]
 8009c96:	b29b      	uxth	r3, r3
 8009c98:	b21b      	sxth	r3, r3
 8009c9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009c9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ca2:	b21a      	sxth	r2, r3
 8009ca4:	683b      	ldr	r3, [r7, #0]
 8009ca6:	781b      	ldrb	r3, [r3, #0]
 8009ca8:	b21b      	sxth	r3, r3
 8009caa:	4313      	orrs	r3, r2
 8009cac:	b21b      	sxth	r3, r3
 8009cae:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8009cb2:	687a      	ldr	r2, [r7, #4]
 8009cb4:	683b      	ldr	r3, [r7, #0]
 8009cb6:	781b      	ldrb	r3, [r3, #0]
 8009cb8:	009b      	lsls	r3, r3, #2
 8009cba:	441a      	add	r2, r3
 8009cbc:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8009cc0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009cc4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009cc8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009ccc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009cd0:	b29b      	uxth	r3, r3
 8009cd2:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8009cd4:	683b      	ldr	r3, [r7, #0]
 8009cd6:	7b1b      	ldrb	r3, [r3, #12]
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	f040 8149 	bne.w	8009f70 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 8009cde:	683b      	ldr	r3, [r7, #0]
 8009ce0:	785b      	ldrb	r3, [r3, #1]
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	f000 8084 	beq.w	8009df0 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	61bb      	str	r3, [r7, #24]
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009cf2:	b29b      	uxth	r3, r3
 8009cf4:	461a      	mov	r2, r3
 8009cf6:	69bb      	ldr	r3, [r7, #24]
 8009cf8:	4413      	add	r3, r2
 8009cfa:	61bb      	str	r3, [r7, #24]
 8009cfc:	683b      	ldr	r3, [r7, #0]
 8009cfe:	781b      	ldrb	r3, [r3, #0]
 8009d00:	00da      	lsls	r2, r3, #3
 8009d02:	69bb      	ldr	r3, [r7, #24]
 8009d04:	4413      	add	r3, r2
 8009d06:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009d0a:	617b      	str	r3, [r7, #20]
 8009d0c:	683b      	ldr	r3, [r7, #0]
 8009d0e:	88db      	ldrh	r3, [r3, #6]
 8009d10:	085b      	lsrs	r3, r3, #1
 8009d12:	b29b      	uxth	r3, r3
 8009d14:	005b      	lsls	r3, r3, #1
 8009d16:	b29a      	uxth	r2, r3
 8009d18:	697b      	ldr	r3, [r7, #20]
 8009d1a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009d1c:	687a      	ldr	r2, [r7, #4]
 8009d1e:	683b      	ldr	r3, [r7, #0]
 8009d20:	781b      	ldrb	r3, [r3, #0]
 8009d22:	009b      	lsls	r3, r3, #2
 8009d24:	4413      	add	r3, r2
 8009d26:	881b      	ldrh	r3, [r3, #0]
 8009d28:	827b      	strh	r3, [r7, #18]
 8009d2a:	8a7b      	ldrh	r3, [r7, #18]
 8009d2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d01b      	beq.n	8009d6c <USB_ActivateEndpoint+0x180>
 8009d34:	687a      	ldr	r2, [r7, #4]
 8009d36:	683b      	ldr	r3, [r7, #0]
 8009d38:	781b      	ldrb	r3, [r3, #0]
 8009d3a:	009b      	lsls	r3, r3, #2
 8009d3c:	4413      	add	r3, r2
 8009d3e:	881b      	ldrh	r3, [r3, #0]
 8009d40:	b29b      	uxth	r3, r3
 8009d42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009d46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d4a:	823b      	strh	r3, [r7, #16]
 8009d4c:	687a      	ldr	r2, [r7, #4]
 8009d4e:	683b      	ldr	r3, [r7, #0]
 8009d50:	781b      	ldrb	r3, [r3, #0]
 8009d52:	009b      	lsls	r3, r3, #2
 8009d54:	441a      	add	r2, r3
 8009d56:	8a3b      	ldrh	r3, [r7, #16]
 8009d58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009d5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009d60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009d64:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009d68:	b29b      	uxth	r3, r3
 8009d6a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009d6c:	683b      	ldr	r3, [r7, #0]
 8009d6e:	78db      	ldrb	r3, [r3, #3]
 8009d70:	2b01      	cmp	r3, #1
 8009d72:	d020      	beq.n	8009db6 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009d74:	687a      	ldr	r2, [r7, #4]
 8009d76:	683b      	ldr	r3, [r7, #0]
 8009d78:	781b      	ldrb	r3, [r3, #0]
 8009d7a:	009b      	lsls	r3, r3, #2
 8009d7c:	4413      	add	r3, r2
 8009d7e:	881b      	ldrh	r3, [r3, #0]
 8009d80:	b29b      	uxth	r3, r3
 8009d82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009d86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009d8a:	81bb      	strh	r3, [r7, #12]
 8009d8c:	89bb      	ldrh	r3, [r7, #12]
 8009d8e:	f083 0320 	eor.w	r3, r3, #32
 8009d92:	81bb      	strh	r3, [r7, #12]
 8009d94:	687a      	ldr	r2, [r7, #4]
 8009d96:	683b      	ldr	r3, [r7, #0]
 8009d98:	781b      	ldrb	r3, [r3, #0]
 8009d9a:	009b      	lsls	r3, r3, #2
 8009d9c:	441a      	add	r2, r3
 8009d9e:	89bb      	ldrh	r3, [r7, #12]
 8009da0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009da4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009da8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009dac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009db0:	b29b      	uxth	r3, r3
 8009db2:	8013      	strh	r3, [r2, #0]
 8009db4:	e2a6      	b.n	800a304 <USB_ActivateEndpoint+0x718>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009db6:	687a      	ldr	r2, [r7, #4]
 8009db8:	683b      	ldr	r3, [r7, #0]
 8009dba:	781b      	ldrb	r3, [r3, #0]
 8009dbc:	009b      	lsls	r3, r3, #2
 8009dbe:	4413      	add	r3, r2
 8009dc0:	881b      	ldrh	r3, [r3, #0]
 8009dc2:	b29b      	uxth	r3, r3
 8009dc4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009dc8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009dcc:	81fb      	strh	r3, [r7, #14]
 8009dce:	687a      	ldr	r2, [r7, #4]
 8009dd0:	683b      	ldr	r3, [r7, #0]
 8009dd2:	781b      	ldrb	r3, [r3, #0]
 8009dd4:	009b      	lsls	r3, r3, #2
 8009dd6:	441a      	add	r2, r3
 8009dd8:	89fb      	ldrh	r3, [r7, #14]
 8009dda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009dde:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009de2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009de6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009dea:	b29b      	uxth	r3, r3
 8009dec:	8013      	strh	r3, [r2, #0]
 8009dee:	e289      	b.n	800a304 <USB_ActivateEndpoint+0x718>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	633b      	str	r3, [r7, #48]	; 0x30
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009dfa:	b29b      	uxth	r3, r3
 8009dfc:	461a      	mov	r2, r3
 8009dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e00:	4413      	add	r3, r2
 8009e02:	633b      	str	r3, [r7, #48]	; 0x30
 8009e04:	683b      	ldr	r3, [r7, #0]
 8009e06:	781b      	ldrb	r3, [r3, #0]
 8009e08:	00da      	lsls	r2, r3, #3
 8009e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e0c:	4413      	add	r3, r2
 8009e0e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009e12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009e14:	683b      	ldr	r3, [r7, #0]
 8009e16:	88db      	ldrh	r3, [r3, #6]
 8009e18:	085b      	lsrs	r3, r3, #1
 8009e1a:	b29b      	uxth	r3, r3
 8009e1c:	005b      	lsls	r3, r3, #1
 8009e1e:	b29a      	uxth	r2, r3
 8009e20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e22:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	62bb      	str	r3, [r7, #40]	; 0x28
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009e2e:	b29b      	uxth	r3, r3
 8009e30:	461a      	mov	r2, r3
 8009e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e34:	4413      	add	r3, r2
 8009e36:	62bb      	str	r3, [r7, #40]	; 0x28
 8009e38:	683b      	ldr	r3, [r7, #0]
 8009e3a:	781b      	ldrb	r3, [r3, #0]
 8009e3c:	00da      	lsls	r2, r3, #3
 8009e3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e40:	4413      	add	r3, r2
 8009e42:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009e46:	627b      	str	r3, [r7, #36]	; 0x24
 8009e48:	683b      	ldr	r3, [r7, #0]
 8009e4a:	691b      	ldr	r3, [r3, #16]
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d112      	bne.n	8009e76 <USB_ActivateEndpoint+0x28a>
 8009e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e52:	881b      	ldrh	r3, [r3, #0]
 8009e54:	b29b      	uxth	r3, r3
 8009e56:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009e5a:	b29a      	uxth	r2, r3
 8009e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e5e:	801a      	strh	r2, [r3, #0]
 8009e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e62:	881b      	ldrh	r3, [r3, #0]
 8009e64:	b29b      	uxth	r3, r3
 8009e66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009e6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009e6e:	b29a      	uxth	r2, r3
 8009e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e72:	801a      	strh	r2, [r3, #0]
 8009e74:	e02f      	b.n	8009ed6 <USB_ActivateEndpoint+0x2ea>
 8009e76:	683b      	ldr	r3, [r7, #0]
 8009e78:	691b      	ldr	r3, [r3, #16]
 8009e7a:	2b3e      	cmp	r3, #62	; 0x3e
 8009e7c:	d813      	bhi.n	8009ea6 <USB_ActivateEndpoint+0x2ba>
 8009e7e:	683b      	ldr	r3, [r7, #0]
 8009e80:	691b      	ldr	r3, [r3, #16]
 8009e82:	085b      	lsrs	r3, r3, #1
 8009e84:	66bb      	str	r3, [r7, #104]	; 0x68
 8009e86:	683b      	ldr	r3, [r7, #0]
 8009e88:	691b      	ldr	r3, [r3, #16]
 8009e8a:	f003 0301 	and.w	r3, r3, #1
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d002      	beq.n	8009e98 <USB_ActivateEndpoint+0x2ac>
 8009e92:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009e94:	3301      	adds	r3, #1
 8009e96:	66bb      	str	r3, [r7, #104]	; 0x68
 8009e98:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009e9a:	b29b      	uxth	r3, r3
 8009e9c:	029b      	lsls	r3, r3, #10
 8009e9e:	b29a      	uxth	r2, r3
 8009ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ea2:	801a      	strh	r2, [r3, #0]
 8009ea4:	e017      	b.n	8009ed6 <USB_ActivateEndpoint+0x2ea>
 8009ea6:	683b      	ldr	r3, [r7, #0]
 8009ea8:	691b      	ldr	r3, [r3, #16]
 8009eaa:	095b      	lsrs	r3, r3, #5
 8009eac:	66bb      	str	r3, [r7, #104]	; 0x68
 8009eae:	683b      	ldr	r3, [r7, #0]
 8009eb0:	691b      	ldr	r3, [r3, #16]
 8009eb2:	f003 031f 	and.w	r3, r3, #31
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d102      	bne.n	8009ec0 <USB_ActivateEndpoint+0x2d4>
 8009eba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009ebc:	3b01      	subs	r3, #1
 8009ebe:	66bb      	str	r3, [r7, #104]	; 0x68
 8009ec0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009ec2:	b29b      	uxth	r3, r3
 8009ec4:	029b      	lsls	r3, r3, #10
 8009ec6:	b29b      	uxth	r3, r3
 8009ec8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009ecc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009ed0:	b29a      	uxth	r2, r3
 8009ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ed4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009ed6:	687a      	ldr	r2, [r7, #4]
 8009ed8:	683b      	ldr	r3, [r7, #0]
 8009eda:	781b      	ldrb	r3, [r3, #0]
 8009edc:	009b      	lsls	r3, r3, #2
 8009ede:	4413      	add	r3, r2
 8009ee0:	881b      	ldrh	r3, [r3, #0]
 8009ee2:	847b      	strh	r3, [r7, #34]	; 0x22
 8009ee4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009ee6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d01b      	beq.n	8009f26 <USB_ActivateEndpoint+0x33a>
 8009eee:	687a      	ldr	r2, [r7, #4]
 8009ef0:	683b      	ldr	r3, [r7, #0]
 8009ef2:	781b      	ldrb	r3, [r3, #0]
 8009ef4:	009b      	lsls	r3, r3, #2
 8009ef6:	4413      	add	r3, r2
 8009ef8:	881b      	ldrh	r3, [r3, #0]
 8009efa:	b29b      	uxth	r3, r3
 8009efc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009f00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f04:	843b      	strh	r3, [r7, #32]
 8009f06:	687a      	ldr	r2, [r7, #4]
 8009f08:	683b      	ldr	r3, [r7, #0]
 8009f0a:	781b      	ldrb	r3, [r3, #0]
 8009f0c:	009b      	lsls	r3, r3, #2
 8009f0e:	441a      	add	r2, r3
 8009f10:	8c3b      	ldrh	r3, [r7, #32]
 8009f12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009f16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009f1a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009f1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f22:	b29b      	uxth	r3, r3
 8009f24:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009f26:	687a      	ldr	r2, [r7, #4]
 8009f28:	683b      	ldr	r3, [r7, #0]
 8009f2a:	781b      	ldrb	r3, [r3, #0]
 8009f2c:	009b      	lsls	r3, r3, #2
 8009f2e:	4413      	add	r3, r2
 8009f30:	881b      	ldrh	r3, [r3, #0]
 8009f32:	b29b      	uxth	r3, r3
 8009f34:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009f38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f3c:	83fb      	strh	r3, [r7, #30]
 8009f3e:	8bfb      	ldrh	r3, [r7, #30]
 8009f40:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009f44:	83fb      	strh	r3, [r7, #30]
 8009f46:	8bfb      	ldrh	r3, [r7, #30]
 8009f48:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009f4c:	83fb      	strh	r3, [r7, #30]
 8009f4e:	687a      	ldr	r2, [r7, #4]
 8009f50:	683b      	ldr	r3, [r7, #0]
 8009f52:	781b      	ldrb	r3, [r3, #0]
 8009f54:	009b      	lsls	r3, r3, #2
 8009f56:	441a      	add	r2, r3
 8009f58:	8bfb      	ldrh	r3, [r7, #30]
 8009f5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009f5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009f62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009f66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f6a:	b29b      	uxth	r3, r3
 8009f6c:	8013      	strh	r3, [r2, #0]
 8009f6e:	e1c9      	b.n	800a304 <USB_ActivateEndpoint+0x718>
    }
  }
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8009f70:	683b      	ldr	r3, [r7, #0]
 8009f72:	78db      	ldrb	r3, [r3, #3]
 8009f74:	2b02      	cmp	r3, #2
 8009f76:	d11e      	bne.n	8009fb6 <USB_ActivateEndpoint+0x3ca>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8009f78:	687a      	ldr	r2, [r7, #4]
 8009f7a:	683b      	ldr	r3, [r7, #0]
 8009f7c:	781b      	ldrb	r3, [r3, #0]
 8009f7e:	009b      	lsls	r3, r3, #2
 8009f80:	4413      	add	r3, r2
 8009f82:	881b      	ldrh	r3, [r3, #0]
 8009f84:	b29b      	uxth	r3, r3
 8009f86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009f8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f8e:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8009f92:	687a      	ldr	r2, [r7, #4]
 8009f94:	683b      	ldr	r3, [r7, #0]
 8009f96:	781b      	ldrb	r3, [r3, #0]
 8009f98:	009b      	lsls	r3, r3, #2
 8009f9a:	441a      	add	r2, r3
 8009f9c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8009fa0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009fa4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009fa8:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8009fac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009fb0:	b29b      	uxth	r3, r3
 8009fb2:	8013      	strh	r3, [r2, #0]
 8009fb4:	e01d      	b.n	8009ff2 <USB_ActivateEndpoint+0x406>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8009fb6:	687a      	ldr	r2, [r7, #4]
 8009fb8:	683b      	ldr	r3, [r7, #0]
 8009fba:	781b      	ldrb	r3, [r3, #0]
 8009fbc:	009b      	lsls	r3, r3, #2
 8009fbe:	4413      	add	r3, r2
 8009fc0:	881b      	ldrh	r3, [r3, #0]
 8009fc2:	b29b      	uxth	r3, r3
 8009fc4:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8009fc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009fcc:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8009fd0:	687a      	ldr	r2, [r7, #4]
 8009fd2:	683b      	ldr	r3, [r7, #0]
 8009fd4:	781b      	ldrb	r3, [r3, #0]
 8009fd6:	009b      	lsls	r3, r3, #2
 8009fd8:	441a      	add	r2, r3
 8009fda:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8009fde:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009fe2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009fe6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009fea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009fee:	b29b      	uxth	r3, r3
 8009ff0:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009ffc:	b29b      	uxth	r3, r3
 8009ffe:	461a      	mov	r2, r3
 800a000:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a002:	4413      	add	r3, r2
 800a004:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a006:	683b      	ldr	r3, [r7, #0]
 800a008:	781b      	ldrb	r3, [r3, #0]
 800a00a:	00da      	lsls	r2, r3, #3
 800a00c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a00e:	4413      	add	r3, r2
 800a010:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a014:	65bb      	str	r3, [r7, #88]	; 0x58
 800a016:	683b      	ldr	r3, [r7, #0]
 800a018:	891b      	ldrh	r3, [r3, #8]
 800a01a:	085b      	lsrs	r3, r3, #1
 800a01c:	b29b      	uxth	r3, r3
 800a01e:	005b      	lsls	r3, r3, #1
 800a020:	b29a      	uxth	r2, r3
 800a022:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a024:	801a      	strh	r2, [r3, #0]
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	657b      	str	r3, [r7, #84]	; 0x54
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a030:	b29b      	uxth	r3, r3
 800a032:	461a      	mov	r2, r3
 800a034:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a036:	4413      	add	r3, r2
 800a038:	657b      	str	r3, [r7, #84]	; 0x54
 800a03a:	683b      	ldr	r3, [r7, #0]
 800a03c:	781b      	ldrb	r3, [r3, #0]
 800a03e:	00da      	lsls	r2, r3, #3
 800a040:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a042:	4413      	add	r3, r2
 800a044:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a048:	653b      	str	r3, [r7, #80]	; 0x50
 800a04a:	683b      	ldr	r3, [r7, #0]
 800a04c:	895b      	ldrh	r3, [r3, #10]
 800a04e:	085b      	lsrs	r3, r3, #1
 800a050:	b29b      	uxth	r3, r3
 800a052:	005b      	lsls	r3, r3, #1
 800a054:	b29a      	uxth	r2, r3
 800a056:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a058:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800a05a:	683b      	ldr	r3, [r7, #0]
 800a05c:	785b      	ldrb	r3, [r3, #1]
 800a05e:	2b00      	cmp	r3, #0
 800a060:	f040 8093 	bne.w	800a18a <USB_ActivateEndpoint+0x59e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a064:	687a      	ldr	r2, [r7, #4]
 800a066:	683b      	ldr	r3, [r7, #0]
 800a068:	781b      	ldrb	r3, [r3, #0]
 800a06a:	009b      	lsls	r3, r3, #2
 800a06c:	4413      	add	r3, r2
 800a06e:	881b      	ldrh	r3, [r3, #0]
 800a070:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800a074:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800a078:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d01b      	beq.n	800a0b8 <USB_ActivateEndpoint+0x4cc>
 800a080:	687a      	ldr	r2, [r7, #4]
 800a082:	683b      	ldr	r3, [r7, #0]
 800a084:	781b      	ldrb	r3, [r3, #0]
 800a086:	009b      	lsls	r3, r3, #2
 800a088:	4413      	add	r3, r2
 800a08a:	881b      	ldrh	r3, [r3, #0]
 800a08c:	b29b      	uxth	r3, r3
 800a08e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a092:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a096:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800a098:	687a      	ldr	r2, [r7, #4]
 800a09a:	683b      	ldr	r3, [r7, #0]
 800a09c:	781b      	ldrb	r3, [r3, #0]
 800a09e:	009b      	lsls	r3, r3, #2
 800a0a0:	441a      	add	r2, r3
 800a0a2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800a0a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a0a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a0ac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a0b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a0b4:	b29b      	uxth	r3, r3
 800a0b6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a0b8:	687a      	ldr	r2, [r7, #4]
 800a0ba:	683b      	ldr	r3, [r7, #0]
 800a0bc:	781b      	ldrb	r3, [r3, #0]
 800a0be:	009b      	lsls	r3, r3, #2
 800a0c0:	4413      	add	r3, r2
 800a0c2:	881b      	ldrh	r3, [r3, #0]
 800a0c4:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800a0c6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800a0c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d01b      	beq.n	800a108 <USB_ActivateEndpoint+0x51c>
 800a0d0:	687a      	ldr	r2, [r7, #4]
 800a0d2:	683b      	ldr	r3, [r7, #0]
 800a0d4:	781b      	ldrb	r3, [r3, #0]
 800a0d6:	009b      	lsls	r3, r3, #2
 800a0d8:	4413      	add	r3, r2
 800a0da:	881b      	ldrh	r3, [r3, #0]
 800a0dc:	b29b      	uxth	r3, r3
 800a0de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a0e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a0e6:	877b      	strh	r3, [r7, #58]	; 0x3a
 800a0e8:	687a      	ldr	r2, [r7, #4]
 800a0ea:	683b      	ldr	r3, [r7, #0]
 800a0ec:	781b      	ldrb	r3, [r3, #0]
 800a0ee:	009b      	lsls	r3, r3, #2
 800a0f0:	441a      	add	r2, r3
 800a0f2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800a0f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a0f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a0fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a100:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a104:	b29b      	uxth	r3, r3
 800a106:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a108:	687a      	ldr	r2, [r7, #4]
 800a10a:	683b      	ldr	r3, [r7, #0]
 800a10c:	781b      	ldrb	r3, [r3, #0]
 800a10e:	009b      	lsls	r3, r3, #2
 800a110:	4413      	add	r3, r2
 800a112:	881b      	ldrh	r3, [r3, #0]
 800a114:	b29b      	uxth	r3, r3
 800a116:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a11a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a11e:	873b      	strh	r3, [r7, #56]	; 0x38
 800a120:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800a122:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a126:	873b      	strh	r3, [r7, #56]	; 0x38
 800a128:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800a12a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a12e:	873b      	strh	r3, [r7, #56]	; 0x38
 800a130:	687a      	ldr	r2, [r7, #4]
 800a132:	683b      	ldr	r3, [r7, #0]
 800a134:	781b      	ldrb	r3, [r3, #0]
 800a136:	009b      	lsls	r3, r3, #2
 800a138:	441a      	add	r2, r3
 800a13a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800a13c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a140:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a144:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a148:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a14c:	b29b      	uxth	r3, r3
 800a14e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a150:	687a      	ldr	r2, [r7, #4]
 800a152:	683b      	ldr	r3, [r7, #0]
 800a154:	781b      	ldrb	r3, [r3, #0]
 800a156:	009b      	lsls	r3, r3, #2
 800a158:	4413      	add	r3, r2
 800a15a:	881b      	ldrh	r3, [r3, #0]
 800a15c:	b29b      	uxth	r3, r3
 800a15e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a162:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a166:	86fb      	strh	r3, [r7, #54]	; 0x36
 800a168:	687a      	ldr	r2, [r7, #4]
 800a16a:	683b      	ldr	r3, [r7, #0]
 800a16c:	781b      	ldrb	r3, [r3, #0]
 800a16e:	009b      	lsls	r3, r3, #2
 800a170:	441a      	add	r2, r3
 800a172:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a174:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a178:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a17c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a180:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a184:	b29b      	uxth	r3, r3
 800a186:	8013      	strh	r3, [r2, #0]
 800a188:	e0bc      	b.n	800a304 <USB_ActivateEndpoint+0x718>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a18a:	687a      	ldr	r2, [r7, #4]
 800a18c:	683b      	ldr	r3, [r7, #0]
 800a18e:	781b      	ldrb	r3, [r3, #0]
 800a190:	009b      	lsls	r3, r3, #2
 800a192:	4413      	add	r3, r2
 800a194:	881b      	ldrh	r3, [r3, #0]
 800a196:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800a19a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a19e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d01d      	beq.n	800a1e2 <USB_ActivateEndpoint+0x5f6>
 800a1a6:	687a      	ldr	r2, [r7, #4]
 800a1a8:	683b      	ldr	r3, [r7, #0]
 800a1aa:	781b      	ldrb	r3, [r3, #0]
 800a1ac:	009b      	lsls	r3, r3, #2
 800a1ae:	4413      	add	r3, r2
 800a1b0:	881b      	ldrh	r3, [r3, #0]
 800a1b2:	b29b      	uxth	r3, r3
 800a1b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a1b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a1bc:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800a1c0:	687a      	ldr	r2, [r7, #4]
 800a1c2:	683b      	ldr	r3, [r7, #0]
 800a1c4:	781b      	ldrb	r3, [r3, #0]
 800a1c6:	009b      	lsls	r3, r3, #2
 800a1c8:	441a      	add	r2, r3
 800a1ca:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800a1ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a1d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a1d6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a1da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a1de:	b29b      	uxth	r3, r3
 800a1e0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a1e2:	687a      	ldr	r2, [r7, #4]
 800a1e4:	683b      	ldr	r3, [r7, #0]
 800a1e6:	781b      	ldrb	r3, [r3, #0]
 800a1e8:	009b      	lsls	r3, r3, #2
 800a1ea:	4413      	add	r3, r2
 800a1ec:	881b      	ldrh	r3, [r3, #0]
 800a1ee:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800a1f2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800a1f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d01d      	beq.n	800a23a <USB_ActivateEndpoint+0x64e>
 800a1fe:	687a      	ldr	r2, [r7, #4]
 800a200:	683b      	ldr	r3, [r7, #0]
 800a202:	781b      	ldrb	r3, [r3, #0]
 800a204:	009b      	lsls	r3, r3, #2
 800a206:	4413      	add	r3, r2
 800a208:	881b      	ldrh	r3, [r3, #0]
 800a20a:	b29b      	uxth	r3, r3
 800a20c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a210:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a214:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800a218:	687a      	ldr	r2, [r7, #4]
 800a21a:	683b      	ldr	r3, [r7, #0]
 800a21c:	781b      	ldrb	r3, [r3, #0]
 800a21e:	009b      	lsls	r3, r3, #2
 800a220:	441a      	add	r2, r3
 800a222:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800a226:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a22a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a22e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a232:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a236:	b29b      	uxth	r3, r3
 800a238:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a23a:	683b      	ldr	r3, [r7, #0]
 800a23c:	78db      	ldrb	r3, [r3, #3]
 800a23e:	2b01      	cmp	r3, #1
 800a240:	d024      	beq.n	800a28c <USB_ActivateEndpoint+0x6a0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a242:	687a      	ldr	r2, [r7, #4]
 800a244:	683b      	ldr	r3, [r7, #0]
 800a246:	781b      	ldrb	r3, [r3, #0]
 800a248:	009b      	lsls	r3, r3, #2
 800a24a:	4413      	add	r3, r2
 800a24c:	881b      	ldrh	r3, [r3, #0]
 800a24e:	b29b      	uxth	r3, r3
 800a250:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a254:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a258:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800a25c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800a260:	f083 0320 	eor.w	r3, r3, #32
 800a264:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800a268:	687a      	ldr	r2, [r7, #4]
 800a26a:	683b      	ldr	r3, [r7, #0]
 800a26c:	781b      	ldrb	r3, [r3, #0]
 800a26e:	009b      	lsls	r3, r3, #2
 800a270:	441a      	add	r2, r3
 800a272:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800a276:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a27a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a27e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a282:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a286:	b29b      	uxth	r3, r3
 800a288:	8013      	strh	r3, [r2, #0]
 800a28a:	e01d      	b.n	800a2c8 <USB_ActivateEndpoint+0x6dc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a28c:	687a      	ldr	r2, [r7, #4]
 800a28e:	683b      	ldr	r3, [r7, #0]
 800a290:	781b      	ldrb	r3, [r3, #0]
 800a292:	009b      	lsls	r3, r3, #2
 800a294:	4413      	add	r3, r2
 800a296:	881b      	ldrh	r3, [r3, #0]
 800a298:	b29b      	uxth	r3, r3
 800a29a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a29e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a2a2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800a2a6:	687a      	ldr	r2, [r7, #4]
 800a2a8:	683b      	ldr	r3, [r7, #0]
 800a2aa:	781b      	ldrb	r3, [r3, #0]
 800a2ac:	009b      	lsls	r3, r3, #2
 800a2ae:	441a      	add	r2, r3
 800a2b0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800a2b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a2b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a2bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a2c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a2c4:	b29b      	uxth	r3, r3
 800a2c6:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a2c8:	687a      	ldr	r2, [r7, #4]
 800a2ca:	683b      	ldr	r3, [r7, #0]
 800a2cc:	781b      	ldrb	r3, [r3, #0]
 800a2ce:	009b      	lsls	r3, r3, #2
 800a2d0:	4413      	add	r3, r2
 800a2d2:	881b      	ldrh	r3, [r3, #0]
 800a2d4:	b29b      	uxth	r3, r3
 800a2d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a2da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a2de:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800a2e2:	687a      	ldr	r2, [r7, #4]
 800a2e4:	683b      	ldr	r3, [r7, #0]
 800a2e6:	781b      	ldrb	r3, [r3, #0]
 800a2e8:	009b      	lsls	r3, r3, #2
 800a2ea:	441a      	add	r2, r3
 800a2ec:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a2f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a2f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a2f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a2fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a300:	b29b      	uxth	r3, r3
 800a302:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800a304:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800a308:	4618      	mov	r0, r3
 800a30a:	3774      	adds	r7, #116	; 0x74
 800a30c:	46bd      	mov	sp, r7
 800a30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a312:	4770      	bx	lr

0800a314 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a314:	b480      	push	{r7}
 800a316:	b08d      	sub	sp, #52	; 0x34
 800a318:	af00      	add	r7, sp, #0
 800a31a:	6078      	str	r0, [r7, #4]
 800a31c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800a31e:	683b      	ldr	r3, [r7, #0]
 800a320:	7b1b      	ldrb	r3, [r3, #12]
 800a322:	2b00      	cmp	r3, #0
 800a324:	f040 808e 	bne.w	800a444 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800a328:	683b      	ldr	r3, [r7, #0]
 800a32a:	785b      	ldrb	r3, [r3, #1]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d044      	beq.n	800a3ba <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a330:	687a      	ldr	r2, [r7, #4]
 800a332:	683b      	ldr	r3, [r7, #0]
 800a334:	781b      	ldrb	r3, [r3, #0]
 800a336:	009b      	lsls	r3, r3, #2
 800a338:	4413      	add	r3, r2
 800a33a:	881b      	ldrh	r3, [r3, #0]
 800a33c:	81bb      	strh	r3, [r7, #12]
 800a33e:	89bb      	ldrh	r3, [r7, #12]
 800a340:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a344:	2b00      	cmp	r3, #0
 800a346:	d01b      	beq.n	800a380 <USB_DeactivateEndpoint+0x6c>
 800a348:	687a      	ldr	r2, [r7, #4]
 800a34a:	683b      	ldr	r3, [r7, #0]
 800a34c:	781b      	ldrb	r3, [r3, #0]
 800a34e:	009b      	lsls	r3, r3, #2
 800a350:	4413      	add	r3, r2
 800a352:	881b      	ldrh	r3, [r3, #0]
 800a354:	b29b      	uxth	r3, r3
 800a356:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a35a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a35e:	817b      	strh	r3, [r7, #10]
 800a360:	687a      	ldr	r2, [r7, #4]
 800a362:	683b      	ldr	r3, [r7, #0]
 800a364:	781b      	ldrb	r3, [r3, #0]
 800a366:	009b      	lsls	r3, r3, #2
 800a368:	441a      	add	r2, r3
 800a36a:	897b      	ldrh	r3, [r7, #10]
 800a36c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a370:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a374:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a378:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a37c:	b29b      	uxth	r3, r3
 800a37e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a380:	687a      	ldr	r2, [r7, #4]
 800a382:	683b      	ldr	r3, [r7, #0]
 800a384:	781b      	ldrb	r3, [r3, #0]
 800a386:	009b      	lsls	r3, r3, #2
 800a388:	4413      	add	r3, r2
 800a38a:	881b      	ldrh	r3, [r3, #0]
 800a38c:	b29b      	uxth	r3, r3
 800a38e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a392:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a396:	813b      	strh	r3, [r7, #8]
 800a398:	687a      	ldr	r2, [r7, #4]
 800a39a:	683b      	ldr	r3, [r7, #0]
 800a39c:	781b      	ldrb	r3, [r3, #0]
 800a39e:	009b      	lsls	r3, r3, #2
 800a3a0:	441a      	add	r2, r3
 800a3a2:	893b      	ldrh	r3, [r7, #8]
 800a3a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a3a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a3ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a3b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a3b4:	b29b      	uxth	r3, r3
 800a3b6:	8013      	strh	r3, [r2, #0]
 800a3b8:	e192      	b.n	800a6e0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a3ba:	687a      	ldr	r2, [r7, #4]
 800a3bc:	683b      	ldr	r3, [r7, #0]
 800a3be:	781b      	ldrb	r3, [r3, #0]
 800a3c0:	009b      	lsls	r3, r3, #2
 800a3c2:	4413      	add	r3, r2
 800a3c4:	881b      	ldrh	r3, [r3, #0]
 800a3c6:	827b      	strh	r3, [r7, #18]
 800a3c8:	8a7b      	ldrh	r3, [r7, #18]
 800a3ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d01b      	beq.n	800a40a <USB_DeactivateEndpoint+0xf6>
 800a3d2:	687a      	ldr	r2, [r7, #4]
 800a3d4:	683b      	ldr	r3, [r7, #0]
 800a3d6:	781b      	ldrb	r3, [r3, #0]
 800a3d8:	009b      	lsls	r3, r3, #2
 800a3da:	4413      	add	r3, r2
 800a3dc:	881b      	ldrh	r3, [r3, #0]
 800a3de:	b29b      	uxth	r3, r3
 800a3e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a3e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a3e8:	823b      	strh	r3, [r7, #16]
 800a3ea:	687a      	ldr	r2, [r7, #4]
 800a3ec:	683b      	ldr	r3, [r7, #0]
 800a3ee:	781b      	ldrb	r3, [r3, #0]
 800a3f0:	009b      	lsls	r3, r3, #2
 800a3f2:	441a      	add	r2, r3
 800a3f4:	8a3b      	ldrh	r3, [r7, #16]
 800a3f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a3fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a3fe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a402:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a406:	b29b      	uxth	r3, r3
 800a408:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a40a:	687a      	ldr	r2, [r7, #4]
 800a40c:	683b      	ldr	r3, [r7, #0]
 800a40e:	781b      	ldrb	r3, [r3, #0]
 800a410:	009b      	lsls	r3, r3, #2
 800a412:	4413      	add	r3, r2
 800a414:	881b      	ldrh	r3, [r3, #0]
 800a416:	b29b      	uxth	r3, r3
 800a418:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a41c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a420:	81fb      	strh	r3, [r7, #14]
 800a422:	687a      	ldr	r2, [r7, #4]
 800a424:	683b      	ldr	r3, [r7, #0]
 800a426:	781b      	ldrb	r3, [r3, #0]
 800a428:	009b      	lsls	r3, r3, #2
 800a42a:	441a      	add	r2, r3
 800a42c:	89fb      	ldrh	r3, [r7, #14]
 800a42e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a432:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a436:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a43a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a43e:	b29b      	uxth	r3, r3
 800a440:	8013      	strh	r3, [r2, #0]
 800a442:	e14d      	b.n	800a6e0 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 800a444:	683b      	ldr	r3, [r7, #0]
 800a446:	785b      	ldrb	r3, [r3, #1]
 800a448:	2b00      	cmp	r3, #0
 800a44a:	f040 80a5 	bne.w	800a598 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a44e:	687a      	ldr	r2, [r7, #4]
 800a450:	683b      	ldr	r3, [r7, #0]
 800a452:	781b      	ldrb	r3, [r3, #0]
 800a454:	009b      	lsls	r3, r3, #2
 800a456:	4413      	add	r3, r2
 800a458:	881b      	ldrh	r3, [r3, #0]
 800a45a:	843b      	strh	r3, [r7, #32]
 800a45c:	8c3b      	ldrh	r3, [r7, #32]
 800a45e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a462:	2b00      	cmp	r3, #0
 800a464:	d01b      	beq.n	800a49e <USB_DeactivateEndpoint+0x18a>
 800a466:	687a      	ldr	r2, [r7, #4]
 800a468:	683b      	ldr	r3, [r7, #0]
 800a46a:	781b      	ldrb	r3, [r3, #0]
 800a46c:	009b      	lsls	r3, r3, #2
 800a46e:	4413      	add	r3, r2
 800a470:	881b      	ldrh	r3, [r3, #0]
 800a472:	b29b      	uxth	r3, r3
 800a474:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a478:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a47c:	83fb      	strh	r3, [r7, #30]
 800a47e:	687a      	ldr	r2, [r7, #4]
 800a480:	683b      	ldr	r3, [r7, #0]
 800a482:	781b      	ldrb	r3, [r3, #0]
 800a484:	009b      	lsls	r3, r3, #2
 800a486:	441a      	add	r2, r3
 800a488:	8bfb      	ldrh	r3, [r7, #30]
 800a48a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a48e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a492:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a496:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a49a:	b29b      	uxth	r3, r3
 800a49c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a49e:	687a      	ldr	r2, [r7, #4]
 800a4a0:	683b      	ldr	r3, [r7, #0]
 800a4a2:	781b      	ldrb	r3, [r3, #0]
 800a4a4:	009b      	lsls	r3, r3, #2
 800a4a6:	4413      	add	r3, r2
 800a4a8:	881b      	ldrh	r3, [r3, #0]
 800a4aa:	83bb      	strh	r3, [r7, #28]
 800a4ac:	8bbb      	ldrh	r3, [r7, #28]
 800a4ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d01b      	beq.n	800a4ee <USB_DeactivateEndpoint+0x1da>
 800a4b6:	687a      	ldr	r2, [r7, #4]
 800a4b8:	683b      	ldr	r3, [r7, #0]
 800a4ba:	781b      	ldrb	r3, [r3, #0]
 800a4bc:	009b      	lsls	r3, r3, #2
 800a4be:	4413      	add	r3, r2
 800a4c0:	881b      	ldrh	r3, [r3, #0]
 800a4c2:	b29b      	uxth	r3, r3
 800a4c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a4c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a4cc:	837b      	strh	r3, [r7, #26]
 800a4ce:	687a      	ldr	r2, [r7, #4]
 800a4d0:	683b      	ldr	r3, [r7, #0]
 800a4d2:	781b      	ldrb	r3, [r3, #0]
 800a4d4:	009b      	lsls	r3, r3, #2
 800a4d6:	441a      	add	r2, r3
 800a4d8:	8b7b      	ldrh	r3, [r7, #26]
 800a4da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a4de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a4e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a4e6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a4ea:	b29b      	uxth	r3, r3
 800a4ec:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800a4ee:	687a      	ldr	r2, [r7, #4]
 800a4f0:	683b      	ldr	r3, [r7, #0]
 800a4f2:	781b      	ldrb	r3, [r3, #0]
 800a4f4:	009b      	lsls	r3, r3, #2
 800a4f6:	4413      	add	r3, r2
 800a4f8:	881b      	ldrh	r3, [r3, #0]
 800a4fa:	b29b      	uxth	r3, r3
 800a4fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a500:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a504:	833b      	strh	r3, [r7, #24]
 800a506:	687a      	ldr	r2, [r7, #4]
 800a508:	683b      	ldr	r3, [r7, #0]
 800a50a:	781b      	ldrb	r3, [r3, #0]
 800a50c:	009b      	lsls	r3, r3, #2
 800a50e:	441a      	add	r2, r3
 800a510:	8b3b      	ldrh	r3, [r7, #24]
 800a512:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a516:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a51a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a51e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a522:	b29b      	uxth	r3, r3
 800a524:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a526:	687a      	ldr	r2, [r7, #4]
 800a528:	683b      	ldr	r3, [r7, #0]
 800a52a:	781b      	ldrb	r3, [r3, #0]
 800a52c:	009b      	lsls	r3, r3, #2
 800a52e:	4413      	add	r3, r2
 800a530:	881b      	ldrh	r3, [r3, #0]
 800a532:	b29b      	uxth	r3, r3
 800a534:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a538:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a53c:	82fb      	strh	r3, [r7, #22]
 800a53e:	687a      	ldr	r2, [r7, #4]
 800a540:	683b      	ldr	r3, [r7, #0]
 800a542:	781b      	ldrb	r3, [r3, #0]
 800a544:	009b      	lsls	r3, r3, #2
 800a546:	441a      	add	r2, r3
 800a548:	8afb      	ldrh	r3, [r7, #22]
 800a54a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a54e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a552:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a556:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a55a:	b29b      	uxth	r3, r3
 800a55c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a55e:	687a      	ldr	r2, [r7, #4]
 800a560:	683b      	ldr	r3, [r7, #0]
 800a562:	781b      	ldrb	r3, [r3, #0]
 800a564:	009b      	lsls	r3, r3, #2
 800a566:	4413      	add	r3, r2
 800a568:	881b      	ldrh	r3, [r3, #0]
 800a56a:	b29b      	uxth	r3, r3
 800a56c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a570:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a574:	82bb      	strh	r3, [r7, #20]
 800a576:	687a      	ldr	r2, [r7, #4]
 800a578:	683b      	ldr	r3, [r7, #0]
 800a57a:	781b      	ldrb	r3, [r3, #0]
 800a57c:	009b      	lsls	r3, r3, #2
 800a57e:	441a      	add	r2, r3
 800a580:	8abb      	ldrh	r3, [r7, #20]
 800a582:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a586:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a58a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a58e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a592:	b29b      	uxth	r3, r3
 800a594:	8013      	strh	r3, [r2, #0]
 800a596:	e0a3      	b.n	800a6e0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a598:	687a      	ldr	r2, [r7, #4]
 800a59a:	683b      	ldr	r3, [r7, #0]
 800a59c:	781b      	ldrb	r3, [r3, #0]
 800a59e:	009b      	lsls	r3, r3, #2
 800a5a0:	4413      	add	r3, r2
 800a5a2:	881b      	ldrh	r3, [r3, #0]
 800a5a4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800a5a6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a5a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d01b      	beq.n	800a5e8 <USB_DeactivateEndpoint+0x2d4>
 800a5b0:	687a      	ldr	r2, [r7, #4]
 800a5b2:	683b      	ldr	r3, [r7, #0]
 800a5b4:	781b      	ldrb	r3, [r3, #0]
 800a5b6:	009b      	lsls	r3, r3, #2
 800a5b8:	4413      	add	r3, r2
 800a5ba:	881b      	ldrh	r3, [r3, #0]
 800a5bc:	b29b      	uxth	r3, r3
 800a5be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a5c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a5c6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800a5c8:	687a      	ldr	r2, [r7, #4]
 800a5ca:	683b      	ldr	r3, [r7, #0]
 800a5cc:	781b      	ldrb	r3, [r3, #0]
 800a5ce:	009b      	lsls	r3, r3, #2
 800a5d0:	441a      	add	r2, r3
 800a5d2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a5d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a5d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a5dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a5e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a5e4:	b29b      	uxth	r3, r3
 800a5e6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a5e8:	687a      	ldr	r2, [r7, #4]
 800a5ea:	683b      	ldr	r3, [r7, #0]
 800a5ec:	781b      	ldrb	r3, [r3, #0]
 800a5ee:	009b      	lsls	r3, r3, #2
 800a5f0:	4413      	add	r3, r2
 800a5f2:	881b      	ldrh	r3, [r3, #0]
 800a5f4:	857b      	strh	r3, [r7, #42]	; 0x2a
 800a5f6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800a5f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d01b      	beq.n	800a638 <USB_DeactivateEndpoint+0x324>
 800a600:	687a      	ldr	r2, [r7, #4]
 800a602:	683b      	ldr	r3, [r7, #0]
 800a604:	781b      	ldrb	r3, [r3, #0]
 800a606:	009b      	lsls	r3, r3, #2
 800a608:	4413      	add	r3, r2
 800a60a:	881b      	ldrh	r3, [r3, #0]
 800a60c:	b29b      	uxth	r3, r3
 800a60e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a612:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a616:	853b      	strh	r3, [r7, #40]	; 0x28
 800a618:	687a      	ldr	r2, [r7, #4]
 800a61a:	683b      	ldr	r3, [r7, #0]
 800a61c:	781b      	ldrb	r3, [r3, #0]
 800a61e:	009b      	lsls	r3, r3, #2
 800a620:	441a      	add	r2, r3
 800a622:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a624:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a628:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a62c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a630:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a634:	b29b      	uxth	r3, r3
 800a636:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800a638:	687a      	ldr	r2, [r7, #4]
 800a63a:	683b      	ldr	r3, [r7, #0]
 800a63c:	781b      	ldrb	r3, [r3, #0]
 800a63e:	009b      	lsls	r3, r3, #2
 800a640:	4413      	add	r3, r2
 800a642:	881b      	ldrh	r3, [r3, #0]
 800a644:	b29b      	uxth	r3, r3
 800a646:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a64a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a64e:	84fb      	strh	r3, [r7, #38]	; 0x26
 800a650:	687a      	ldr	r2, [r7, #4]
 800a652:	683b      	ldr	r3, [r7, #0]
 800a654:	781b      	ldrb	r3, [r3, #0]
 800a656:	009b      	lsls	r3, r3, #2
 800a658:	441a      	add	r2, r3
 800a65a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a65c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a660:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a664:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a668:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a66c:	b29b      	uxth	r3, r3
 800a66e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a670:	687a      	ldr	r2, [r7, #4]
 800a672:	683b      	ldr	r3, [r7, #0]
 800a674:	781b      	ldrb	r3, [r3, #0]
 800a676:	009b      	lsls	r3, r3, #2
 800a678:	4413      	add	r3, r2
 800a67a:	881b      	ldrh	r3, [r3, #0]
 800a67c:	b29b      	uxth	r3, r3
 800a67e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a682:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a686:	84bb      	strh	r3, [r7, #36]	; 0x24
 800a688:	687a      	ldr	r2, [r7, #4]
 800a68a:	683b      	ldr	r3, [r7, #0]
 800a68c:	781b      	ldrb	r3, [r3, #0]
 800a68e:	009b      	lsls	r3, r3, #2
 800a690:	441a      	add	r2, r3
 800a692:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a694:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a698:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a69c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a6a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a6a4:	b29b      	uxth	r3, r3
 800a6a6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a6a8:	687a      	ldr	r2, [r7, #4]
 800a6aa:	683b      	ldr	r3, [r7, #0]
 800a6ac:	781b      	ldrb	r3, [r3, #0]
 800a6ae:	009b      	lsls	r3, r3, #2
 800a6b0:	4413      	add	r3, r2
 800a6b2:	881b      	ldrh	r3, [r3, #0]
 800a6b4:	b29b      	uxth	r3, r3
 800a6b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a6ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a6be:	847b      	strh	r3, [r7, #34]	; 0x22
 800a6c0:	687a      	ldr	r2, [r7, #4]
 800a6c2:	683b      	ldr	r3, [r7, #0]
 800a6c4:	781b      	ldrb	r3, [r3, #0]
 800a6c6:	009b      	lsls	r3, r3, #2
 800a6c8:	441a      	add	r2, r3
 800a6ca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a6cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a6d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a6d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a6d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a6dc:	b29b      	uxth	r3, r3
 800a6de:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800a6e0:	2300      	movs	r3, #0
}
 800a6e2:	4618      	mov	r0, r3
 800a6e4:	3734      	adds	r7, #52	; 0x34
 800a6e6:	46bd      	mov	sp, r7
 800a6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ec:	4770      	bx	lr

0800a6ee <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a6ee:	b580      	push	{r7, lr}
 800a6f0:	b0c2      	sub	sp, #264	; 0x108
 800a6f2:	af00      	add	r7, sp, #0
 800a6f4:	1d3b      	adds	r3, r7, #4
 800a6f6:	6018      	str	r0, [r3, #0]
 800a6f8:	463b      	mov	r3, r7
 800a6fa:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a6fc:	463b      	mov	r3, r7
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	785b      	ldrb	r3, [r3, #1]
 800a702:	2b01      	cmp	r3, #1
 800a704:	f040 8509 	bne.w	800b11a <USB_EPStartXfer+0xa2c>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800a708:	463b      	mov	r3, r7
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	699a      	ldr	r2, [r3, #24]
 800a70e:	463b      	mov	r3, r7
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	691b      	ldr	r3, [r3, #16]
 800a714:	429a      	cmp	r2, r3
 800a716:	d905      	bls.n	800a724 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 800a718:	463b      	mov	r3, r7
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	691b      	ldr	r3, [r3, #16]
 800a71e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800a722:	e004      	b.n	800a72e <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 800a724:	463b      	mov	r3, r7
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	699b      	ldr	r3, [r3, #24]
 800a72a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800a72e:	463b      	mov	r3, r7
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	7b1b      	ldrb	r3, [r3, #12]
 800a734:	2b00      	cmp	r3, #0
 800a736:	d128      	bne.n	800a78a <USB_EPStartXfer+0x9c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800a738:	463b      	mov	r3, r7
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	6959      	ldr	r1, [r3, #20]
 800a73e:	463b      	mov	r3, r7
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	88da      	ldrh	r2, [r3, #6]
 800a744:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a748:	b29b      	uxth	r3, r3
 800a74a:	1d38      	adds	r0, r7, #4
 800a74c:	6800      	ldr	r0, [r0, #0]
 800a74e:	f001 f9ce 	bl	800baee <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800a752:	1d3b      	adds	r3, r7, #4
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	613b      	str	r3, [r7, #16]
 800a758:	1d3b      	adds	r3, r7, #4
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a760:	b29b      	uxth	r3, r3
 800a762:	461a      	mov	r2, r3
 800a764:	693b      	ldr	r3, [r7, #16]
 800a766:	4413      	add	r3, r2
 800a768:	613b      	str	r3, [r7, #16]
 800a76a:	463b      	mov	r3, r7
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	781b      	ldrb	r3, [r3, #0]
 800a770:	00da      	lsls	r2, r3, #3
 800a772:	693b      	ldr	r3, [r7, #16]
 800a774:	4413      	add	r3, r2
 800a776:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a77a:	60fb      	str	r3, [r7, #12]
 800a77c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a780:	b29a      	uxth	r2, r3
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	801a      	strh	r2, [r3, #0]
 800a786:	f000 bc9f 	b.w	800b0c8 <USB_EPStartXfer+0x9da>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800a78a:	463b      	mov	r3, r7
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	78db      	ldrb	r3, [r3, #3]
 800a790:	2b02      	cmp	r3, #2
 800a792:	f040 8347 	bne.w	800ae24 <USB_EPStartXfer+0x736>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800a796:	463b      	mov	r3, r7
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	6a1a      	ldr	r2, [r3, #32]
 800a79c:	463b      	mov	r3, r7
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	691b      	ldr	r3, [r3, #16]
 800a7a2:	429a      	cmp	r2, r3
 800a7a4:	f240 82eb 	bls.w	800ad7e <USB_EPStartXfer+0x690>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800a7a8:	1d3b      	adds	r3, r7, #4
 800a7aa:	681a      	ldr	r2, [r3, #0]
 800a7ac:	463b      	mov	r3, r7
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	781b      	ldrb	r3, [r3, #0]
 800a7b2:	009b      	lsls	r3, r3, #2
 800a7b4:	4413      	add	r3, r2
 800a7b6:	881b      	ldrh	r3, [r3, #0]
 800a7b8:	b29b      	uxth	r3, r3
 800a7ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a7be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a7c2:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800a7c6:	1d3b      	adds	r3, r7, #4
 800a7c8:	681a      	ldr	r2, [r3, #0]
 800a7ca:	463b      	mov	r3, r7
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	781b      	ldrb	r3, [r3, #0]
 800a7d0:	009b      	lsls	r3, r3, #2
 800a7d2:	441a      	add	r2, r3
 800a7d4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800a7d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a7dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a7e0:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800a7e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a7e8:	b29b      	uxth	r3, r3
 800a7ea:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800a7ec:	463b      	mov	r3, r7
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	6a1a      	ldr	r2, [r3, #32]
 800a7f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7f6:	1ad2      	subs	r2, r2, r3
 800a7f8:	463b      	mov	r3, r7
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800a7fe:	1d3b      	adds	r3, r7, #4
 800a800:	681a      	ldr	r2, [r3, #0]
 800a802:	463b      	mov	r3, r7
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	781b      	ldrb	r3, [r3, #0]
 800a808:	009b      	lsls	r3, r3, #2
 800a80a:	4413      	add	r3, r2
 800a80c:	881b      	ldrh	r3, [r3, #0]
 800a80e:	b29b      	uxth	r3, r3
 800a810:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a814:	2b00      	cmp	r3, #0
 800a816:	f000 8159 	beq.w	800aacc <USB_EPStartXfer+0x3de>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a81a:	1d3b      	adds	r3, r7, #4
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	633b      	str	r3, [r7, #48]	; 0x30
 800a820:	463b      	mov	r3, r7
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	785b      	ldrb	r3, [r3, #1]
 800a826:	2b00      	cmp	r3, #0
 800a828:	d164      	bne.n	800a8f4 <USB_EPStartXfer+0x206>
 800a82a:	1d3b      	adds	r3, r7, #4
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	62bb      	str	r3, [r7, #40]	; 0x28
 800a830:	1d3b      	adds	r3, r7, #4
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a838:	b29b      	uxth	r3, r3
 800a83a:	461a      	mov	r2, r3
 800a83c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a83e:	4413      	add	r3, r2
 800a840:	62bb      	str	r3, [r7, #40]	; 0x28
 800a842:	463b      	mov	r3, r7
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	781b      	ldrb	r3, [r3, #0]
 800a848:	00da      	lsls	r2, r3, #3
 800a84a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a84c:	4413      	add	r3, r2
 800a84e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a852:	627b      	str	r3, [r7, #36]	; 0x24
 800a854:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d112      	bne.n	800a882 <USB_EPStartXfer+0x194>
 800a85c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a85e:	881b      	ldrh	r3, [r3, #0]
 800a860:	b29b      	uxth	r3, r3
 800a862:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a866:	b29a      	uxth	r2, r3
 800a868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a86a:	801a      	strh	r2, [r3, #0]
 800a86c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a86e:	881b      	ldrh	r3, [r3, #0]
 800a870:	b29b      	uxth	r3, r3
 800a872:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a876:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a87a:	b29a      	uxth	r2, r3
 800a87c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a87e:	801a      	strh	r2, [r3, #0]
 800a880:	e054      	b.n	800a92c <USB_EPStartXfer+0x23e>
 800a882:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a886:	2b3e      	cmp	r3, #62	; 0x3e
 800a888:	d817      	bhi.n	800a8ba <USB_EPStartXfer+0x1cc>
 800a88a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a88e:	085b      	lsrs	r3, r3, #1
 800a890:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a894:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a898:	f003 0301 	and.w	r3, r3, #1
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d004      	beq.n	800a8aa <USB_EPStartXfer+0x1bc>
 800a8a0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a8a4:	3301      	adds	r3, #1
 800a8a6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a8aa:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a8ae:	b29b      	uxth	r3, r3
 800a8b0:	029b      	lsls	r3, r3, #10
 800a8b2:	b29a      	uxth	r2, r3
 800a8b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8b6:	801a      	strh	r2, [r3, #0]
 800a8b8:	e038      	b.n	800a92c <USB_EPStartXfer+0x23e>
 800a8ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8be:	095b      	lsrs	r3, r3, #5
 800a8c0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a8c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8c8:	f003 031f 	and.w	r3, r3, #31
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d104      	bne.n	800a8da <USB_EPStartXfer+0x1ec>
 800a8d0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a8d4:	3b01      	subs	r3, #1
 800a8d6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a8da:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a8de:	b29b      	uxth	r3, r3
 800a8e0:	029b      	lsls	r3, r3, #10
 800a8e2:	b29b      	uxth	r3, r3
 800a8e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a8e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a8ec:	b29a      	uxth	r2, r3
 800a8ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8f0:	801a      	strh	r2, [r3, #0]
 800a8f2:	e01b      	b.n	800a92c <USB_EPStartXfer+0x23e>
 800a8f4:	463b      	mov	r3, r7
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	785b      	ldrb	r3, [r3, #1]
 800a8fa:	2b01      	cmp	r3, #1
 800a8fc:	d116      	bne.n	800a92c <USB_EPStartXfer+0x23e>
 800a8fe:	1d3b      	adds	r3, r7, #4
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a906:	b29b      	uxth	r3, r3
 800a908:	461a      	mov	r2, r3
 800a90a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a90c:	4413      	add	r3, r2
 800a90e:	633b      	str	r3, [r7, #48]	; 0x30
 800a910:	463b      	mov	r3, r7
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	781b      	ldrb	r3, [r3, #0]
 800a916:	00da      	lsls	r2, r3, #3
 800a918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a91a:	4413      	add	r3, r2
 800a91c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a920:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a922:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a926:	b29a      	uxth	r2, r3
 800a928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a92a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800a92c:	463b      	mov	r3, r7
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	895b      	ldrh	r3, [r3, #10]
 800a932:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a936:	463b      	mov	r3, r7
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	6959      	ldr	r1, [r3, #20]
 800a93c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a940:	b29b      	uxth	r3, r3
 800a942:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a946:	1d38      	adds	r0, r7, #4
 800a948:	6800      	ldr	r0, [r0, #0]
 800a94a:	f001 f8d0 	bl	800baee <USB_WritePMA>
            ep->xfer_buff += len;
 800a94e:	463b      	mov	r3, r7
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	695a      	ldr	r2, [r3, #20]
 800a954:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a958:	441a      	add	r2, r3
 800a95a:	463b      	mov	r3, r7
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800a960:	463b      	mov	r3, r7
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	6a1a      	ldr	r2, [r3, #32]
 800a966:	463b      	mov	r3, r7
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	691b      	ldr	r3, [r3, #16]
 800a96c:	429a      	cmp	r2, r3
 800a96e:	d909      	bls.n	800a984 <USB_EPStartXfer+0x296>
            {
              ep->xfer_len_db -= len;
 800a970:	463b      	mov	r3, r7
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	6a1a      	ldr	r2, [r3, #32]
 800a976:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a97a:	1ad2      	subs	r2, r2, r3
 800a97c:	463b      	mov	r3, r7
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	621a      	str	r2, [r3, #32]
 800a982:	e008      	b.n	800a996 <USB_EPStartXfer+0x2a8>
            }
            else
            {
              len = ep->xfer_len_db;
 800a984:	463b      	mov	r3, r7
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	6a1b      	ldr	r3, [r3, #32]
 800a98a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800a98e:	463b      	mov	r3, r7
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	2200      	movs	r2, #0
 800a994:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a996:	463b      	mov	r3, r7
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	785b      	ldrb	r3, [r3, #1]
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d164      	bne.n	800aa6a <USB_EPStartXfer+0x37c>
 800a9a0:	1d3b      	adds	r3, r7, #4
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	61bb      	str	r3, [r7, #24]
 800a9a6:	1d3b      	adds	r3, r7, #4
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a9ae:	b29b      	uxth	r3, r3
 800a9b0:	461a      	mov	r2, r3
 800a9b2:	69bb      	ldr	r3, [r7, #24]
 800a9b4:	4413      	add	r3, r2
 800a9b6:	61bb      	str	r3, [r7, #24]
 800a9b8:	463b      	mov	r3, r7
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	781b      	ldrb	r3, [r3, #0]
 800a9be:	00da      	lsls	r2, r3, #3
 800a9c0:	69bb      	ldr	r3, [r7, #24]
 800a9c2:	4413      	add	r3, r2
 800a9c4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a9c8:	617b      	str	r3, [r7, #20]
 800a9ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d112      	bne.n	800a9f8 <USB_EPStartXfer+0x30a>
 800a9d2:	697b      	ldr	r3, [r7, #20]
 800a9d4:	881b      	ldrh	r3, [r3, #0]
 800a9d6:	b29b      	uxth	r3, r3
 800a9d8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a9dc:	b29a      	uxth	r2, r3
 800a9de:	697b      	ldr	r3, [r7, #20]
 800a9e0:	801a      	strh	r2, [r3, #0]
 800a9e2:	697b      	ldr	r3, [r7, #20]
 800a9e4:	881b      	ldrh	r3, [r3, #0]
 800a9e6:	b29b      	uxth	r3, r3
 800a9e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a9ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a9f0:	b29a      	uxth	r2, r3
 800a9f2:	697b      	ldr	r3, [r7, #20]
 800a9f4:	801a      	strh	r2, [r3, #0]
 800a9f6:	e057      	b.n	800aaa8 <USB_EPStartXfer+0x3ba>
 800a9f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9fc:	2b3e      	cmp	r3, #62	; 0x3e
 800a9fe:	d817      	bhi.n	800aa30 <USB_EPStartXfer+0x342>
 800aa00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa04:	085b      	lsrs	r3, r3, #1
 800aa06:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800aa0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa0e:	f003 0301 	and.w	r3, r3, #1
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d004      	beq.n	800aa20 <USB_EPStartXfer+0x332>
 800aa16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800aa1a:	3301      	adds	r3, #1
 800aa1c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800aa20:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800aa24:	b29b      	uxth	r3, r3
 800aa26:	029b      	lsls	r3, r3, #10
 800aa28:	b29a      	uxth	r2, r3
 800aa2a:	697b      	ldr	r3, [r7, #20]
 800aa2c:	801a      	strh	r2, [r3, #0]
 800aa2e:	e03b      	b.n	800aaa8 <USB_EPStartXfer+0x3ba>
 800aa30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa34:	095b      	lsrs	r3, r3, #5
 800aa36:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800aa3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa3e:	f003 031f 	and.w	r3, r3, #31
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d104      	bne.n	800aa50 <USB_EPStartXfer+0x362>
 800aa46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800aa4a:	3b01      	subs	r3, #1
 800aa4c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800aa50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800aa54:	b29b      	uxth	r3, r3
 800aa56:	029b      	lsls	r3, r3, #10
 800aa58:	b29b      	uxth	r3, r3
 800aa5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aa5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aa62:	b29a      	uxth	r2, r3
 800aa64:	697b      	ldr	r3, [r7, #20]
 800aa66:	801a      	strh	r2, [r3, #0]
 800aa68:	e01e      	b.n	800aaa8 <USB_EPStartXfer+0x3ba>
 800aa6a:	463b      	mov	r3, r7
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	785b      	ldrb	r3, [r3, #1]
 800aa70:	2b01      	cmp	r3, #1
 800aa72:	d119      	bne.n	800aaa8 <USB_EPStartXfer+0x3ba>
 800aa74:	1d3b      	adds	r3, r7, #4
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	623b      	str	r3, [r7, #32]
 800aa7a:	1d3b      	adds	r3, r7, #4
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aa82:	b29b      	uxth	r3, r3
 800aa84:	461a      	mov	r2, r3
 800aa86:	6a3b      	ldr	r3, [r7, #32]
 800aa88:	4413      	add	r3, r2
 800aa8a:	623b      	str	r3, [r7, #32]
 800aa8c:	463b      	mov	r3, r7
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	781b      	ldrb	r3, [r3, #0]
 800aa92:	00da      	lsls	r2, r3, #3
 800aa94:	6a3b      	ldr	r3, [r7, #32]
 800aa96:	4413      	add	r3, r2
 800aa98:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800aa9c:	61fb      	str	r3, [r7, #28]
 800aa9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aaa2:	b29a      	uxth	r2, r3
 800aaa4:	69fb      	ldr	r3, [r7, #28]
 800aaa6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800aaa8:	463b      	mov	r3, r7
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	891b      	ldrh	r3, [r3, #8]
 800aaae:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800aab2:	463b      	mov	r3, r7
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	6959      	ldr	r1, [r3, #20]
 800aab8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aabc:	b29b      	uxth	r3, r3
 800aabe:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800aac2:	1d38      	adds	r0, r7, #4
 800aac4:	6800      	ldr	r0, [r0, #0]
 800aac6:	f001 f812 	bl	800baee <USB_WritePMA>
 800aaca:	e2fd      	b.n	800b0c8 <USB_EPStartXfer+0x9da>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800aacc:	463b      	mov	r3, r7
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	785b      	ldrb	r3, [r3, #1]
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d164      	bne.n	800aba0 <USB_EPStartXfer+0x4b2>
 800aad6:	1d3b      	adds	r3, r7, #4
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	64bb      	str	r3, [r7, #72]	; 0x48
 800aadc:	1d3b      	adds	r3, r7, #4
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aae4:	b29b      	uxth	r3, r3
 800aae6:	461a      	mov	r2, r3
 800aae8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aaea:	4413      	add	r3, r2
 800aaec:	64bb      	str	r3, [r7, #72]	; 0x48
 800aaee:	463b      	mov	r3, r7
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	781b      	ldrb	r3, [r3, #0]
 800aaf4:	00da      	lsls	r2, r3, #3
 800aaf6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aaf8:	4413      	add	r3, r2
 800aafa:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800aafe:	647b      	str	r3, [r7, #68]	; 0x44
 800ab00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d112      	bne.n	800ab2e <USB_EPStartXfer+0x440>
 800ab08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ab0a:	881b      	ldrh	r3, [r3, #0]
 800ab0c:	b29b      	uxth	r3, r3
 800ab0e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ab12:	b29a      	uxth	r2, r3
 800ab14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ab16:	801a      	strh	r2, [r3, #0]
 800ab18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ab1a:	881b      	ldrh	r3, [r3, #0]
 800ab1c:	b29b      	uxth	r3, r3
 800ab1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ab22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ab26:	b29a      	uxth	r2, r3
 800ab28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ab2a:	801a      	strh	r2, [r3, #0]
 800ab2c:	e057      	b.n	800abde <USB_EPStartXfer+0x4f0>
 800ab2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab32:	2b3e      	cmp	r3, #62	; 0x3e
 800ab34:	d817      	bhi.n	800ab66 <USB_EPStartXfer+0x478>
 800ab36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab3a:	085b      	lsrs	r3, r3, #1
 800ab3c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800ab40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab44:	f003 0301 	and.w	r3, r3, #1
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d004      	beq.n	800ab56 <USB_EPStartXfer+0x468>
 800ab4c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ab50:	3301      	adds	r3, #1
 800ab52:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800ab56:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ab5a:	b29b      	uxth	r3, r3
 800ab5c:	029b      	lsls	r3, r3, #10
 800ab5e:	b29a      	uxth	r2, r3
 800ab60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ab62:	801a      	strh	r2, [r3, #0]
 800ab64:	e03b      	b.n	800abde <USB_EPStartXfer+0x4f0>
 800ab66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab6a:	095b      	lsrs	r3, r3, #5
 800ab6c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800ab70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab74:	f003 031f 	and.w	r3, r3, #31
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d104      	bne.n	800ab86 <USB_EPStartXfer+0x498>
 800ab7c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ab80:	3b01      	subs	r3, #1
 800ab82:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800ab86:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ab8a:	b29b      	uxth	r3, r3
 800ab8c:	029b      	lsls	r3, r3, #10
 800ab8e:	b29b      	uxth	r3, r3
 800ab90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ab94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ab98:	b29a      	uxth	r2, r3
 800ab9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ab9c:	801a      	strh	r2, [r3, #0]
 800ab9e:	e01e      	b.n	800abde <USB_EPStartXfer+0x4f0>
 800aba0:	463b      	mov	r3, r7
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	785b      	ldrb	r3, [r3, #1]
 800aba6:	2b01      	cmp	r3, #1
 800aba8:	d119      	bne.n	800abde <USB_EPStartXfer+0x4f0>
 800abaa:	1d3b      	adds	r3, r7, #4
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	653b      	str	r3, [r7, #80]	; 0x50
 800abb0:	1d3b      	adds	r3, r7, #4
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800abb8:	b29b      	uxth	r3, r3
 800abba:	461a      	mov	r2, r3
 800abbc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800abbe:	4413      	add	r3, r2
 800abc0:	653b      	str	r3, [r7, #80]	; 0x50
 800abc2:	463b      	mov	r3, r7
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	781b      	ldrb	r3, [r3, #0]
 800abc8:	00da      	lsls	r2, r3, #3
 800abca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800abcc:	4413      	add	r3, r2
 800abce:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800abd2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800abd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abd8:	b29a      	uxth	r2, r3
 800abda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800abdc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800abde:	463b      	mov	r3, r7
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	891b      	ldrh	r3, [r3, #8]
 800abe4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800abe8:	463b      	mov	r3, r7
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	6959      	ldr	r1, [r3, #20]
 800abee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abf2:	b29b      	uxth	r3, r3
 800abf4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800abf8:	1d38      	adds	r0, r7, #4
 800abfa:	6800      	ldr	r0, [r0, #0]
 800abfc:	f000 ff77 	bl	800baee <USB_WritePMA>
            ep->xfer_buff += len;
 800ac00:	463b      	mov	r3, r7
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	695a      	ldr	r2, [r3, #20]
 800ac06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac0a:	441a      	add	r2, r3
 800ac0c:	463b      	mov	r3, r7
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800ac12:	463b      	mov	r3, r7
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	6a1a      	ldr	r2, [r3, #32]
 800ac18:	463b      	mov	r3, r7
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	691b      	ldr	r3, [r3, #16]
 800ac1e:	429a      	cmp	r2, r3
 800ac20:	d909      	bls.n	800ac36 <USB_EPStartXfer+0x548>
            {
              ep->xfer_len_db -= len;
 800ac22:	463b      	mov	r3, r7
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	6a1a      	ldr	r2, [r3, #32]
 800ac28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac2c:	1ad2      	subs	r2, r2, r3
 800ac2e:	463b      	mov	r3, r7
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	621a      	str	r2, [r3, #32]
 800ac34:	e008      	b.n	800ac48 <USB_EPStartXfer+0x55a>
            }
            else
            {
              len = ep->xfer_len_db;
 800ac36:	463b      	mov	r3, r7
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	6a1b      	ldr	r3, [r3, #32]
 800ac3c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800ac40:	463b      	mov	r3, r7
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	2200      	movs	r2, #0
 800ac46:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800ac48:	1d3b      	adds	r3, r7, #4
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	643b      	str	r3, [r7, #64]	; 0x40
 800ac4e:	463b      	mov	r3, r7
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	785b      	ldrb	r3, [r3, #1]
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d164      	bne.n	800ad22 <USB_EPStartXfer+0x634>
 800ac58:	1d3b      	adds	r3, r7, #4
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	63bb      	str	r3, [r7, #56]	; 0x38
 800ac5e:	1d3b      	adds	r3, r7, #4
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ac66:	b29b      	uxth	r3, r3
 800ac68:	461a      	mov	r2, r3
 800ac6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac6c:	4413      	add	r3, r2
 800ac6e:	63bb      	str	r3, [r7, #56]	; 0x38
 800ac70:	463b      	mov	r3, r7
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	781b      	ldrb	r3, [r3, #0]
 800ac76:	00da      	lsls	r2, r3, #3
 800ac78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac7a:	4413      	add	r3, r2
 800ac7c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ac80:	637b      	str	r3, [r7, #52]	; 0x34
 800ac82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d112      	bne.n	800acb0 <USB_EPStartXfer+0x5c2>
 800ac8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac8c:	881b      	ldrh	r3, [r3, #0]
 800ac8e:	b29b      	uxth	r3, r3
 800ac90:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ac94:	b29a      	uxth	r2, r3
 800ac96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac98:	801a      	strh	r2, [r3, #0]
 800ac9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac9c:	881b      	ldrh	r3, [r3, #0]
 800ac9e:	b29b      	uxth	r3, r3
 800aca0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aca4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aca8:	b29a      	uxth	r2, r3
 800acaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acac:	801a      	strh	r2, [r3, #0]
 800acae:	e054      	b.n	800ad5a <USB_EPStartXfer+0x66c>
 800acb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800acb4:	2b3e      	cmp	r3, #62	; 0x3e
 800acb6:	d817      	bhi.n	800ace8 <USB_EPStartXfer+0x5fa>
 800acb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800acbc:	085b      	lsrs	r3, r3, #1
 800acbe:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800acc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800acc6:	f003 0301 	and.w	r3, r3, #1
 800acca:	2b00      	cmp	r3, #0
 800accc:	d004      	beq.n	800acd8 <USB_EPStartXfer+0x5ea>
 800acce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800acd2:	3301      	adds	r3, #1
 800acd4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800acd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800acdc:	b29b      	uxth	r3, r3
 800acde:	029b      	lsls	r3, r3, #10
 800ace0:	b29a      	uxth	r2, r3
 800ace2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ace4:	801a      	strh	r2, [r3, #0]
 800ace6:	e038      	b.n	800ad5a <USB_EPStartXfer+0x66c>
 800ace8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800acec:	095b      	lsrs	r3, r3, #5
 800acee:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800acf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800acf6:	f003 031f 	and.w	r3, r3, #31
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d104      	bne.n	800ad08 <USB_EPStartXfer+0x61a>
 800acfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ad02:	3b01      	subs	r3, #1
 800ad04:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800ad08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ad0c:	b29b      	uxth	r3, r3
 800ad0e:	029b      	lsls	r3, r3, #10
 800ad10:	b29b      	uxth	r3, r3
 800ad12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ad16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ad1a:	b29a      	uxth	r2, r3
 800ad1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad1e:	801a      	strh	r2, [r3, #0]
 800ad20:	e01b      	b.n	800ad5a <USB_EPStartXfer+0x66c>
 800ad22:	463b      	mov	r3, r7
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	785b      	ldrb	r3, [r3, #1]
 800ad28:	2b01      	cmp	r3, #1
 800ad2a:	d116      	bne.n	800ad5a <USB_EPStartXfer+0x66c>
 800ad2c:	1d3b      	adds	r3, r7, #4
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ad34:	b29b      	uxth	r3, r3
 800ad36:	461a      	mov	r2, r3
 800ad38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad3a:	4413      	add	r3, r2
 800ad3c:	643b      	str	r3, [r7, #64]	; 0x40
 800ad3e:	463b      	mov	r3, r7
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	781b      	ldrb	r3, [r3, #0]
 800ad44:	00da      	lsls	r2, r3, #3
 800ad46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad48:	4413      	add	r3, r2
 800ad4a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ad4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ad50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad54:	b29a      	uxth	r2, r3
 800ad56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad58:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800ad5a:	463b      	mov	r3, r7
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	895b      	ldrh	r3, [r3, #10]
 800ad60:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ad64:	463b      	mov	r3, r7
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	6959      	ldr	r1, [r3, #20]
 800ad6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad6e:	b29b      	uxth	r3, r3
 800ad70:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800ad74:	1d38      	adds	r0, r7, #4
 800ad76:	6800      	ldr	r0, [r0, #0]
 800ad78:	f000 feb9 	bl	800baee <USB_WritePMA>
 800ad7c:	e1a4      	b.n	800b0c8 <USB_EPStartXfer+0x9da>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800ad7e:	463b      	mov	r3, r7
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	6a1b      	ldr	r3, [r3, #32]
 800ad84:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800ad88:	1d3b      	adds	r3, r7, #4
 800ad8a:	681a      	ldr	r2, [r3, #0]
 800ad8c:	463b      	mov	r3, r7
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	781b      	ldrb	r3, [r3, #0]
 800ad92:	009b      	lsls	r3, r3, #2
 800ad94:	4413      	add	r3, r2
 800ad96:	881b      	ldrh	r3, [r3, #0]
 800ad98:	b29b      	uxth	r3, r3
 800ad9a:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800ad9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ada2:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800ada6:	1d3b      	adds	r3, r7, #4
 800ada8:	681a      	ldr	r2, [r3, #0]
 800adaa:	463b      	mov	r3, r7
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	781b      	ldrb	r3, [r3, #0]
 800adb0:	009b      	lsls	r3, r3, #2
 800adb2:	441a      	add	r2, r3
 800adb4:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800adb8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800adbc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800adc0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800adc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800adc8:	b29b      	uxth	r3, r3
 800adca:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800adcc:	1d3b      	adds	r3, r7, #4
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	65fb      	str	r3, [r7, #92]	; 0x5c
 800add2:	1d3b      	adds	r3, r7, #4
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800adda:	b29b      	uxth	r3, r3
 800addc:	461a      	mov	r2, r3
 800adde:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ade0:	4413      	add	r3, r2
 800ade2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ade4:	463b      	mov	r3, r7
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	781b      	ldrb	r3, [r3, #0]
 800adea:	00da      	lsls	r2, r3, #3
 800adec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800adee:	4413      	add	r3, r2
 800adf0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800adf4:	65bb      	str	r3, [r7, #88]	; 0x58
 800adf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800adfa:	b29a      	uxth	r2, r3
 800adfc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800adfe:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800ae00:	463b      	mov	r3, r7
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	891b      	ldrh	r3, [r3, #8]
 800ae06:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ae0a:	463b      	mov	r3, r7
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	6959      	ldr	r1, [r3, #20]
 800ae10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae14:	b29b      	uxth	r3, r3
 800ae16:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800ae1a:	1d38      	adds	r0, r7, #4
 800ae1c:	6800      	ldr	r0, [r0, #0]
 800ae1e:	f000 fe66 	bl	800baee <USB_WritePMA>
 800ae22:	e151      	b.n	800b0c8 <USB_EPStartXfer+0x9da>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800ae24:	463b      	mov	r3, r7
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	6a1a      	ldr	r2, [r3, #32]
 800ae2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae2e:	1ad2      	subs	r2, r2, r3
 800ae30:	463b      	mov	r3, r7
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800ae36:	1d3b      	adds	r3, r7, #4
 800ae38:	681a      	ldr	r2, [r3, #0]
 800ae3a:	463b      	mov	r3, r7
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	781b      	ldrb	r3, [r3, #0]
 800ae40:	009b      	lsls	r3, r3, #2
 800ae42:	4413      	add	r3, r2
 800ae44:	881b      	ldrh	r3, [r3, #0]
 800ae46:	b29b      	uxth	r3, r3
 800ae48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	f000 809b 	beq.w	800af88 <USB_EPStartXfer+0x89a>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800ae52:	1d3b      	adds	r3, r7, #4
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	673b      	str	r3, [r7, #112]	; 0x70
 800ae58:	463b      	mov	r3, r7
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	785b      	ldrb	r3, [r3, #1]
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d164      	bne.n	800af2c <USB_EPStartXfer+0x83e>
 800ae62:	1d3b      	adds	r3, r7, #4
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	66bb      	str	r3, [r7, #104]	; 0x68
 800ae68:	1d3b      	adds	r3, r7, #4
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ae70:	b29b      	uxth	r3, r3
 800ae72:	461a      	mov	r2, r3
 800ae74:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ae76:	4413      	add	r3, r2
 800ae78:	66bb      	str	r3, [r7, #104]	; 0x68
 800ae7a:	463b      	mov	r3, r7
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	781b      	ldrb	r3, [r3, #0]
 800ae80:	00da      	lsls	r2, r3, #3
 800ae82:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ae84:	4413      	add	r3, r2
 800ae86:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ae8a:	667b      	str	r3, [r7, #100]	; 0x64
 800ae8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d112      	bne.n	800aeba <USB_EPStartXfer+0x7cc>
 800ae94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ae96:	881b      	ldrh	r3, [r3, #0]
 800ae98:	b29b      	uxth	r3, r3
 800ae9a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ae9e:	b29a      	uxth	r2, r3
 800aea0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aea2:	801a      	strh	r2, [r3, #0]
 800aea4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aea6:	881b      	ldrh	r3, [r3, #0]
 800aea8:	b29b      	uxth	r3, r3
 800aeaa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aeae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aeb2:	b29a      	uxth	r2, r3
 800aeb4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aeb6:	801a      	strh	r2, [r3, #0]
 800aeb8:	e054      	b.n	800af64 <USB_EPStartXfer+0x876>
 800aeba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aebe:	2b3e      	cmp	r3, #62	; 0x3e
 800aec0:	d817      	bhi.n	800aef2 <USB_EPStartXfer+0x804>
 800aec2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aec6:	085b      	lsrs	r3, r3, #1
 800aec8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800aecc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aed0:	f003 0301 	and.w	r3, r3, #1
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d004      	beq.n	800aee2 <USB_EPStartXfer+0x7f4>
 800aed8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800aedc:	3301      	adds	r3, #1
 800aede:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800aee2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800aee6:	b29b      	uxth	r3, r3
 800aee8:	029b      	lsls	r3, r3, #10
 800aeea:	b29a      	uxth	r2, r3
 800aeec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aeee:	801a      	strh	r2, [r3, #0]
 800aef0:	e038      	b.n	800af64 <USB_EPStartXfer+0x876>
 800aef2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aef6:	095b      	lsrs	r3, r3, #5
 800aef8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800aefc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af00:	f003 031f 	and.w	r3, r3, #31
 800af04:	2b00      	cmp	r3, #0
 800af06:	d104      	bne.n	800af12 <USB_EPStartXfer+0x824>
 800af08:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800af0c:	3b01      	subs	r3, #1
 800af0e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800af12:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800af16:	b29b      	uxth	r3, r3
 800af18:	029b      	lsls	r3, r3, #10
 800af1a:	b29b      	uxth	r3, r3
 800af1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800af20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800af24:	b29a      	uxth	r2, r3
 800af26:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800af28:	801a      	strh	r2, [r3, #0]
 800af2a:	e01b      	b.n	800af64 <USB_EPStartXfer+0x876>
 800af2c:	463b      	mov	r3, r7
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	785b      	ldrb	r3, [r3, #1]
 800af32:	2b01      	cmp	r3, #1
 800af34:	d116      	bne.n	800af64 <USB_EPStartXfer+0x876>
 800af36:	1d3b      	adds	r3, r7, #4
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800af3e:	b29b      	uxth	r3, r3
 800af40:	461a      	mov	r2, r3
 800af42:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800af44:	4413      	add	r3, r2
 800af46:	673b      	str	r3, [r7, #112]	; 0x70
 800af48:	463b      	mov	r3, r7
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	781b      	ldrb	r3, [r3, #0]
 800af4e:	00da      	lsls	r2, r3, #3
 800af50:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800af52:	4413      	add	r3, r2
 800af54:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800af58:	66fb      	str	r3, [r7, #108]	; 0x6c
 800af5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af5e:	b29a      	uxth	r2, r3
 800af60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800af62:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800af64:	463b      	mov	r3, r7
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	895b      	ldrh	r3, [r3, #10]
 800af6a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800af6e:	463b      	mov	r3, r7
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	6959      	ldr	r1, [r3, #20]
 800af74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af78:	b29b      	uxth	r3, r3
 800af7a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800af7e:	1d38      	adds	r0, r7, #4
 800af80:	6800      	ldr	r0, [r0, #0]
 800af82:	f000 fdb4 	bl	800baee <USB_WritePMA>
 800af86:	e09f      	b.n	800b0c8 <USB_EPStartXfer+0x9da>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800af88:	463b      	mov	r3, r7
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	785b      	ldrb	r3, [r3, #1]
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d164      	bne.n	800b05c <USB_EPStartXfer+0x96e>
 800af92:	1d3b      	adds	r3, r7, #4
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	67fb      	str	r3, [r7, #124]	; 0x7c
 800af98:	1d3b      	adds	r3, r7, #4
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800afa0:	b29b      	uxth	r3, r3
 800afa2:	461a      	mov	r2, r3
 800afa4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800afa6:	4413      	add	r3, r2
 800afa8:	67fb      	str	r3, [r7, #124]	; 0x7c
 800afaa:	463b      	mov	r3, r7
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	781b      	ldrb	r3, [r3, #0]
 800afb0:	00da      	lsls	r2, r3, #3
 800afb2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800afb4:	4413      	add	r3, r2
 800afb6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800afba:	67bb      	str	r3, [r7, #120]	; 0x78
 800afbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d112      	bne.n	800afea <USB_EPStartXfer+0x8fc>
 800afc4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800afc6:	881b      	ldrh	r3, [r3, #0]
 800afc8:	b29b      	uxth	r3, r3
 800afca:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800afce:	b29a      	uxth	r2, r3
 800afd0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800afd2:	801a      	strh	r2, [r3, #0]
 800afd4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800afd6:	881b      	ldrh	r3, [r3, #0]
 800afd8:	b29b      	uxth	r3, r3
 800afda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800afde:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800afe2:	b29a      	uxth	r2, r3
 800afe4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800afe6:	801a      	strh	r2, [r3, #0]
 800afe8:	e05d      	b.n	800b0a6 <USB_EPStartXfer+0x9b8>
 800afea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800afee:	2b3e      	cmp	r3, #62	; 0x3e
 800aff0:	d817      	bhi.n	800b022 <USB_EPStartXfer+0x934>
 800aff2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aff6:	085b      	lsrs	r3, r3, #1
 800aff8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800affc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b000:	f003 0301 	and.w	r3, r3, #1
 800b004:	2b00      	cmp	r3, #0
 800b006:	d004      	beq.n	800b012 <USB_EPStartXfer+0x924>
 800b008:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800b00c:	3301      	adds	r3, #1
 800b00e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800b012:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800b016:	b29b      	uxth	r3, r3
 800b018:	029b      	lsls	r3, r3, #10
 800b01a:	b29a      	uxth	r2, r3
 800b01c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b01e:	801a      	strh	r2, [r3, #0]
 800b020:	e041      	b.n	800b0a6 <USB_EPStartXfer+0x9b8>
 800b022:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b026:	095b      	lsrs	r3, r3, #5
 800b028:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800b02c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b030:	f003 031f 	and.w	r3, r3, #31
 800b034:	2b00      	cmp	r3, #0
 800b036:	d104      	bne.n	800b042 <USB_EPStartXfer+0x954>
 800b038:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800b03c:	3b01      	subs	r3, #1
 800b03e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800b042:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800b046:	b29b      	uxth	r3, r3
 800b048:	029b      	lsls	r3, r3, #10
 800b04a:	b29b      	uxth	r3, r3
 800b04c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b050:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b054:	b29a      	uxth	r2, r3
 800b056:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b058:	801a      	strh	r2, [r3, #0]
 800b05a:	e024      	b.n	800b0a6 <USB_EPStartXfer+0x9b8>
 800b05c:	463b      	mov	r3, r7
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	785b      	ldrb	r3, [r3, #1]
 800b062:	2b01      	cmp	r3, #1
 800b064:	d11f      	bne.n	800b0a6 <USB_EPStartXfer+0x9b8>
 800b066:	1d3b      	adds	r3, r7, #4
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b06e:	1d3b      	adds	r3, r7, #4
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b076:	b29b      	uxth	r3, r3
 800b078:	461a      	mov	r2, r3
 800b07a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b07e:	4413      	add	r3, r2
 800b080:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b084:	463b      	mov	r3, r7
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	781b      	ldrb	r3, [r3, #0]
 800b08a:	00da      	lsls	r2, r3, #3
 800b08c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b090:	4413      	add	r3, r2
 800b092:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b096:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b09a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b09e:	b29a      	uxth	r2, r3
 800b0a0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b0a4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800b0a6:	463b      	mov	r3, r7
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	891b      	ldrh	r3, [r3, #8]
 800b0ac:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b0b0:	463b      	mov	r3, r7
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	6959      	ldr	r1, [r3, #20]
 800b0b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0ba:	b29b      	uxth	r3, r3
 800b0bc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800b0c0:	1d38      	adds	r0, r7, #4
 800b0c2:	6800      	ldr	r0, [r0, #0]
 800b0c4:	f000 fd13 	bl	800baee <USB_WritePMA>
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800b0c8:	1d3b      	adds	r3, r7, #4
 800b0ca:	681a      	ldr	r2, [r3, #0]
 800b0cc:	463b      	mov	r3, r7
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	781b      	ldrb	r3, [r3, #0]
 800b0d2:	009b      	lsls	r3, r3, #2
 800b0d4:	4413      	add	r3, r2
 800b0d6:	881b      	ldrh	r3, [r3, #0]
 800b0d8:	b29b      	uxth	r3, r3
 800b0da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b0de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b0e2:	817b      	strh	r3, [r7, #10]
 800b0e4:	897b      	ldrh	r3, [r7, #10]
 800b0e6:	f083 0310 	eor.w	r3, r3, #16
 800b0ea:	817b      	strh	r3, [r7, #10]
 800b0ec:	897b      	ldrh	r3, [r7, #10]
 800b0ee:	f083 0320 	eor.w	r3, r3, #32
 800b0f2:	817b      	strh	r3, [r7, #10]
 800b0f4:	1d3b      	adds	r3, r7, #4
 800b0f6:	681a      	ldr	r2, [r3, #0]
 800b0f8:	463b      	mov	r3, r7
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	781b      	ldrb	r3, [r3, #0]
 800b0fe:	009b      	lsls	r3, r3, #2
 800b100:	441a      	add	r2, r3
 800b102:	897b      	ldrh	r3, [r7, #10]
 800b104:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b108:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b10c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b110:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b114:	b29b      	uxth	r3, r3
 800b116:	8013      	strh	r3, [r2, #0]
 800b118:	e3b5      	b.n	800b886 <USB_EPStartXfer+0x1198>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800b11a:	463b      	mov	r3, r7
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	7b1b      	ldrb	r3, [r3, #12]
 800b120:	2b00      	cmp	r3, #0
 800b122:	f040 8090 	bne.w	800b246 <USB_EPStartXfer+0xb58>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800b126:	463b      	mov	r3, r7
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	699a      	ldr	r2, [r3, #24]
 800b12c:	463b      	mov	r3, r7
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	691b      	ldr	r3, [r3, #16]
 800b132:	429a      	cmp	r2, r3
 800b134:	d90e      	bls.n	800b154 <USB_EPStartXfer+0xa66>
      {
        len = ep->maxpacket;
 800b136:	463b      	mov	r3, r7
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	691b      	ldr	r3, [r3, #16]
 800b13c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800b140:	463b      	mov	r3, r7
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	699a      	ldr	r2, [r3, #24]
 800b146:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b14a:	1ad2      	subs	r2, r2, r3
 800b14c:	463b      	mov	r3, r7
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	619a      	str	r2, [r3, #24]
 800b152:	e008      	b.n	800b166 <USB_EPStartXfer+0xa78>
      }
      else
      {
        len = ep->xfer_len;
 800b154:	463b      	mov	r3, r7
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	699b      	ldr	r3, [r3, #24]
 800b15a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800b15e:	463b      	mov	r3, r7
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	2200      	movs	r2, #0
 800b164:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800b166:	1d3b      	adds	r3, r7, #4
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b16e:	1d3b      	adds	r3, r7, #4
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b176:	b29b      	uxth	r3, r3
 800b178:	461a      	mov	r2, r3
 800b17a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b17e:	4413      	add	r3, r2
 800b180:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b184:	463b      	mov	r3, r7
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	781b      	ldrb	r3, [r3, #0]
 800b18a:	00da      	lsls	r2, r3, #3
 800b18c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b190:	4413      	add	r3, r2
 800b192:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b196:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b19a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d116      	bne.n	800b1d0 <USB_EPStartXfer+0xae2>
 800b1a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b1a6:	881b      	ldrh	r3, [r3, #0]
 800b1a8:	b29b      	uxth	r3, r3
 800b1aa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b1ae:	b29a      	uxth	r2, r3
 800b1b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b1b4:	801a      	strh	r2, [r3, #0]
 800b1b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b1ba:	881b      	ldrh	r3, [r3, #0]
 800b1bc:	b29b      	uxth	r3, r3
 800b1be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b1c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b1c6:	b29a      	uxth	r2, r3
 800b1c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b1cc:	801a      	strh	r2, [r3, #0]
 800b1ce:	e32c      	b.n	800b82a <USB_EPStartXfer+0x113c>
 800b1d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1d4:	2b3e      	cmp	r3, #62	; 0x3e
 800b1d6:	d818      	bhi.n	800b20a <USB_EPStartXfer+0xb1c>
 800b1d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1dc:	085b      	lsrs	r3, r3, #1
 800b1de:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b1e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1e6:	f003 0301 	and.w	r3, r3, #1
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d004      	beq.n	800b1f8 <USB_EPStartXfer+0xb0a>
 800b1ee:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b1f2:	3301      	adds	r3, #1
 800b1f4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b1f8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b1fc:	b29b      	uxth	r3, r3
 800b1fe:	029b      	lsls	r3, r3, #10
 800b200:	b29a      	uxth	r2, r3
 800b202:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b206:	801a      	strh	r2, [r3, #0]
 800b208:	e30f      	b.n	800b82a <USB_EPStartXfer+0x113c>
 800b20a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b20e:	095b      	lsrs	r3, r3, #5
 800b210:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b214:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b218:	f003 031f 	and.w	r3, r3, #31
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d104      	bne.n	800b22a <USB_EPStartXfer+0xb3c>
 800b220:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b224:	3b01      	subs	r3, #1
 800b226:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b22a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b22e:	b29b      	uxth	r3, r3
 800b230:	029b      	lsls	r3, r3, #10
 800b232:	b29b      	uxth	r3, r3
 800b234:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b238:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b23c:	b29a      	uxth	r2, r3
 800b23e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b242:	801a      	strh	r2, [r3, #0]
 800b244:	e2f1      	b.n	800b82a <USB_EPStartXfer+0x113c>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800b246:	463b      	mov	r3, r7
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	78db      	ldrb	r3, [r3, #3]
 800b24c:	2b02      	cmp	r3, #2
 800b24e:	f040 818f 	bne.w	800b570 <USB_EPStartXfer+0xe82>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800b252:	463b      	mov	r3, r7
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	785b      	ldrb	r3, [r3, #1]
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d175      	bne.n	800b348 <USB_EPStartXfer+0xc5a>
 800b25c:	1d3b      	adds	r3, r7, #4
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b264:	1d3b      	adds	r3, r7, #4
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b26c:	b29b      	uxth	r3, r3
 800b26e:	461a      	mov	r2, r3
 800b270:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b274:	4413      	add	r3, r2
 800b276:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b27a:	463b      	mov	r3, r7
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	781b      	ldrb	r3, [r3, #0]
 800b280:	00da      	lsls	r2, r3, #3
 800b282:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b286:	4413      	add	r3, r2
 800b288:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b28c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b290:	463b      	mov	r3, r7
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	691b      	ldr	r3, [r3, #16]
 800b296:	2b00      	cmp	r3, #0
 800b298:	d116      	bne.n	800b2c8 <USB_EPStartXfer+0xbda>
 800b29a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b29e:	881b      	ldrh	r3, [r3, #0]
 800b2a0:	b29b      	uxth	r3, r3
 800b2a2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b2a6:	b29a      	uxth	r2, r3
 800b2a8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b2ac:	801a      	strh	r2, [r3, #0]
 800b2ae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b2b2:	881b      	ldrh	r3, [r3, #0]
 800b2b4:	b29b      	uxth	r3, r3
 800b2b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b2ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b2be:	b29a      	uxth	r2, r3
 800b2c0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b2c4:	801a      	strh	r2, [r3, #0]
 800b2c6:	e065      	b.n	800b394 <USB_EPStartXfer+0xca6>
 800b2c8:	463b      	mov	r3, r7
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	691b      	ldr	r3, [r3, #16]
 800b2ce:	2b3e      	cmp	r3, #62	; 0x3e
 800b2d0:	d81a      	bhi.n	800b308 <USB_EPStartXfer+0xc1a>
 800b2d2:	463b      	mov	r3, r7
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	691b      	ldr	r3, [r3, #16]
 800b2d8:	085b      	lsrs	r3, r3, #1
 800b2da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b2de:	463b      	mov	r3, r7
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	691b      	ldr	r3, [r3, #16]
 800b2e4:	f003 0301 	and.w	r3, r3, #1
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d004      	beq.n	800b2f6 <USB_EPStartXfer+0xc08>
 800b2ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b2f0:	3301      	adds	r3, #1
 800b2f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b2f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b2fa:	b29b      	uxth	r3, r3
 800b2fc:	029b      	lsls	r3, r3, #10
 800b2fe:	b29a      	uxth	r2, r3
 800b300:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b304:	801a      	strh	r2, [r3, #0]
 800b306:	e045      	b.n	800b394 <USB_EPStartXfer+0xca6>
 800b308:	463b      	mov	r3, r7
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	691b      	ldr	r3, [r3, #16]
 800b30e:	095b      	lsrs	r3, r3, #5
 800b310:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b314:	463b      	mov	r3, r7
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	691b      	ldr	r3, [r3, #16]
 800b31a:	f003 031f 	and.w	r3, r3, #31
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d104      	bne.n	800b32c <USB_EPStartXfer+0xc3e>
 800b322:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b326:	3b01      	subs	r3, #1
 800b328:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b32c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b330:	b29b      	uxth	r3, r3
 800b332:	029b      	lsls	r3, r3, #10
 800b334:	b29b      	uxth	r3, r3
 800b336:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b33a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b33e:	b29a      	uxth	r2, r3
 800b340:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b344:	801a      	strh	r2, [r3, #0]
 800b346:	e025      	b.n	800b394 <USB_EPStartXfer+0xca6>
 800b348:	463b      	mov	r3, r7
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	785b      	ldrb	r3, [r3, #1]
 800b34e:	2b01      	cmp	r3, #1
 800b350:	d120      	bne.n	800b394 <USB_EPStartXfer+0xca6>
 800b352:	1d3b      	adds	r3, r7, #4
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b35a:	1d3b      	adds	r3, r7, #4
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b362:	b29b      	uxth	r3, r3
 800b364:	461a      	mov	r2, r3
 800b366:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b36a:	4413      	add	r3, r2
 800b36c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b370:	463b      	mov	r3, r7
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	781b      	ldrb	r3, [r3, #0]
 800b376:	00da      	lsls	r2, r3, #3
 800b378:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b37c:	4413      	add	r3, r2
 800b37e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b382:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b386:	463b      	mov	r3, r7
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	691b      	ldr	r3, [r3, #16]
 800b38c:	b29a      	uxth	r2, r3
 800b38e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b392:	801a      	strh	r2, [r3, #0]
 800b394:	1d3b      	adds	r3, r7, #4
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800b39c:	463b      	mov	r3, r7
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	785b      	ldrb	r3, [r3, #1]
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d175      	bne.n	800b492 <USB_EPStartXfer+0xda4>
 800b3a6:	1d3b      	adds	r3, r7, #4
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b3ae:	1d3b      	adds	r3, r7, #4
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b3b6:	b29b      	uxth	r3, r3
 800b3b8:	461a      	mov	r2, r3
 800b3ba:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b3be:	4413      	add	r3, r2
 800b3c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b3c4:	463b      	mov	r3, r7
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	781b      	ldrb	r3, [r3, #0]
 800b3ca:	00da      	lsls	r2, r3, #3
 800b3cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b3d0:	4413      	add	r3, r2
 800b3d2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b3d6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b3da:	463b      	mov	r3, r7
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	691b      	ldr	r3, [r3, #16]
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d116      	bne.n	800b412 <USB_EPStartXfer+0xd24>
 800b3e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b3e8:	881b      	ldrh	r3, [r3, #0]
 800b3ea:	b29b      	uxth	r3, r3
 800b3ec:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b3f0:	b29a      	uxth	r2, r3
 800b3f2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b3f6:	801a      	strh	r2, [r3, #0]
 800b3f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b3fc:	881b      	ldrh	r3, [r3, #0]
 800b3fe:	b29b      	uxth	r3, r3
 800b400:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b404:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b408:	b29a      	uxth	r2, r3
 800b40a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b40e:	801a      	strh	r2, [r3, #0]
 800b410:	e061      	b.n	800b4d6 <USB_EPStartXfer+0xde8>
 800b412:	463b      	mov	r3, r7
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	691b      	ldr	r3, [r3, #16]
 800b418:	2b3e      	cmp	r3, #62	; 0x3e
 800b41a:	d81a      	bhi.n	800b452 <USB_EPStartXfer+0xd64>
 800b41c:	463b      	mov	r3, r7
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	691b      	ldr	r3, [r3, #16]
 800b422:	085b      	lsrs	r3, r3, #1
 800b424:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b428:	463b      	mov	r3, r7
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	691b      	ldr	r3, [r3, #16]
 800b42e:	f003 0301 	and.w	r3, r3, #1
 800b432:	2b00      	cmp	r3, #0
 800b434:	d004      	beq.n	800b440 <USB_EPStartXfer+0xd52>
 800b436:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b43a:	3301      	adds	r3, #1
 800b43c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b440:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b444:	b29b      	uxth	r3, r3
 800b446:	029b      	lsls	r3, r3, #10
 800b448:	b29a      	uxth	r2, r3
 800b44a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b44e:	801a      	strh	r2, [r3, #0]
 800b450:	e041      	b.n	800b4d6 <USB_EPStartXfer+0xde8>
 800b452:	463b      	mov	r3, r7
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	691b      	ldr	r3, [r3, #16]
 800b458:	095b      	lsrs	r3, r3, #5
 800b45a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b45e:	463b      	mov	r3, r7
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	691b      	ldr	r3, [r3, #16]
 800b464:	f003 031f 	and.w	r3, r3, #31
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d104      	bne.n	800b476 <USB_EPStartXfer+0xd88>
 800b46c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b470:	3b01      	subs	r3, #1
 800b472:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b476:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b47a:	b29b      	uxth	r3, r3
 800b47c:	029b      	lsls	r3, r3, #10
 800b47e:	b29b      	uxth	r3, r3
 800b480:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b484:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b488:	b29a      	uxth	r2, r3
 800b48a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b48e:	801a      	strh	r2, [r3, #0]
 800b490:	e021      	b.n	800b4d6 <USB_EPStartXfer+0xde8>
 800b492:	463b      	mov	r3, r7
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	785b      	ldrb	r3, [r3, #1]
 800b498:	2b01      	cmp	r3, #1
 800b49a:	d11c      	bne.n	800b4d6 <USB_EPStartXfer+0xde8>
 800b49c:	1d3b      	adds	r3, r7, #4
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b4a4:	b29b      	uxth	r3, r3
 800b4a6:	461a      	mov	r2, r3
 800b4a8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b4ac:	4413      	add	r3, r2
 800b4ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800b4b2:	463b      	mov	r3, r7
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	781b      	ldrb	r3, [r3, #0]
 800b4b8:	00da      	lsls	r2, r3, #3
 800b4ba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b4be:	4413      	add	r3, r2
 800b4c0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b4c4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b4c8:	463b      	mov	r3, r7
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	691b      	ldr	r3, [r3, #16]
 800b4ce:	b29a      	uxth	r2, r3
 800b4d0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b4d4:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800b4d6:	463b      	mov	r3, r7
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	69db      	ldr	r3, [r3, #28]
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	f000 81a4 	beq.w	800b82a <USB_EPStartXfer+0x113c>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800b4e2:	1d3b      	adds	r3, r7, #4
 800b4e4:	681a      	ldr	r2, [r3, #0]
 800b4e6:	463b      	mov	r3, r7
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	781b      	ldrb	r3, [r3, #0]
 800b4ec:	009b      	lsls	r3, r3, #2
 800b4ee:	4413      	add	r3, r2
 800b4f0:	881b      	ldrh	r3, [r3, #0]
 800b4f2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800b4f6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800b4fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d005      	beq.n	800b50e <USB_EPStartXfer+0xe20>
 800b502:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800b506:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d10d      	bne.n	800b52a <USB_EPStartXfer+0xe3c>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800b50e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800b512:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800b516:	2b00      	cmp	r3, #0
 800b518:	f040 8187 	bne.w	800b82a <USB_EPStartXfer+0x113c>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800b51c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800b520:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b524:	2b00      	cmp	r3, #0
 800b526:	f040 8180 	bne.w	800b82a <USB_EPStartXfer+0x113c>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800b52a:	1d3b      	adds	r3, r7, #4
 800b52c:	681a      	ldr	r2, [r3, #0]
 800b52e:	463b      	mov	r3, r7
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	781b      	ldrb	r3, [r3, #0]
 800b534:	009b      	lsls	r3, r3, #2
 800b536:	4413      	add	r3, r2
 800b538:	881b      	ldrh	r3, [r3, #0]
 800b53a:	b29b      	uxth	r3, r3
 800b53c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b540:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b544:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800b548:	1d3b      	adds	r3, r7, #4
 800b54a:	681a      	ldr	r2, [r3, #0]
 800b54c:	463b      	mov	r3, r7
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	781b      	ldrb	r3, [r3, #0]
 800b552:	009b      	lsls	r3, r3, #2
 800b554:	441a      	add	r2, r3
 800b556:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800b55a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b55e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b562:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b566:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b56a:	b29b      	uxth	r3, r3
 800b56c:	8013      	strh	r3, [r2, #0]
 800b56e:	e15c      	b.n	800b82a <USB_EPStartXfer+0x113c>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800b570:	463b      	mov	r3, r7
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	78db      	ldrb	r3, [r3, #3]
 800b576:	2b01      	cmp	r3, #1
 800b578:	f040 8155 	bne.w	800b826 <USB_EPStartXfer+0x1138>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800b57c:	463b      	mov	r3, r7
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	699a      	ldr	r2, [r3, #24]
 800b582:	463b      	mov	r3, r7
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	691b      	ldr	r3, [r3, #16]
 800b588:	429a      	cmp	r2, r3
 800b58a:	d90e      	bls.n	800b5aa <USB_EPStartXfer+0xebc>
        {
          len = ep->maxpacket;
 800b58c:	463b      	mov	r3, r7
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	691b      	ldr	r3, [r3, #16]
 800b592:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800b596:	463b      	mov	r3, r7
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	699a      	ldr	r2, [r3, #24]
 800b59c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5a0:	1ad2      	subs	r2, r2, r3
 800b5a2:	463b      	mov	r3, r7
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	619a      	str	r2, [r3, #24]
 800b5a8:	e008      	b.n	800b5bc <USB_EPStartXfer+0xece>
        }
        else
        {
          len = ep->xfer_len;
 800b5aa:	463b      	mov	r3, r7
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	699b      	ldr	r3, [r3, #24]
 800b5b0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800b5b4:	463b      	mov	r3, r7
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	2200      	movs	r2, #0
 800b5ba:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800b5bc:	463b      	mov	r3, r7
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	785b      	ldrb	r3, [r3, #1]
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d16f      	bne.n	800b6a6 <USB_EPStartXfer+0xfb8>
 800b5c6:	1d3b      	adds	r3, r7, #4
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b5ce:	1d3b      	adds	r3, r7, #4
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b5d6:	b29b      	uxth	r3, r3
 800b5d8:	461a      	mov	r2, r3
 800b5da:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b5de:	4413      	add	r3, r2
 800b5e0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b5e4:	463b      	mov	r3, r7
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	781b      	ldrb	r3, [r3, #0]
 800b5ea:	00da      	lsls	r2, r3, #3
 800b5ec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b5f0:	4413      	add	r3, r2
 800b5f2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b5f6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b5fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d116      	bne.n	800b630 <USB_EPStartXfer+0xf42>
 800b602:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b606:	881b      	ldrh	r3, [r3, #0]
 800b608:	b29b      	uxth	r3, r3
 800b60a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b60e:	b29a      	uxth	r2, r3
 800b610:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b614:	801a      	strh	r2, [r3, #0]
 800b616:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b61a:	881b      	ldrh	r3, [r3, #0]
 800b61c:	b29b      	uxth	r3, r3
 800b61e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b622:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b626:	b29a      	uxth	r2, r3
 800b628:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b62c:	801a      	strh	r2, [r3, #0]
 800b62e:	e05f      	b.n	800b6f0 <USB_EPStartXfer+0x1002>
 800b630:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b634:	2b3e      	cmp	r3, #62	; 0x3e
 800b636:	d818      	bhi.n	800b66a <USB_EPStartXfer+0xf7c>
 800b638:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b63c:	085b      	lsrs	r3, r3, #1
 800b63e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b642:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b646:	f003 0301 	and.w	r3, r3, #1
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d004      	beq.n	800b658 <USB_EPStartXfer+0xf6a>
 800b64e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b652:	3301      	adds	r3, #1
 800b654:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b658:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b65c:	b29b      	uxth	r3, r3
 800b65e:	029b      	lsls	r3, r3, #10
 800b660:	b29a      	uxth	r2, r3
 800b662:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b666:	801a      	strh	r2, [r3, #0]
 800b668:	e042      	b.n	800b6f0 <USB_EPStartXfer+0x1002>
 800b66a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b66e:	095b      	lsrs	r3, r3, #5
 800b670:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b674:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b678:	f003 031f 	and.w	r3, r3, #31
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d104      	bne.n	800b68a <USB_EPStartXfer+0xf9c>
 800b680:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b684:	3b01      	subs	r3, #1
 800b686:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b68a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b68e:	b29b      	uxth	r3, r3
 800b690:	029b      	lsls	r3, r3, #10
 800b692:	b29b      	uxth	r3, r3
 800b694:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b698:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b69c:	b29a      	uxth	r2, r3
 800b69e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b6a2:	801a      	strh	r2, [r3, #0]
 800b6a4:	e024      	b.n	800b6f0 <USB_EPStartXfer+0x1002>
 800b6a6:	463b      	mov	r3, r7
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	785b      	ldrb	r3, [r3, #1]
 800b6ac:	2b01      	cmp	r3, #1
 800b6ae:	d11f      	bne.n	800b6f0 <USB_EPStartXfer+0x1002>
 800b6b0:	1d3b      	adds	r3, r7, #4
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b6b8:	1d3b      	adds	r3, r7, #4
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b6c0:	b29b      	uxth	r3, r3
 800b6c2:	461a      	mov	r2, r3
 800b6c4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b6c8:	4413      	add	r3, r2
 800b6ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b6ce:	463b      	mov	r3, r7
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	781b      	ldrb	r3, [r3, #0]
 800b6d4:	00da      	lsls	r2, r3, #3
 800b6d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b6da:	4413      	add	r3, r2
 800b6dc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b6e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b6e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6e8:	b29a      	uxth	r2, r3
 800b6ea:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800b6ee:	801a      	strh	r2, [r3, #0]
 800b6f0:	1d3b      	adds	r3, r7, #4
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b6f8:	463b      	mov	r3, r7
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	785b      	ldrb	r3, [r3, #1]
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d16f      	bne.n	800b7e2 <USB_EPStartXfer+0x10f4>
 800b702:	1d3b      	adds	r3, r7, #4
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b70a:	1d3b      	adds	r3, r7, #4
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b712:	b29b      	uxth	r3, r3
 800b714:	461a      	mov	r2, r3
 800b716:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b71a:	4413      	add	r3, r2
 800b71c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b720:	463b      	mov	r3, r7
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	781b      	ldrb	r3, [r3, #0]
 800b726:	00da      	lsls	r2, r3, #3
 800b728:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b72c:	4413      	add	r3, r2
 800b72e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b732:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b736:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d116      	bne.n	800b76c <USB_EPStartXfer+0x107e>
 800b73e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b742:	881b      	ldrh	r3, [r3, #0]
 800b744:	b29b      	uxth	r3, r3
 800b746:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b74a:	b29a      	uxth	r2, r3
 800b74c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b750:	801a      	strh	r2, [r3, #0]
 800b752:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b756:	881b      	ldrh	r3, [r3, #0]
 800b758:	b29b      	uxth	r3, r3
 800b75a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b75e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b762:	b29a      	uxth	r2, r3
 800b764:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b768:	801a      	strh	r2, [r3, #0]
 800b76a:	e05e      	b.n	800b82a <USB_EPStartXfer+0x113c>
 800b76c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b770:	2b3e      	cmp	r3, #62	; 0x3e
 800b772:	d818      	bhi.n	800b7a6 <USB_EPStartXfer+0x10b8>
 800b774:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b778:	085b      	lsrs	r3, r3, #1
 800b77a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b77e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b782:	f003 0301 	and.w	r3, r3, #1
 800b786:	2b00      	cmp	r3, #0
 800b788:	d004      	beq.n	800b794 <USB_EPStartXfer+0x10a6>
 800b78a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b78e:	3301      	adds	r3, #1
 800b790:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b794:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b798:	b29b      	uxth	r3, r3
 800b79a:	029b      	lsls	r3, r3, #10
 800b79c:	b29a      	uxth	r2, r3
 800b79e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b7a2:	801a      	strh	r2, [r3, #0]
 800b7a4:	e041      	b.n	800b82a <USB_EPStartXfer+0x113c>
 800b7a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7aa:	095b      	lsrs	r3, r3, #5
 800b7ac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b7b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7b4:	f003 031f 	and.w	r3, r3, #31
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d104      	bne.n	800b7c6 <USB_EPStartXfer+0x10d8>
 800b7bc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b7c0:	3b01      	subs	r3, #1
 800b7c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b7c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b7ca:	b29b      	uxth	r3, r3
 800b7cc:	029b      	lsls	r3, r3, #10
 800b7ce:	b29b      	uxth	r3, r3
 800b7d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b7d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b7d8:	b29a      	uxth	r2, r3
 800b7da:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b7de:	801a      	strh	r2, [r3, #0]
 800b7e0:	e023      	b.n	800b82a <USB_EPStartXfer+0x113c>
 800b7e2:	463b      	mov	r3, r7
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	785b      	ldrb	r3, [r3, #1]
 800b7e8:	2b01      	cmp	r3, #1
 800b7ea:	d11e      	bne.n	800b82a <USB_EPStartXfer+0x113c>
 800b7ec:	1d3b      	adds	r3, r7, #4
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b7f4:	b29b      	uxth	r3, r3
 800b7f6:	461a      	mov	r2, r3
 800b7f8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b7fc:	4413      	add	r3, r2
 800b7fe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b802:	463b      	mov	r3, r7
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	781b      	ldrb	r3, [r3, #0]
 800b808:	00da      	lsls	r2, r3, #3
 800b80a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b80e:	4413      	add	r3, r2
 800b810:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b814:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b818:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b81c:	b29a      	uxth	r2, r3
 800b81e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b822:	801a      	strh	r2, [r3, #0]
 800b824:	e001      	b.n	800b82a <USB_EPStartXfer+0x113c>
      }
      else
      {
        return HAL_ERROR;
 800b826:	2301      	movs	r3, #1
 800b828:	e02e      	b.n	800b888 <USB_EPStartXfer+0x119a>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b82a:	1d3b      	adds	r3, r7, #4
 800b82c:	681a      	ldr	r2, [r3, #0]
 800b82e:	463b      	mov	r3, r7
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	781b      	ldrb	r3, [r3, #0]
 800b834:	009b      	lsls	r3, r3, #2
 800b836:	4413      	add	r3, r2
 800b838:	881b      	ldrh	r3, [r3, #0]
 800b83a:	b29b      	uxth	r3, r3
 800b83c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b840:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b844:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800b848:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800b84c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800b850:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800b854:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800b858:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800b85c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800b860:	1d3b      	adds	r3, r7, #4
 800b862:	681a      	ldr	r2, [r3, #0]
 800b864:	463b      	mov	r3, r7
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	781b      	ldrb	r3, [r3, #0]
 800b86a:	009b      	lsls	r3, r3, #2
 800b86c:	441a      	add	r2, r3
 800b86e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800b872:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b876:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b87a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b87e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b882:	b29b      	uxth	r3, r3
 800b884:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800b886:	2300      	movs	r3, #0
}
 800b888:	4618      	mov	r0, r3
 800b88a:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800b88e:	46bd      	mov	sp, r7
 800b890:	bd80      	pop	{r7, pc}

0800b892 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b892:	b480      	push	{r7}
 800b894:	b085      	sub	sp, #20
 800b896:	af00      	add	r7, sp, #0
 800b898:	6078      	str	r0, [r7, #4]
 800b89a:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800b89c:	683b      	ldr	r3, [r7, #0]
 800b89e:	785b      	ldrb	r3, [r3, #1]
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d020      	beq.n	800b8e6 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800b8a4:	687a      	ldr	r2, [r7, #4]
 800b8a6:	683b      	ldr	r3, [r7, #0]
 800b8a8:	781b      	ldrb	r3, [r3, #0]
 800b8aa:	009b      	lsls	r3, r3, #2
 800b8ac:	4413      	add	r3, r2
 800b8ae:	881b      	ldrh	r3, [r3, #0]
 800b8b0:	b29b      	uxth	r3, r3
 800b8b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b8b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b8ba:	81bb      	strh	r3, [r7, #12]
 800b8bc:	89bb      	ldrh	r3, [r7, #12]
 800b8be:	f083 0310 	eor.w	r3, r3, #16
 800b8c2:	81bb      	strh	r3, [r7, #12]
 800b8c4:	687a      	ldr	r2, [r7, #4]
 800b8c6:	683b      	ldr	r3, [r7, #0]
 800b8c8:	781b      	ldrb	r3, [r3, #0]
 800b8ca:	009b      	lsls	r3, r3, #2
 800b8cc:	441a      	add	r2, r3
 800b8ce:	89bb      	ldrh	r3, [r7, #12]
 800b8d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b8d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b8d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b8dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b8e0:	b29b      	uxth	r3, r3
 800b8e2:	8013      	strh	r3, [r2, #0]
 800b8e4:	e01f      	b.n	800b926 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800b8e6:	687a      	ldr	r2, [r7, #4]
 800b8e8:	683b      	ldr	r3, [r7, #0]
 800b8ea:	781b      	ldrb	r3, [r3, #0]
 800b8ec:	009b      	lsls	r3, r3, #2
 800b8ee:	4413      	add	r3, r2
 800b8f0:	881b      	ldrh	r3, [r3, #0]
 800b8f2:	b29b      	uxth	r3, r3
 800b8f4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b8f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b8fc:	81fb      	strh	r3, [r7, #14]
 800b8fe:	89fb      	ldrh	r3, [r7, #14]
 800b900:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800b904:	81fb      	strh	r3, [r7, #14]
 800b906:	687a      	ldr	r2, [r7, #4]
 800b908:	683b      	ldr	r3, [r7, #0]
 800b90a:	781b      	ldrb	r3, [r3, #0]
 800b90c:	009b      	lsls	r3, r3, #2
 800b90e:	441a      	add	r2, r3
 800b910:	89fb      	ldrh	r3, [r7, #14]
 800b912:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b916:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b91a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b91e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b922:	b29b      	uxth	r3, r3
 800b924:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800b926:	2300      	movs	r3, #0
}
 800b928:	4618      	mov	r0, r3
 800b92a:	3714      	adds	r7, #20
 800b92c:	46bd      	mov	sp, r7
 800b92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b932:	4770      	bx	lr

0800b934 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b934:	b480      	push	{r7}
 800b936:	b087      	sub	sp, #28
 800b938:	af00      	add	r7, sp, #0
 800b93a:	6078      	str	r0, [r7, #4]
 800b93c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800b93e:	683b      	ldr	r3, [r7, #0]
 800b940:	7b1b      	ldrb	r3, [r3, #12]
 800b942:	2b00      	cmp	r3, #0
 800b944:	f040 809d 	bne.w	800ba82 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800b948:	683b      	ldr	r3, [r7, #0]
 800b94a:	785b      	ldrb	r3, [r3, #1]
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d04c      	beq.n	800b9ea <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b950:	687a      	ldr	r2, [r7, #4]
 800b952:	683b      	ldr	r3, [r7, #0]
 800b954:	781b      	ldrb	r3, [r3, #0]
 800b956:	009b      	lsls	r3, r3, #2
 800b958:	4413      	add	r3, r2
 800b95a:	881b      	ldrh	r3, [r3, #0]
 800b95c:	823b      	strh	r3, [r7, #16]
 800b95e:	8a3b      	ldrh	r3, [r7, #16]
 800b960:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b964:	2b00      	cmp	r3, #0
 800b966:	d01b      	beq.n	800b9a0 <USB_EPClearStall+0x6c>
 800b968:	687a      	ldr	r2, [r7, #4]
 800b96a:	683b      	ldr	r3, [r7, #0]
 800b96c:	781b      	ldrb	r3, [r3, #0]
 800b96e:	009b      	lsls	r3, r3, #2
 800b970:	4413      	add	r3, r2
 800b972:	881b      	ldrh	r3, [r3, #0]
 800b974:	b29b      	uxth	r3, r3
 800b976:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b97a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b97e:	81fb      	strh	r3, [r7, #14]
 800b980:	687a      	ldr	r2, [r7, #4]
 800b982:	683b      	ldr	r3, [r7, #0]
 800b984:	781b      	ldrb	r3, [r3, #0]
 800b986:	009b      	lsls	r3, r3, #2
 800b988:	441a      	add	r2, r3
 800b98a:	89fb      	ldrh	r3, [r7, #14]
 800b98c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b990:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b994:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b998:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b99c:	b29b      	uxth	r3, r3
 800b99e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b9a0:	683b      	ldr	r3, [r7, #0]
 800b9a2:	78db      	ldrb	r3, [r3, #3]
 800b9a4:	2b01      	cmp	r3, #1
 800b9a6:	d06c      	beq.n	800ba82 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800b9a8:	687a      	ldr	r2, [r7, #4]
 800b9aa:	683b      	ldr	r3, [r7, #0]
 800b9ac:	781b      	ldrb	r3, [r3, #0]
 800b9ae:	009b      	lsls	r3, r3, #2
 800b9b0:	4413      	add	r3, r2
 800b9b2:	881b      	ldrh	r3, [r3, #0]
 800b9b4:	b29b      	uxth	r3, r3
 800b9b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b9ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b9be:	81bb      	strh	r3, [r7, #12]
 800b9c0:	89bb      	ldrh	r3, [r7, #12]
 800b9c2:	f083 0320 	eor.w	r3, r3, #32
 800b9c6:	81bb      	strh	r3, [r7, #12]
 800b9c8:	687a      	ldr	r2, [r7, #4]
 800b9ca:	683b      	ldr	r3, [r7, #0]
 800b9cc:	781b      	ldrb	r3, [r3, #0]
 800b9ce:	009b      	lsls	r3, r3, #2
 800b9d0:	441a      	add	r2, r3
 800b9d2:	89bb      	ldrh	r3, [r7, #12]
 800b9d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b9d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b9dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b9e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b9e4:	b29b      	uxth	r3, r3
 800b9e6:	8013      	strh	r3, [r2, #0]
 800b9e8:	e04b      	b.n	800ba82 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b9ea:	687a      	ldr	r2, [r7, #4]
 800b9ec:	683b      	ldr	r3, [r7, #0]
 800b9ee:	781b      	ldrb	r3, [r3, #0]
 800b9f0:	009b      	lsls	r3, r3, #2
 800b9f2:	4413      	add	r3, r2
 800b9f4:	881b      	ldrh	r3, [r3, #0]
 800b9f6:	82fb      	strh	r3, [r7, #22]
 800b9f8:	8afb      	ldrh	r3, [r7, #22]
 800b9fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d01b      	beq.n	800ba3a <USB_EPClearStall+0x106>
 800ba02:	687a      	ldr	r2, [r7, #4]
 800ba04:	683b      	ldr	r3, [r7, #0]
 800ba06:	781b      	ldrb	r3, [r3, #0]
 800ba08:	009b      	lsls	r3, r3, #2
 800ba0a:	4413      	add	r3, r2
 800ba0c:	881b      	ldrh	r3, [r3, #0]
 800ba0e:	b29b      	uxth	r3, r3
 800ba10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ba14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ba18:	82bb      	strh	r3, [r7, #20]
 800ba1a:	687a      	ldr	r2, [r7, #4]
 800ba1c:	683b      	ldr	r3, [r7, #0]
 800ba1e:	781b      	ldrb	r3, [r3, #0]
 800ba20:	009b      	lsls	r3, r3, #2
 800ba22:	441a      	add	r2, r3
 800ba24:	8abb      	ldrh	r3, [r7, #20]
 800ba26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ba2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ba2e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ba32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ba36:	b29b      	uxth	r3, r3
 800ba38:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800ba3a:	687a      	ldr	r2, [r7, #4]
 800ba3c:	683b      	ldr	r3, [r7, #0]
 800ba3e:	781b      	ldrb	r3, [r3, #0]
 800ba40:	009b      	lsls	r3, r3, #2
 800ba42:	4413      	add	r3, r2
 800ba44:	881b      	ldrh	r3, [r3, #0]
 800ba46:	b29b      	uxth	r3, r3
 800ba48:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ba4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ba50:	827b      	strh	r3, [r7, #18]
 800ba52:	8a7b      	ldrh	r3, [r7, #18]
 800ba54:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800ba58:	827b      	strh	r3, [r7, #18]
 800ba5a:	8a7b      	ldrh	r3, [r7, #18]
 800ba5c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800ba60:	827b      	strh	r3, [r7, #18]
 800ba62:	687a      	ldr	r2, [r7, #4]
 800ba64:	683b      	ldr	r3, [r7, #0]
 800ba66:	781b      	ldrb	r3, [r3, #0]
 800ba68:	009b      	lsls	r3, r3, #2
 800ba6a:	441a      	add	r2, r3
 800ba6c:	8a7b      	ldrh	r3, [r7, #18]
 800ba6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ba72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ba76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ba7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ba7e:	b29b      	uxth	r3, r3
 800ba80:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800ba82:	2300      	movs	r3, #0
}
 800ba84:	4618      	mov	r0, r3
 800ba86:	371c      	adds	r7, #28
 800ba88:	46bd      	mov	sp, r7
 800ba8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba8e:	4770      	bx	lr

0800ba90 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800ba90:	b480      	push	{r7}
 800ba92:	b083      	sub	sp, #12
 800ba94:	af00      	add	r7, sp, #0
 800ba96:	6078      	str	r0, [r7, #4]
 800ba98:	460b      	mov	r3, r1
 800ba9a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800ba9c:	78fb      	ldrb	r3, [r7, #3]
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d103      	bne.n	800baaa <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	2280      	movs	r2, #128	; 0x80
 800baa6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800baaa:	2300      	movs	r3, #0
}
 800baac:	4618      	mov	r0, r3
 800baae:	370c      	adds	r7, #12
 800bab0:	46bd      	mov	sp, r7
 800bab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab6:	4770      	bx	lr

0800bab8 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800bab8:	b480      	push	{r7}
 800baba:	b083      	sub	sp, #12
 800babc:	af00      	add	r7, sp, #0
 800babe:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800bac0:	2300      	movs	r3, #0
}
 800bac2:	4618      	mov	r0, r3
 800bac4:	370c      	adds	r7, #12
 800bac6:	46bd      	mov	sp, r7
 800bac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bacc:	4770      	bx	lr

0800bace <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800bace:	b480      	push	{r7}
 800bad0:	b085      	sub	sp, #20
 800bad2:	af00      	add	r7, sp, #0
 800bad4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800badc:	b29b      	uxth	r3, r3
 800bade:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800bae0:	68fb      	ldr	r3, [r7, #12]
}
 800bae2:	4618      	mov	r0, r3
 800bae4:	3714      	adds	r7, #20
 800bae6:	46bd      	mov	sp, r7
 800bae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baec:	4770      	bx	lr

0800baee <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800baee:	b480      	push	{r7}
 800baf0:	b08d      	sub	sp, #52	; 0x34
 800baf2:	af00      	add	r7, sp, #0
 800baf4:	60f8      	str	r0, [r7, #12]
 800baf6:	60b9      	str	r1, [r7, #8]
 800baf8:	4611      	mov	r1, r2
 800bafa:	461a      	mov	r2, r3
 800bafc:	460b      	mov	r3, r1
 800bafe:	80fb      	strh	r3, [r7, #6]
 800bb00:	4613      	mov	r3, r2
 800bb02:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800bb04:	88bb      	ldrh	r3, [r7, #4]
 800bb06:	3301      	adds	r3, #1
 800bb08:	085b      	lsrs	r3, r3, #1
 800bb0a:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800bb10:	68bb      	ldr	r3, [r7, #8]
 800bb12:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800bb14:	88fa      	ldrh	r2, [r7, #6]
 800bb16:	69fb      	ldr	r3, [r7, #28]
 800bb18:	4413      	add	r3, r2
 800bb1a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bb1e:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800bb20:	6a3b      	ldr	r3, [r7, #32]
 800bb22:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bb24:	e01b      	b.n	800bb5e <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 800bb26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb28:	781b      	ldrb	r3, [r3, #0]
 800bb2a:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800bb2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb2e:	3301      	adds	r3, #1
 800bb30:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800bb32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb34:	781b      	ldrb	r3, [r3, #0]
 800bb36:	b29b      	uxth	r3, r3
 800bb38:	021b      	lsls	r3, r3, #8
 800bb3a:	b29b      	uxth	r3, r3
 800bb3c:	461a      	mov	r2, r3
 800bb3e:	69bb      	ldr	r3, [r7, #24]
 800bb40:	4313      	orrs	r3, r2
 800bb42:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800bb44:	697b      	ldr	r3, [r7, #20]
 800bb46:	b29a      	uxth	r2, r3
 800bb48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb4a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800bb4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb4e:	3302      	adds	r3, #2
 800bb50:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 800bb52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb54:	3301      	adds	r3, #1
 800bb56:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800bb58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb5a:	3b01      	subs	r3, #1
 800bb5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bb5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d1e0      	bne.n	800bb26 <USB_WritePMA+0x38>
  }
}
 800bb64:	bf00      	nop
 800bb66:	bf00      	nop
 800bb68:	3734      	adds	r7, #52	; 0x34
 800bb6a:	46bd      	mov	sp, r7
 800bb6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb70:	4770      	bx	lr

0800bb72 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800bb72:	b480      	push	{r7}
 800bb74:	b08b      	sub	sp, #44	; 0x2c
 800bb76:	af00      	add	r7, sp, #0
 800bb78:	60f8      	str	r0, [r7, #12]
 800bb7a:	60b9      	str	r1, [r7, #8]
 800bb7c:	4611      	mov	r1, r2
 800bb7e:	461a      	mov	r2, r3
 800bb80:	460b      	mov	r3, r1
 800bb82:	80fb      	strh	r3, [r7, #6]
 800bb84:	4613      	mov	r3, r2
 800bb86:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800bb88:	88bb      	ldrh	r3, [r7, #4]
 800bb8a:	085b      	lsrs	r3, r3, #1
 800bb8c:	b29b      	uxth	r3, r3
 800bb8e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800bb94:	68bb      	ldr	r3, [r7, #8]
 800bb96:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800bb98:	88fa      	ldrh	r2, [r7, #6]
 800bb9a:	697b      	ldr	r3, [r7, #20]
 800bb9c:	4413      	add	r3, r2
 800bb9e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bba2:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800bba4:	69bb      	ldr	r3, [r7, #24]
 800bba6:	627b      	str	r3, [r7, #36]	; 0x24
 800bba8:	e018      	b.n	800bbdc <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800bbaa:	6a3b      	ldr	r3, [r7, #32]
 800bbac:	881b      	ldrh	r3, [r3, #0]
 800bbae:	b29b      	uxth	r3, r3
 800bbb0:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800bbb2:	6a3b      	ldr	r3, [r7, #32]
 800bbb4:	3302      	adds	r3, #2
 800bbb6:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800bbb8:	693b      	ldr	r3, [r7, #16]
 800bbba:	b2da      	uxtb	r2, r3
 800bbbc:	69fb      	ldr	r3, [r7, #28]
 800bbbe:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800bbc0:	69fb      	ldr	r3, [r7, #28]
 800bbc2:	3301      	adds	r3, #1
 800bbc4:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800bbc6:	693b      	ldr	r3, [r7, #16]
 800bbc8:	0a1b      	lsrs	r3, r3, #8
 800bbca:	b2da      	uxtb	r2, r3
 800bbcc:	69fb      	ldr	r3, [r7, #28]
 800bbce:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800bbd0:	69fb      	ldr	r3, [r7, #28]
 800bbd2:	3301      	adds	r3, #1
 800bbd4:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 800bbd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbd8:	3b01      	subs	r3, #1
 800bbda:	627b      	str	r3, [r7, #36]	; 0x24
 800bbdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d1e3      	bne.n	800bbaa <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800bbe2:	88bb      	ldrh	r3, [r7, #4]
 800bbe4:	f003 0301 	and.w	r3, r3, #1
 800bbe8:	b29b      	uxth	r3, r3
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d007      	beq.n	800bbfe <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 800bbee:	6a3b      	ldr	r3, [r7, #32]
 800bbf0:	881b      	ldrh	r3, [r3, #0]
 800bbf2:	b29b      	uxth	r3, r3
 800bbf4:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800bbf6:	693b      	ldr	r3, [r7, #16]
 800bbf8:	b2da      	uxtb	r2, r3
 800bbfa:	69fb      	ldr	r3, [r7, #28]
 800bbfc:	701a      	strb	r2, [r3, #0]
  }
}
 800bbfe:	bf00      	nop
 800bc00:	372c      	adds	r7, #44	; 0x2c
 800bc02:	46bd      	mov	sp, r7
 800bc04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc08:	4770      	bx	lr

0800bc0a <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bc0a:	b580      	push	{r7, lr}
 800bc0c:	b084      	sub	sp, #16
 800bc0e:	af00      	add	r7, sp, #0
 800bc10:	6078      	str	r0, [r7, #4]
 800bc12:	460b      	mov	r3, r1
 800bc14:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800bc16:	2300      	movs	r3, #0
 800bc18:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	7c1b      	ldrb	r3, [r3, #16]
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d115      	bne.n	800bc4e <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800bc22:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bc26:	2202      	movs	r2, #2
 800bc28:	2181      	movs	r1, #129	; 0x81
 800bc2a:	6878      	ldr	r0, [r7, #4]
 800bc2c:	f001 fe45 	bl	800d8ba <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	2201      	movs	r2, #1
 800bc34:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800bc36:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bc3a:	2202      	movs	r2, #2
 800bc3c:	2101      	movs	r1, #1
 800bc3e:	6878      	ldr	r0, [r7, #4]
 800bc40:	f001 fe3b 	bl	800d8ba <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	2201      	movs	r2, #1
 800bc48:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800bc4c:	e012      	b.n	800bc74 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800bc4e:	2340      	movs	r3, #64	; 0x40
 800bc50:	2202      	movs	r2, #2
 800bc52:	2181      	movs	r1, #129	; 0x81
 800bc54:	6878      	ldr	r0, [r7, #4]
 800bc56:	f001 fe30 	bl	800d8ba <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	2201      	movs	r2, #1
 800bc5e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800bc60:	2340      	movs	r3, #64	; 0x40
 800bc62:	2202      	movs	r2, #2
 800bc64:	2101      	movs	r1, #1
 800bc66:	6878      	ldr	r0, [r7, #4]
 800bc68:	f001 fe27 	bl	800d8ba <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	2201      	movs	r2, #1
 800bc70:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800bc74:	2308      	movs	r3, #8
 800bc76:	2203      	movs	r2, #3
 800bc78:	2182      	movs	r1, #130	; 0x82
 800bc7a:	6878      	ldr	r0, [r7, #4]
 800bc7c:	f001 fe1d 	bl	800d8ba <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	2201      	movs	r2, #1
 800bc84:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800bc86:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800bc8a:	f001 ff3f 	bl	800db0c <USBD_static_malloc>
 800bc8e:	4602      	mov	r2, r0
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d102      	bne.n	800bca6 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800bca0:	2301      	movs	r3, #1
 800bca2:	73fb      	strb	r3, [r7, #15]
 800bca4:	e026      	b.n	800bcf4 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bcac:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800bcb8:	68bb      	ldr	r3, [r7, #8]
 800bcba:	2200      	movs	r2, #0
 800bcbc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800bcc0:	68bb      	ldr	r3, [r7, #8]
 800bcc2:	2200      	movs	r2, #0
 800bcc4:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	7c1b      	ldrb	r3, [r3, #16]
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d109      	bne.n	800bce4 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800bcd0:	68bb      	ldr	r3, [r7, #8]
 800bcd2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bcd6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bcda:	2101      	movs	r1, #1
 800bcdc:	6878      	ldr	r0, [r7, #4]
 800bcde:	f001 fede 	bl	800da9e <USBD_LL_PrepareReceive>
 800bce2:	e007      	b.n	800bcf4 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800bce4:	68bb      	ldr	r3, [r7, #8]
 800bce6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bcea:	2340      	movs	r3, #64	; 0x40
 800bcec:	2101      	movs	r1, #1
 800bcee:	6878      	ldr	r0, [r7, #4]
 800bcf0:	f001 fed5 	bl	800da9e <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800bcf4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcf6:	4618      	mov	r0, r3
 800bcf8:	3710      	adds	r7, #16
 800bcfa:	46bd      	mov	sp, r7
 800bcfc:	bd80      	pop	{r7, pc}

0800bcfe <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bcfe:	b580      	push	{r7, lr}
 800bd00:	b084      	sub	sp, #16
 800bd02:	af00      	add	r7, sp, #0
 800bd04:	6078      	str	r0, [r7, #4]
 800bd06:	460b      	mov	r3, r1
 800bd08:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800bd0a:	2300      	movs	r3, #0
 800bd0c:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800bd0e:	2181      	movs	r1, #129	; 0x81
 800bd10:	6878      	ldr	r0, [r7, #4]
 800bd12:	f001 fdf8 	bl	800d906 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	2200      	movs	r2, #0
 800bd1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800bd1c:	2101      	movs	r1, #1
 800bd1e:	6878      	ldr	r0, [r7, #4]
 800bd20:	f001 fdf1 	bl	800d906 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	2200      	movs	r2, #0
 800bd28:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800bd2c:	2182      	movs	r1, #130	; 0x82
 800bd2e:	6878      	ldr	r0, [r7, #4]
 800bd30:	f001 fde9 	bl	800d906 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	2200      	movs	r2, #0
 800bd38:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d00e      	beq.n	800bd62 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bd4a:	685b      	ldr	r3, [r3, #4]
 800bd4c:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd54:	4618      	mov	r0, r3
 800bd56:	f001 fee7 	bl	800db28 <USBD_static_free>
    pdev->pClassData = NULL;
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	2200      	movs	r2, #0
 800bd5e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800bd62:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd64:	4618      	mov	r0, r3
 800bd66:	3710      	adds	r7, #16
 800bd68:	46bd      	mov	sp, r7
 800bd6a:	bd80      	pop	{r7, pc}

0800bd6c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800bd6c:	b580      	push	{r7, lr}
 800bd6e:	b086      	sub	sp, #24
 800bd70:	af00      	add	r7, sp, #0
 800bd72:	6078      	str	r0, [r7, #4]
 800bd74:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd7c:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800bd7e:	2300      	movs	r3, #0
 800bd80:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800bd82:	2300      	movs	r3, #0
 800bd84:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800bd86:	2300      	movs	r3, #0
 800bd88:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bd8a:	683b      	ldr	r3, [r7, #0]
 800bd8c:	781b      	ldrb	r3, [r3, #0]
 800bd8e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d039      	beq.n	800be0a <USBD_CDC_Setup+0x9e>
 800bd96:	2b20      	cmp	r3, #32
 800bd98:	d17f      	bne.n	800be9a <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800bd9a:	683b      	ldr	r3, [r7, #0]
 800bd9c:	88db      	ldrh	r3, [r3, #6]
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d029      	beq.n	800bdf6 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800bda2:	683b      	ldr	r3, [r7, #0]
 800bda4:	781b      	ldrb	r3, [r3, #0]
 800bda6:	b25b      	sxtb	r3, r3
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	da11      	bge.n	800bdd0 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bdb2:	689b      	ldr	r3, [r3, #8]
 800bdb4:	683a      	ldr	r2, [r7, #0]
 800bdb6:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800bdb8:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800bdba:	683a      	ldr	r2, [r7, #0]
 800bdbc:	88d2      	ldrh	r2, [r2, #6]
 800bdbe:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800bdc0:	6939      	ldr	r1, [r7, #16]
 800bdc2:	683b      	ldr	r3, [r7, #0]
 800bdc4:	88db      	ldrh	r3, [r3, #6]
 800bdc6:	461a      	mov	r2, r3
 800bdc8:	6878      	ldr	r0, [r7, #4]
 800bdca:	f001 f9e4 	bl	800d196 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800bdce:	e06b      	b.n	800bea8 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800bdd0:	683b      	ldr	r3, [r7, #0]
 800bdd2:	785a      	ldrb	r2, [r3, #1]
 800bdd4:	693b      	ldr	r3, [r7, #16]
 800bdd6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800bdda:	683b      	ldr	r3, [r7, #0]
 800bddc:	88db      	ldrh	r3, [r3, #6]
 800bdde:	b2da      	uxtb	r2, r3
 800bde0:	693b      	ldr	r3, [r7, #16]
 800bde2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800bde6:	6939      	ldr	r1, [r7, #16]
 800bde8:	683b      	ldr	r3, [r7, #0]
 800bdea:	88db      	ldrh	r3, [r3, #6]
 800bdec:	461a      	mov	r2, r3
 800bdee:	6878      	ldr	r0, [r7, #4]
 800bdf0:	f001 f9ff 	bl	800d1f2 <USBD_CtlPrepareRx>
      break;
 800bdf4:	e058      	b.n	800bea8 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bdfc:	689b      	ldr	r3, [r3, #8]
 800bdfe:	683a      	ldr	r2, [r7, #0]
 800be00:	7850      	ldrb	r0, [r2, #1]
 800be02:	2200      	movs	r2, #0
 800be04:	6839      	ldr	r1, [r7, #0]
 800be06:	4798      	blx	r3
      break;
 800be08:	e04e      	b.n	800bea8 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800be0a:	683b      	ldr	r3, [r7, #0]
 800be0c:	785b      	ldrb	r3, [r3, #1]
 800be0e:	2b0b      	cmp	r3, #11
 800be10:	d02e      	beq.n	800be70 <USBD_CDC_Setup+0x104>
 800be12:	2b0b      	cmp	r3, #11
 800be14:	dc38      	bgt.n	800be88 <USBD_CDC_Setup+0x11c>
 800be16:	2b00      	cmp	r3, #0
 800be18:	d002      	beq.n	800be20 <USBD_CDC_Setup+0xb4>
 800be1a:	2b0a      	cmp	r3, #10
 800be1c:	d014      	beq.n	800be48 <USBD_CDC_Setup+0xdc>
 800be1e:	e033      	b.n	800be88 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800be26:	2b03      	cmp	r3, #3
 800be28:	d107      	bne.n	800be3a <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800be2a:	f107 030c 	add.w	r3, r7, #12
 800be2e:	2202      	movs	r2, #2
 800be30:	4619      	mov	r1, r3
 800be32:	6878      	ldr	r0, [r7, #4]
 800be34:	f001 f9af 	bl	800d196 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800be38:	e02e      	b.n	800be98 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800be3a:	6839      	ldr	r1, [r7, #0]
 800be3c:	6878      	ldr	r0, [r7, #4]
 800be3e:	f001 f93f 	bl	800d0c0 <USBD_CtlError>
            ret = USBD_FAIL;
 800be42:	2302      	movs	r3, #2
 800be44:	75fb      	strb	r3, [r7, #23]
          break;
 800be46:	e027      	b.n	800be98 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800be4e:	2b03      	cmp	r3, #3
 800be50:	d107      	bne.n	800be62 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800be52:	f107 030f 	add.w	r3, r7, #15
 800be56:	2201      	movs	r2, #1
 800be58:	4619      	mov	r1, r3
 800be5a:	6878      	ldr	r0, [r7, #4]
 800be5c:	f001 f99b 	bl	800d196 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800be60:	e01a      	b.n	800be98 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800be62:	6839      	ldr	r1, [r7, #0]
 800be64:	6878      	ldr	r0, [r7, #4]
 800be66:	f001 f92b 	bl	800d0c0 <USBD_CtlError>
            ret = USBD_FAIL;
 800be6a:	2302      	movs	r3, #2
 800be6c:	75fb      	strb	r3, [r7, #23]
          break;
 800be6e:	e013      	b.n	800be98 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800be76:	2b03      	cmp	r3, #3
 800be78:	d00d      	beq.n	800be96 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800be7a:	6839      	ldr	r1, [r7, #0]
 800be7c:	6878      	ldr	r0, [r7, #4]
 800be7e:	f001 f91f 	bl	800d0c0 <USBD_CtlError>
            ret = USBD_FAIL;
 800be82:	2302      	movs	r3, #2
 800be84:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800be86:	e006      	b.n	800be96 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800be88:	6839      	ldr	r1, [r7, #0]
 800be8a:	6878      	ldr	r0, [r7, #4]
 800be8c:	f001 f918 	bl	800d0c0 <USBD_CtlError>
          ret = USBD_FAIL;
 800be90:	2302      	movs	r3, #2
 800be92:	75fb      	strb	r3, [r7, #23]
          break;
 800be94:	e000      	b.n	800be98 <USBD_CDC_Setup+0x12c>
          break;
 800be96:	bf00      	nop
      }
      break;
 800be98:	e006      	b.n	800bea8 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800be9a:	6839      	ldr	r1, [r7, #0]
 800be9c:	6878      	ldr	r0, [r7, #4]
 800be9e:	f001 f90f 	bl	800d0c0 <USBD_CtlError>
      ret = USBD_FAIL;
 800bea2:	2302      	movs	r3, #2
 800bea4:	75fb      	strb	r3, [r7, #23]
      break;
 800bea6:	bf00      	nop
  }

  return ret;
 800bea8:	7dfb      	ldrb	r3, [r7, #23]
}
 800beaa:	4618      	mov	r0, r3
 800beac:	3718      	adds	r7, #24
 800beae:	46bd      	mov	sp, r7
 800beb0:	bd80      	pop	{r7, pc}

0800beb2 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800beb2:	b580      	push	{r7, lr}
 800beb4:	b084      	sub	sp, #16
 800beb6:	af00      	add	r7, sp, #0
 800beb8:	6078      	str	r0, [r7, #4]
 800beba:	460b      	mov	r3, r1
 800bebc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bec4:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800becc:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d03a      	beq.n	800bf4e <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800bed8:	78fa      	ldrb	r2, [r7, #3]
 800beda:	6879      	ldr	r1, [r7, #4]
 800bedc:	4613      	mov	r3, r2
 800bede:	009b      	lsls	r3, r3, #2
 800bee0:	4413      	add	r3, r2
 800bee2:	009b      	lsls	r3, r3, #2
 800bee4:	440b      	add	r3, r1
 800bee6:	331c      	adds	r3, #28
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	2b00      	cmp	r3, #0
 800beec:	d029      	beq.n	800bf42 <USBD_CDC_DataIn+0x90>
 800beee:	78fa      	ldrb	r2, [r7, #3]
 800bef0:	6879      	ldr	r1, [r7, #4]
 800bef2:	4613      	mov	r3, r2
 800bef4:	009b      	lsls	r3, r3, #2
 800bef6:	4413      	add	r3, r2
 800bef8:	009b      	lsls	r3, r3, #2
 800befa:	440b      	add	r3, r1
 800befc:	331c      	adds	r3, #28
 800befe:	681a      	ldr	r2, [r3, #0]
 800bf00:	78f9      	ldrb	r1, [r7, #3]
 800bf02:	68b8      	ldr	r0, [r7, #8]
 800bf04:	460b      	mov	r3, r1
 800bf06:	009b      	lsls	r3, r3, #2
 800bf08:	440b      	add	r3, r1
 800bf0a:	00db      	lsls	r3, r3, #3
 800bf0c:	4403      	add	r3, r0
 800bf0e:	3338      	adds	r3, #56	; 0x38
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	fbb2 f1f3 	udiv	r1, r2, r3
 800bf16:	fb03 f301 	mul.w	r3, r3, r1
 800bf1a:	1ad3      	subs	r3, r2, r3
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d110      	bne.n	800bf42 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800bf20:	78fa      	ldrb	r2, [r7, #3]
 800bf22:	6879      	ldr	r1, [r7, #4]
 800bf24:	4613      	mov	r3, r2
 800bf26:	009b      	lsls	r3, r3, #2
 800bf28:	4413      	add	r3, r2
 800bf2a:	009b      	lsls	r3, r3, #2
 800bf2c:	440b      	add	r3, r1
 800bf2e:	331c      	adds	r3, #28
 800bf30:	2200      	movs	r2, #0
 800bf32:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800bf34:	78f9      	ldrb	r1, [r7, #3]
 800bf36:	2300      	movs	r3, #0
 800bf38:	2200      	movs	r2, #0
 800bf3a:	6878      	ldr	r0, [r7, #4]
 800bf3c:	f001 fd8c 	bl	800da58 <USBD_LL_Transmit>
 800bf40:	e003      	b.n	800bf4a <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	2200      	movs	r2, #0
 800bf46:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800bf4a:	2300      	movs	r3, #0
 800bf4c:	e000      	b.n	800bf50 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800bf4e:	2302      	movs	r3, #2
  }
}
 800bf50:	4618      	mov	r0, r3
 800bf52:	3710      	adds	r7, #16
 800bf54:	46bd      	mov	sp, r7
 800bf56:	bd80      	pop	{r7, pc}

0800bf58 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800bf58:	b580      	push	{r7, lr}
 800bf5a:	b084      	sub	sp, #16
 800bf5c:	af00      	add	r7, sp, #0
 800bf5e:	6078      	str	r0, [r7, #4]
 800bf60:	460b      	mov	r3, r1
 800bf62:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf6a:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800bf6c:	78fb      	ldrb	r3, [r7, #3]
 800bf6e:	4619      	mov	r1, r3
 800bf70:	6878      	ldr	r0, [r7, #4]
 800bf72:	f001 fdb7 	bl	800dae4 <USBD_LL_GetRxDataSize>
 800bf76:	4602      	mov	r2, r0
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d00d      	beq.n	800bfa4 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bf8e:	68db      	ldr	r3, [r3, #12]
 800bf90:	68fa      	ldr	r2, [r7, #12]
 800bf92:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800bf96:	68fa      	ldr	r2, [r7, #12]
 800bf98:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800bf9c:	4611      	mov	r1, r2
 800bf9e:	4798      	blx	r3

    return USBD_OK;
 800bfa0:	2300      	movs	r3, #0
 800bfa2:	e000      	b.n	800bfa6 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800bfa4:	2302      	movs	r3, #2
  }
}
 800bfa6:	4618      	mov	r0, r3
 800bfa8:	3710      	adds	r7, #16
 800bfaa:	46bd      	mov	sp, r7
 800bfac:	bd80      	pop	{r7, pc}

0800bfae <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800bfae:	b580      	push	{r7, lr}
 800bfb0:	b084      	sub	sp, #16
 800bfb2:	af00      	add	r7, sp, #0
 800bfb4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bfbc:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d015      	beq.n	800bff4 <USBD_CDC_EP0_RxReady+0x46>
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800bfce:	2bff      	cmp	r3, #255	; 0xff
 800bfd0:	d010      	beq.n	800bff4 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bfd8:	689b      	ldr	r3, [r3, #8]
 800bfda:	68fa      	ldr	r2, [r7, #12]
 800bfdc:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800bfe0:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800bfe2:	68fa      	ldr	r2, [r7, #12]
 800bfe4:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800bfe8:	b292      	uxth	r2, r2
 800bfea:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	22ff      	movs	r2, #255	; 0xff
 800bff0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800bff4:	2300      	movs	r3, #0
}
 800bff6:	4618      	mov	r0, r3
 800bff8:	3710      	adds	r7, #16
 800bffa:	46bd      	mov	sp, r7
 800bffc:	bd80      	pop	{r7, pc}
	...

0800c000 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800c000:	b480      	push	{r7}
 800c002:	b083      	sub	sp, #12
 800c004:	af00      	add	r7, sp, #0
 800c006:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	2243      	movs	r2, #67	; 0x43
 800c00c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800c00e:	4b03      	ldr	r3, [pc, #12]	; (800c01c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800c010:	4618      	mov	r0, r3
 800c012:	370c      	adds	r7, #12
 800c014:	46bd      	mov	sp, r7
 800c016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c01a:	4770      	bx	lr
 800c01c:	200000bc 	.word	0x200000bc

0800c020 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800c020:	b480      	push	{r7}
 800c022:	b083      	sub	sp, #12
 800c024:	af00      	add	r7, sp, #0
 800c026:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	2243      	movs	r2, #67	; 0x43
 800c02c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800c02e:	4b03      	ldr	r3, [pc, #12]	; (800c03c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800c030:	4618      	mov	r0, r3
 800c032:	370c      	adds	r7, #12
 800c034:	46bd      	mov	sp, r7
 800c036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c03a:	4770      	bx	lr
 800c03c:	20000078 	.word	0x20000078

0800c040 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800c040:	b480      	push	{r7}
 800c042:	b083      	sub	sp, #12
 800c044:	af00      	add	r7, sp, #0
 800c046:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	2243      	movs	r2, #67	; 0x43
 800c04c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800c04e:	4b03      	ldr	r3, [pc, #12]	; (800c05c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800c050:	4618      	mov	r0, r3
 800c052:	370c      	adds	r7, #12
 800c054:	46bd      	mov	sp, r7
 800c056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c05a:	4770      	bx	lr
 800c05c:	20000100 	.word	0x20000100

0800c060 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800c060:	b480      	push	{r7}
 800c062:	b083      	sub	sp, #12
 800c064:	af00      	add	r7, sp, #0
 800c066:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	220a      	movs	r2, #10
 800c06c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800c06e:	4b03      	ldr	r3, [pc, #12]	; (800c07c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800c070:	4618      	mov	r0, r3
 800c072:	370c      	adds	r7, #12
 800c074:	46bd      	mov	sp, r7
 800c076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c07a:	4770      	bx	lr
 800c07c:	20000034 	.word	0x20000034

0800c080 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800c080:	b480      	push	{r7}
 800c082:	b085      	sub	sp, #20
 800c084:	af00      	add	r7, sp, #0
 800c086:	6078      	str	r0, [r7, #4]
 800c088:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800c08a:	2302      	movs	r3, #2
 800c08c:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800c08e:	683b      	ldr	r3, [r7, #0]
 800c090:	2b00      	cmp	r3, #0
 800c092:	d005      	beq.n	800c0a0 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	683a      	ldr	r2, [r7, #0]
 800c098:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800c09c:	2300      	movs	r3, #0
 800c09e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800c0a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0a2:	4618      	mov	r0, r3
 800c0a4:	3714      	adds	r7, #20
 800c0a6:	46bd      	mov	sp, r7
 800c0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ac:	4770      	bx	lr

0800c0ae <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800c0ae:	b480      	push	{r7}
 800c0b0:	b087      	sub	sp, #28
 800c0b2:	af00      	add	r7, sp, #0
 800c0b4:	60f8      	str	r0, [r7, #12]
 800c0b6:	60b9      	str	r1, [r7, #8]
 800c0b8:	4613      	mov	r3, r2
 800c0ba:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c0c2:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800c0c4:	697b      	ldr	r3, [r7, #20]
 800c0c6:	68ba      	ldr	r2, [r7, #8]
 800c0c8:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800c0cc:	88fa      	ldrh	r2, [r7, #6]
 800c0ce:	697b      	ldr	r3, [r7, #20]
 800c0d0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800c0d4:	2300      	movs	r3, #0
}
 800c0d6:	4618      	mov	r0, r3
 800c0d8:	371c      	adds	r7, #28
 800c0da:	46bd      	mov	sp, r7
 800c0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0e0:	4770      	bx	lr

0800c0e2 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800c0e2:	b480      	push	{r7}
 800c0e4:	b085      	sub	sp, #20
 800c0e6:	af00      	add	r7, sp, #0
 800c0e8:	6078      	str	r0, [r7, #4]
 800c0ea:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c0f2:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	683a      	ldr	r2, [r7, #0]
 800c0f8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800c0fc:	2300      	movs	r3, #0
}
 800c0fe:	4618      	mov	r0, r3
 800c100:	3714      	adds	r7, #20
 800c102:	46bd      	mov	sp, r7
 800c104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c108:	4770      	bx	lr

0800c10a <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800c10a:	b580      	push	{r7, lr}
 800c10c:	b084      	sub	sp, #16
 800c10e:	af00      	add	r7, sp, #0
 800c110:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c118:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c120:	2b00      	cmp	r3, #0
 800c122:	d017      	beq.n	800c154 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	7c1b      	ldrb	r3, [r3, #16]
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d109      	bne.n	800c140 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c132:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c136:	2101      	movs	r1, #1
 800c138:	6878      	ldr	r0, [r7, #4]
 800c13a:	f001 fcb0 	bl	800da9e <USBD_LL_PrepareReceive>
 800c13e:	e007      	b.n	800c150 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c146:	2340      	movs	r3, #64	; 0x40
 800c148:	2101      	movs	r1, #1
 800c14a:	6878      	ldr	r0, [r7, #4]
 800c14c:	f001 fca7 	bl	800da9e <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800c150:	2300      	movs	r3, #0
 800c152:	e000      	b.n	800c156 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800c154:	2302      	movs	r3, #2
  }
}
 800c156:	4618      	mov	r0, r3
 800c158:	3710      	adds	r7, #16
 800c15a:	46bd      	mov	sp, r7
 800c15c:	bd80      	pop	{r7, pc}

0800c15e <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800c15e:	b580      	push	{r7, lr}
 800c160:	b084      	sub	sp, #16
 800c162:	af00      	add	r7, sp, #0
 800c164:	60f8      	str	r0, [r7, #12]
 800c166:	60b9      	str	r1, [r7, #8]
 800c168:	4613      	mov	r3, r2
 800c16a:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d101      	bne.n	800c176 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800c172:	2302      	movs	r3, #2
 800c174:	e01a      	b.n	800c1ac <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d003      	beq.n	800c188 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	2200      	movs	r2, #0
 800c184:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800c188:	68bb      	ldr	r3, [r7, #8]
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d003      	beq.n	800c196 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	68ba      	ldr	r2, [r7, #8]
 800c192:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	2201      	movs	r2, #1
 800c19a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	79fa      	ldrb	r2, [r7, #7]
 800c1a2:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800c1a4:	68f8      	ldr	r0, [r7, #12]
 800c1a6:	f001 fb13 	bl	800d7d0 <USBD_LL_Init>

  return USBD_OK;
 800c1aa:	2300      	movs	r3, #0
}
 800c1ac:	4618      	mov	r0, r3
 800c1ae:	3710      	adds	r7, #16
 800c1b0:	46bd      	mov	sp, r7
 800c1b2:	bd80      	pop	{r7, pc}

0800c1b4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c1b4:	b480      	push	{r7}
 800c1b6:	b085      	sub	sp, #20
 800c1b8:	af00      	add	r7, sp, #0
 800c1ba:	6078      	str	r0, [r7, #4]
 800c1bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800c1be:	2300      	movs	r3, #0
 800c1c0:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800c1c2:	683b      	ldr	r3, [r7, #0]
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d006      	beq.n	800c1d6 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	683a      	ldr	r2, [r7, #0]
 800c1cc:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800c1d0:	2300      	movs	r3, #0
 800c1d2:	73fb      	strb	r3, [r7, #15]
 800c1d4:	e001      	b.n	800c1da <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800c1d6:	2302      	movs	r3, #2
 800c1d8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c1da:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1dc:	4618      	mov	r0, r3
 800c1de:	3714      	adds	r7, #20
 800c1e0:	46bd      	mov	sp, r7
 800c1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e6:	4770      	bx	lr

0800c1e8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800c1e8:	b580      	push	{r7, lr}
 800c1ea:	b082      	sub	sp, #8
 800c1ec:	af00      	add	r7, sp, #0
 800c1ee:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800c1f0:	6878      	ldr	r0, [r7, #4]
 800c1f2:	f001 fb47 	bl	800d884 <USBD_LL_Start>

  return USBD_OK;
 800c1f6:	2300      	movs	r3, #0
}
 800c1f8:	4618      	mov	r0, r3
 800c1fa:	3708      	adds	r7, #8
 800c1fc:	46bd      	mov	sp, r7
 800c1fe:	bd80      	pop	{r7, pc}

0800c200 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800c200:	b480      	push	{r7}
 800c202:	b083      	sub	sp, #12
 800c204:	af00      	add	r7, sp, #0
 800c206:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c208:	2300      	movs	r3, #0
}
 800c20a:	4618      	mov	r0, r3
 800c20c:	370c      	adds	r7, #12
 800c20e:	46bd      	mov	sp, r7
 800c210:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c214:	4770      	bx	lr

0800c216 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800c216:	b580      	push	{r7, lr}
 800c218:	b084      	sub	sp, #16
 800c21a:	af00      	add	r7, sp, #0
 800c21c:	6078      	str	r0, [r7, #4]
 800c21e:	460b      	mov	r3, r1
 800c220:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800c222:	2302      	movs	r3, #2
 800c224:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d00c      	beq.n	800c24a <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	78fa      	ldrb	r2, [r7, #3]
 800c23a:	4611      	mov	r1, r2
 800c23c:	6878      	ldr	r0, [r7, #4]
 800c23e:	4798      	blx	r3
 800c240:	4603      	mov	r3, r0
 800c242:	2b00      	cmp	r3, #0
 800c244:	d101      	bne.n	800c24a <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800c246:	2300      	movs	r3, #0
 800c248:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800c24a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c24c:	4618      	mov	r0, r3
 800c24e:	3710      	adds	r7, #16
 800c250:	46bd      	mov	sp, r7
 800c252:	bd80      	pop	{r7, pc}

0800c254 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800c254:	b580      	push	{r7, lr}
 800c256:	b082      	sub	sp, #8
 800c258:	af00      	add	r7, sp, #0
 800c25a:	6078      	str	r0, [r7, #4]
 800c25c:	460b      	mov	r3, r1
 800c25e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c266:	685b      	ldr	r3, [r3, #4]
 800c268:	78fa      	ldrb	r2, [r7, #3]
 800c26a:	4611      	mov	r1, r2
 800c26c:	6878      	ldr	r0, [r7, #4]
 800c26e:	4798      	blx	r3

  return USBD_OK;
 800c270:	2300      	movs	r3, #0
}
 800c272:	4618      	mov	r0, r3
 800c274:	3708      	adds	r7, #8
 800c276:	46bd      	mov	sp, r7
 800c278:	bd80      	pop	{r7, pc}

0800c27a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c27a:	b580      	push	{r7, lr}
 800c27c:	b082      	sub	sp, #8
 800c27e:	af00      	add	r7, sp, #0
 800c280:	6078      	str	r0, [r7, #4]
 800c282:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800c28a:	6839      	ldr	r1, [r7, #0]
 800c28c:	4618      	mov	r0, r3
 800c28e:	f000 feda 	bl	800d046 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	2201      	movs	r2, #1
 800c296:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800c2a0:	461a      	mov	r2, r3
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800c2ae:	f003 031f 	and.w	r3, r3, #31
 800c2b2:	2b02      	cmp	r3, #2
 800c2b4:	d016      	beq.n	800c2e4 <USBD_LL_SetupStage+0x6a>
 800c2b6:	2b02      	cmp	r3, #2
 800c2b8:	d81c      	bhi.n	800c2f4 <USBD_LL_SetupStage+0x7a>
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d002      	beq.n	800c2c4 <USBD_LL_SetupStage+0x4a>
 800c2be:	2b01      	cmp	r3, #1
 800c2c0:	d008      	beq.n	800c2d4 <USBD_LL_SetupStage+0x5a>
 800c2c2:	e017      	b.n	800c2f4 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800c2ca:	4619      	mov	r1, r3
 800c2cc:	6878      	ldr	r0, [r7, #4]
 800c2ce:	f000 f9cd 	bl	800c66c <USBD_StdDevReq>
      break;
 800c2d2:	e01a      	b.n	800c30a <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800c2da:	4619      	mov	r1, r3
 800c2dc:	6878      	ldr	r0, [r7, #4]
 800c2de:	f000 fa2f 	bl	800c740 <USBD_StdItfReq>
      break;
 800c2e2:	e012      	b.n	800c30a <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800c2ea:	4619      	mov	r1, r3
 800c2ec:	6878      	ldr	r0, [r7, #4]
 800c2ee:	f000 fa6f 	bl	800c7d0 <USBD_StdEPReq>
      break;
 800c2f2:	e00a      	b.n	800c30a <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800c2fa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c2fe:	b2db      	uxtb	r3, r3
 800c300:	4619      	mov	r1, r3
 800c302:	6878      	ldr	r0, [r7, #4]
 800c304:	f001 fb1e 	bl	800d944 <USBD_LL_StallEP>
      break;
 800c308:	bf00      	nop
  }

  return USBD_OK;
 800c30a:	2300      	movs	r3, #0
}
 800c30c:	4618      	mov	r0, r3
 800c30e:	3708      	adds	r7, #8
 800c310:	46bd      	mov	sp, r7
 800c312:	bd80      	pop	{r7, pc}

0800c314 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c314:	b580      	push	{r7, lr}
 800c316:	b086      	sub	sp, #24
 800c318:	af00      	add	r7, sp, #0
 800c31a:	60f8      	str	r0, [r7, #12]
 800c31c:	460b      	mov	r3, r1
 800c31e:	607a      	str	r2, [r7, #4]
 800c320:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800c322:	7afb      	ldrb	r3, [r7, #11]
 800c324:	2b00      	cmp	r3, #0
 800c326:	d14b      	bne.n	800c3c0 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800c32e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c336:	2b03      	cmp	r3, #3
 800c338:	d134      	bne.n	800c3a4 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800c33a:	697b      	ldr	r3, [r7, #20]
 800c33c:	68da      	ldr	r2, [r3, #12]
 800c33e:	697b      	ldr	r3, [r7, #20]
 800c340:	691b      	ldr	r3, [r3, #16]
 800c342:	429a      	cmp	r2, r3
 800c344:	d919      	bls.n	800c37a <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800c346:	697b      	ldr	r3, [r7, #20]
 800c348:	68da      	ldr	r2, [r3, #12]
 800c34a:	697b      	ldr	r3, [r7, #20]
 800c34c:	691b      	ldr	r3, [r3, #16]
 800c34e:	1ad2      	subs	r2, r2, r3
 800c350:	697b      	ldr	r3, [r7, #20]
 800c352:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800c354:	697b      	ldr	r3, [r7, #20]
 800c356:	68da      	ldr	r2, [r3, #12]
 800c358:	697b      	ldr	r3, [r7, #20]
 800c35a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800c35c:	429a      	cmp	r2, r3
 800c35e:	d203      	bcs.n	800c368 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800c360:	697b      	ldr	r3, [r7, #20]
 800c362:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800c364:	b29b      	uxth	r3, r3
 800c366:	e002      	b.n	800c36e <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800c368:	697b      	ldr	r3, [r7, #20]
 800c36a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800c36c:	b29b      	uxth	r3, r3
 800c36e:	461a      	mov	r2, r3
 800c370:	6879      	ldr	r1, [r7, #4]
 800c372:	68f8      	ldr	r0, [r7, #12]
 800c374:	f000 ff5b 	bl	800d22e <USBD_CtlContinueRx>
 800c378:	e038      	b.n	800c3ec <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c380:	691b      	ldr	r3, [r3, #16]
 800c382:	2b00      	cmp	r3, #0
 800c384:	d00a      	beq.n	800c39c <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800c38c:	2b03      	cmp	r3, #3
 800c38e:	d105      	bne.n	800c39c <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c396:	691b      	ldr	r3, [r3, #16]
 800c398:	68f8      	ldr	r0, [r7, #12]
 800c39a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800c39c:	68f8      	ldr	r0, [r7, #12]
 800c39e:	f000 ff58 	bl	800d252 <USBD_CtlSendStatus>
 800c3a2:	e023      	b.n	800c3ec <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c3aa:	2b05      	cmp	r3, #5
 800c3ac:	d11e      	bne.n	800c3ec <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	2200      	movs	r2, #0
 800c3b2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800c3b6:	2100      	movs	r1, #0
 800c3b8:	68f8      	ldr	r0, [r7, #12]
 800c3ba:	f001 fac3 	bl	800d944 <USBD_LL_StallEP>
 800c3be:	e015      	b.n	800c3ec <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c3c6:	699b      	ldr	r3, [r3, #24]
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d00d      	beq.n	800c3e8 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800c3d2:	2b03      	cmp	r3, #3
 800c3d4:	d108      	bne.n	800c3e8 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c3dc:	699b      	ldr	r3, [r3, #24]
 800c3de:	7afa      	ldrb	r2, [r7, #11]
 800c3e0:	4611      	mov	r1, r2
 800c3e2:	68f8      	ldr	r0, [r7, #12]
 800c3e4:	4798      	blx	r3
 800c3e6:	e001      	b.n	800c3ec <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800c3e8:	2302      	movs	r3, #2
 800c3ea:	e000      	b.n	800c3ee <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800c3ec:	2300      	movs	r3, #0
}
 800c3ee:	4618      	mov	r0, r3
 800c3f0:	3718      	adds	r7, #24
 800c3f2:	46bd      	mov	sp, r7
 800c3f4:	bd80      	pop	{r7, pc}

0800c3f6 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c3f6:	b580      	push	{r7, lr}
 800c3f8:	b086      	sub	sp, #24
 800c3fa:	af00      	add	r7, sp, #0
 800c3fc:	60f8      	str	r0, [r7, #12]
 800c3fe:	460b      	mov	r3, r1
 800c400:	607a      	str	r2, [r7, #4]
 800c402:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800c404:	7afb      	ldrb	r3, [r7, #11]
 800c406:	2b00      	cmp	r3, #0
 800c408:	d17f      	bne.n	800c50a <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800c40a:	68fb      	ldr	r3, [r7, #12]
 800c40c:	3314      	adds	r3, #20
 800c40e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c416:	2b02      	cmp	r3, #2
 800c418:	d15c      	bne.n	800c4d4 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800c41a:	697b      	ldr	r3, [r7, #20]
 800c41c:	68da      	ldr	r2, [r3, #12]
 800c41e:	697b      	ldr	r3, [r7, #20]
 800c420:	691b      	ldr	r3, [r3, #16]
 800c422:	429a      	cmp	r2, r3
 800c424:	d915      	bls.n	800c452 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800c426:	697b      	ldr	r3, [r7, #20]
 800c428:	68da      	ldr	r2, [r3, #12]
 800c42a:	697b      	ldr	r3, [r7, #20]
 800c42c:	691b      	ldr	r3, [r3, #16]
 800c42e:	1ad2      	subs	r2, r2, r3
 800c430:	697b      	ldr	r3, [r7, #20]
 800c432:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800c434:	697b      	ldr	r3, [r7, #20]
 800c436:	68db      	ldr	r3, [r3, #12]
 800c438:	b29b      	uxth	r3, r3
 800c43a:	461a      	mov	r2, r3
 800c43c:	6879      	ldr	r1, [r7, #4]
 800c43e:	68f8      	ldr	r0, [r7, #12]
 800c440:	f000 fec5 	bl	800d1ce <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c444:	2300      	movs	r3, #0
 800c446:	2200      	movs	r2, #0
 800c448:	2100      	movs	r1, #0
 800c44a:	68f8      	ldr	r0, [r7, #12]
 800c44c:	f001 fb27 	bl	800da9e <USBD_LL_PrepareReceive>
 800c450:	e04e      	b.n	800c4f0 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800c452:	697b      	ldr	r3, [r7, #20]
 800c454:	689b      	ldr	r3, [r3, #8]
 800c456:	697a      	ldr	r2, [r7, #20]
 800c458:	6912      	ldr	r2, [r2, #16]
 800c45a:	fbb3 f1f2 	udiv	r1, r3, r2
 800c45e:	fb02 f201 	mul.w	r2, r2, r1
 800c462:	1a9b      	subs	r3, r3, r2
 800c464:	2b00      	cmp	r3, #0
 800c466:	d11c      	bne.n	800c4a2 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800c468:	697b      	ldr	r3, [r7, #20]
 800c46a:	689a      	ldr	r2, [r3, #8]
 800c46c:	697b      	ldr	r3, [r7, #20]
 800c46e:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800c470:	429a      	cmp	r2, r3
 800c472:	d316      	bcc.n	800c4a2 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800c474:	697b      	ldr	r3, [r7, #20]
 800c476:	689a      	ldr	r2, [r3, #8]
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800c47e:	429a      	cmp	r2, r3
 800c480:	d20f      	bcs.n	800c4a2 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c482:	2200      	movs	r2, #0
 800c484:	2100      	movs	r1, #0
 800c486:	68f8      	ldr	r0, [r7, #12]
 800c488:	f000 fea1 	bl	800d1ce <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	2200      	movs	r2, #0
 800c490:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c494:	2300      	movs	r3, #0
 800c496:	2200      	movs	r2, #0
 800c498:	2100      	movs	r1, #0
 800c49a:	68f8      	ldr	r0, [r7, #12]
 800c49c:	f001 faff 	bl	800da9e <USBD_LL_PrepareReceive>
 800c4a0:	e026      	b.n	800c4f0 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800c4a2:	68fb      	ldr	r3, [r7, #12]
 800c4a4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c4a8:	68db      	ldr	r3, [r3, #12]
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d00a      	beq.n	800c4c4 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800c4b4:	2b03      	cmp	r3, #3
 800c4b6:	d105      	bne.n	800c4c4 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c4be:	68db      	ldr	r3, [r3, #12]
 800c4c0:	68f8      	ldr	r0, [r7, #12]
 800c4c2:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800c4c4:	2180      	movs	r1, #128	; 0x80
 800c4c6:	68f8      	ldr	r0, [r7, #12]
 800c4c8:	f001 fa3c 	bl	800d944 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800c4cc:	68f8      	ldr	r0, [r7, #12]
 800c4ce:	f000 fed3 	bl	800d278 <USBD_CtlReceiveStatus>
 800c4d2:	e00d      	b.n	800c4f0 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800c4d4:	68fb      	ldr	r3, [r7, #12]
 800c4d6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c4da:	2b04      	cmp	r3, #4
 800c4dc:	d004      	beq.n	800c4e8 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d103      	bne.n	800c4f0 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800c4e8:	2180      	movs	r1, #128	; 0x80
 800c4ea:	68f8      	ldr	r0, [r7, #12]
 800c4ec:	f001 fa2a 	bl	800d944 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800c4f6:	2b01      	cmp	r3, #1
 800c4f8:	d11d      	bne.n	800c536 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800c4fa:	68f8      	ldr	r0, [r7, #12]
 800c4fc:	f7ff fe80 	bl	800c200 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	2200      	movs	r2, #0
 800c504:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800c508:	e015      	b.n	800c536 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c510:	695b      	ldr	r3, [r3, #20]
 800c512:	2b00      	cmp	r3, #0
 800c514:	d00d      	beq.n	800c532 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800c51c:	2b03      	cmp	r3, #3
 800c51e:	d108      	bne.n	800c532 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c526:	695b      	ldr	r3, [r3, #20]
 800c528:	7afa      	ldrb	r2, [r7, #11]
 800c52a:	4611      	mov	r1, r2
 800c52c:	68f8      	ldr	r0, [r7, #12]
 800c52e:	4798      	blx	r3
 800c530:	e001      	b.n	800c536 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800c532:	2302      	movs	r3, #2
 800c534:	e000      	b.n	800c538 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800c536:	2300      	movs	r3, #0
}
 800c538:	4618      	mov	r0, r3
 800c53a:	3718      	adds	r7, #24
 800c53c:	46bd      	mov	sp, r7
 800c53e:	bd80      	pop	{r7, pc}

0800c540 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c540:	b580      	push	{r7, lr}
 800c542:	b082      	sub	sp, #8
 800c544:	af00      	add	r7, sp, #0
 800c546:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c548:	2340      	movs	r3, #64	; 0x40
 800c54a:	2200      	movs	r2, #0
 800c54c:	2100      	movs	r1, #0
 800c54e:	6878      	ldr	r0, [r7, #4]
 800c550:	f001 f9b3 	bl	800d8ba <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	2201      	movs	r2, #1
 800c558:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	2240      	movs	r2, #64	; 0x40
 800c560:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c564:	2340      	movs	r3, #64	; 0x40
 800c566:	2200      	movs	r2, #0
 800c568:	2180      	movs	r1, #128	; 0x80
 800c56a:	6878      	ldr	r0, [r7, #4]
 800c56c:	f001 f9a5 	bl	800d8ba <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	2201      	movs	r2, #1
 800c574:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	2240      	movs	r2, #64	; 0x40
 800c57a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	2201      	movs	r2, #1
 800c580:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	2200      	movs	r2, #0
 800c588:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	2200      	movs	r2, #0
 800c590:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	2200      	movs	r2, #0
 800c596:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d009      	beq.n	800c5b8 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c5aa:	685b      	ldr	r3, [r3, #4]
 800c5ac:	687a      	ldr	r2, [r7, #4]
 800c5ae:	6852      	ldr	r2, [r2, #4]
 800c5b0:	b2d2      	uxtb	r2, r2
 800c5b2:	4611      	mov	r1, r2
 800c5b4:	6878      	ldr	r0, [r7, #4]
 800c5b6:	4798      	blx	r3
  }

  return USBD_OK;
 800c5b8:	2300      	movs	r3, #0
}
 800c5ba:	4618      	mov	r0, r3
 800c5bc:	3708      	adds	r7, #8
 800c5be:	46bd      	mov	sp, r7
 800c5c0:	bd80      	pop	{r7, pc}

0800c5c2 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c5c2:	b480      	push	{r7}
 800c5c4:	b083      	sub	sp, #12
 800c5c6:	af00      	add	r7, sp, #0
 800c5c8:	6078      	str	r0, [r7, #4]
 800c5ca:	460b      	mov	r3, r1
 800c5cc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	78fa      	ldrb	r2, [r7, #3]
 800c5d2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800c5d4:	2300      	movs	r3, #0
}
 800c5d6:	4618      	mov	r0, r3
 800c5d8:	370c      	adds	r7, #12
 800c5da:	46bd      	mov	sp, r7
 800c5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5e0:	4770      	bx	lr

0800c5e2 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c5e2:	b480      	push	{r7}
 800c5e4:	b083      	sub	sp, #12
 800c5e6:	af00      	add	r7, sp, #0
 800c5e8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	2204      	movs	r2, #4
 800c5fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800c5fe:	2300      	movs	r3, #0
}
 800c600:	4618      	mov	r0, r3
 800c602:	370c      	adds	r7, #12
 800c604:	46bd      	mov	sp, r7
 800c606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c60a:	4770      	bx	lr

0800c60c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800c60c:	b480      	push	{r7}
 800c60e:	b083      	sub	sp, #12
 800c610:	af00      	add	r7, sp, #0
 800c612:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c61a:	2b04      	cmp	r3, #4
 800c61c:	d105      	bne.n	800c62a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800c62a:	2300      	movs	r3, #0
}
 800c62c:	4618      	mov	r0, r3
 800c62e:	370c      	adds	r7, #12
 800c630:	46bd      	mov	sp, r7
 800c632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c636:	4770      	bx	lr

0800c638 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800c638:	b580      	push	{r7, lr}
 800c63a:	b082      	sub	sp, #8
 800c63c:	af00      	add	r7, sp, #0
 800c63e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c646:	2b03      	cmp	r3, #3
 800c648:	d10b      	bne.n	800c662 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c650:	69db      	ldr	r3, [r3, #28]
 800c652:	2b00      	cmp	r3, #0
 800c654:	d005      	beq.n	800c662 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c65c:	69db      	ldr	r3, [r3, #28]
 800c65e:	6878      	ldr	r0, [r7, #4]
 800c660:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c662:	2300      	movs	r3, #0
}
 800c664:	4618      	mov	r0, r3
 800c666:	3708      	adds	r7, #8
 800c668:	46bd      	mov	sp, r7
 800c66a:	bd80      	pop	{r7, pc}

0800c66c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800c66c:	b580      	push	{r7, lr}
 800c66e:	b084      	sub	sp, #16
 800c670:	af00      	add	r7, sp, #0
 800c672:	6078      	str	r0, [r7, #4]
 800c674:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c676:	2300      	movs	r3, #0
 800c678:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c67a:	683b      	ldr	r3, [r7, #0]
 800c67c:	781b      	ldrb	r3, [r3, #0]
 800c67e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c682:	2b40      	cmp	r3, #64	; 0x40
 800c684:	d005      	beq.n	800c692 <USBD_StdDevReq+0x26>
 800c686:	2b40      	cmp	r3, #64	; 0x40
 800c688:	d84f      	bhi.n	800c72a <USBD_StdDevReq+0xbe>
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d009      	beq.n	800c6a2 <USBD_StdDevReq+0x36>
 800c68e:	2b20      	cmp	r3, #32
 800c690:	d14b      	bne.n	800c72a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c698:	689b      	ldr	r3, [r3, #8]
 800c69a:	6839      	ldr	r1, [r7, #0]
 800c69c:	6878      	ldr	r0, [r7, #4]
 800c69e:	4798      	blx	r3
      break;
 800c6a0:	e048      	b.n	800c734 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c6a2:	683b      	ldr	r3, [r7, #0]
 800c6a4:	785b      	ldrb	r3, [r3, #1]
 800c6a6:	2b09      	cmp	r3, #9
 800c6a8:	d839      	bhi.n	800c71e <USBD_StdDevReq+0xb2>
 800c6aa:	a201      	add	r2, pc, #4	; (adr r2, 800c6b0 <USBD_StdDevReq+0x44>)
 800c6ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6b0:	0800c701 	.word	0x0800c701
 800c6b4:	0800c715 	.word	0x0800c715
 800c6b8:	0800c71f 	.word	0x0800c71f
 800c6bc:	0800c70b 	.word	0x0800c70b
 800c6c0:	0800c71f 	.word	0x0800c71f
 800c6c4:	0800c6e3 	.word	0x0800c6e3
 800c6c8:	0800c6d9 	.word	0x0800c6d9
 800c6cc:	0800c71f 	.word	0x0800c71f
 800c6d0:	0800c6f7 	.word	0x0800c6f7
 800c6d4:	0800c6ed 	.word	0x0800c6ed
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800c6d8:	6839      	ldr	r1, [r7, #0]
 800c6da:	6878      	ldr	r0, [r7, #4]
 800c6dc:	f000 f9dc 	bl	800ca98 <USBD_GetDescriptor>
          break;
 800c6e0:	e022      	b.n	800c728 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800c6e2:	6839      	ldr	r1, [r7, #0]
 800c6e4:	6878      	ldr	r0, [r7, #4]
 800c6e6:	f000 fb3f 	bl	800cd68 <USBD_SetAddress>
          break;
 800c6ea:	e01d      	b.n	800c728 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800c6ec:	6839      	ldr	r1, [r7, #0]
 800c6ee:	6878      	ldr	r0, [r7, #4]
 800c6f0:	f000 fb7e 	bl	800cdf0 <USBD_SetConfig>
          break;
 800c6f4:	e018      	b.n	800c728 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800c6f6:	6839      	ldr	r1, [r7, #0]
 800c6f8:	6878      	ldr	r0, [r7, #4]
 800c6fa:	f000 fc07 	bl	800cf0c <USBD_GetConfig>
          break;
 800c6fe:	e013      	b.n	800c728 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800c700:	6839      	ldr	r1, [r7, #0]
 800c702:	6878      	ldr	r0, [r7, #4]
 800c704:	f000 fc37 	bl	800cf76 <USBD_GetStatus>
          break;
 800c708:	e00e      	b.n	800c728 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800c70a:	6839      	ldr	r1, [r7, #0]
 800c70c:	6878      	ldr	r0, [r7, #4]
 800c70e:	f000 fc65 	bl	800cfdc <USBD_SetFeature>
          break;
 800c712:	e009      	b.n	800c728 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800c714:	6839      	ldr	r1, [r7, #0]
 800c716:	6878      	ldr	r0, [r7, #4]
 800c718:	f000 fc74 	bl	800d004 <USBD_ClrFeature>
          break;
 800c71c:	e004      	b.n	800c728 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800c71e:	6839      	ldr	r1, [r7, #0]
 800c720:	6878      	ldr	r0, [r7, #4]
 800c722:	f000 fccd 	bl	800d0c0 <USBD_CtlError>
          break;
 800c726:	bf00      	nop
      }
      break;
 800c728:	e004      	b.n	800c734 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800c72a:	6839      	ldr	r1, [r7, #0]
 800c72c:	6878      	ldr	r0, [r7, #4]
 800c72e:	f000 fcc7 	bl	800d0c0 <USBD_CtlError>
      break;
 800c732:	bf00      	nop
  }

  return ret;
 800c734:	7bfb      	ldrb	r3, [r7, #15]
}
 800c736:	4618      	mov	r0, r3
 800c738:	3710      	adds	r7, #16
 800c73a:	46bd      	mov	sp, r7
 800c73c:	bd80      	pop	{r7, pc}
 800c73e:	bf00      	nop

0800c740 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800c740:	b580      	push	{r7, lr}
 800c742:	b084      	sub	sp, #16
 800c744:	af00      	add	r7, sp, #0
 800c746:	6078      	str	r0, [r7, #4]
 800c748:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c74a:	2300      	movs	r3, #0
 800c74c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c74e:	683b      	ldr	r3, [r7, #0]
 800c750:	781b      	ldrb	r3, [r3, #0]
 800c752:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c756:	2b40      	cmp	r3, #64	; 0x40
 800c758:	d005      	beq.n	800c766 <USBD_StdItfReq+0x26>
 800c75a:	2b40      	cmp	r3, #64	; 0x40
 800c75c:	d82e      	bhi.n	800c7bc <USBD_StdItfReq+0x7c>
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d001      	beq.n	800c766 <USBD_StdItfReq+0x26>
 800c762:	2b20      	cmp	r3, #32
 800c764:	d12a      	bne.n	800c7bc <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c76c:	3b01      	subs	r3, #1
 800c76e:	2b02      	cmp	r3, #2
 800c770:	d81d      	bhi.n	800c7ae <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c772:	683b      	ldr	r3, [r7, #0]
 800c774:	889b      	ldrh	r3, [r3, #4]
 800c776:	b2db      	uxtb	r3, r3
 800c778:	2b01      	cmp	r3, #1
 800c77a:	d813      	bhi.n	800c7a4 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c782:	689b      	ldr	r3, [r3, #8]
 800c784:	6839      	ldr	r1, [r7, #0]
 800c786:	6878      	ldr	r0, [r7, #4]
 800c788:	4798      	blx	r3
 800c78a:	4603      	mov	r3, r0
 800c78c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c78e:	683b      	ldr	r3, [r7, #0]
 800c790:	88db      	ldrh	r3, [r3, #6]
 800c792:	2b00      	cmp	r3, #0
 800c794:	d110      	bne.n	800c7b8 <USBD_StdItfReq+0x78>
 800c796:	7bfb      	ldrb	r3, [r7, #15]
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d10d      	bne.n	800c7b8 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800c79c:	6878      	ldr	r0, [r7, #4]
 800c79e:	f000 fd58 	bl	800d252 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800c7a2:	e009      	b.n	800c7b8 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800c7a4:	6839      	ldr	r1, [r7, #0]
 800c7a6:	6878      	ldr	r0, [r7, #4]
 800c7a8:	f000 fc8a 	bl	800d0c0 <USBD_CtlError>
          break;
 800c7ac:	e004      	b.n	800c7b8 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800c7ae:	6839      	ldr	r1, [r7, #0]
 800c7b0:	6878      	ldr	r0, [r7, #4]
 800c7b2:	f000 fc85 	bl	800d0c0 <USBD_CtlError>
          break;
 800c7b6:	e000      	b.n	800c7ba <USBD_StdItfReq+0x7a>
          break;
 800c7b8:	bf00      	nop
      }
      break;
 800c7ba:	e004      	b.n	800c7c6 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800c7bc:	6839      	ldr	r1, [r7, #0]
 800c7be:	6878      	ldr	r0, [r7, #4]
 800c7c0:	f000 fc7e 	bl	800d0c0 <USBD_CtlError>
      break;
 800c7c4:	bf00      	nop
  }

  return USBD_OK;
 800c7c6:	2300      	movs	r3, #0
}
 800c7c8:	4618      	mov	r0, r3
 800c7ca:	3710      	adds	r7, #16
 800c7cc:	46bd      	mov	sp, r7
 800c7ce:	bd80      	pop	{r7, pc}

0800c7d0 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800c7d0:	b580      	push	{r7, lr}
 800c7d2:	b084      	sub	sp, #16
 800c7d4:	af00      	add	r7, sp, #0
 800c7d6:	6078      	str	r0, [r7, #4]
 800c7d8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800c7da:	2300      	movs	r3, #0
 800c7dc:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800c7de:	683b      	ldr	r3, [r7, #0]
 800c7e0:	889b      	ldrh	r3, [r3, #4]
 800c7e2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c7e4:	683b      	ldr	r3, [r7, #0]
 800c7e6:	781b      	ldrb	r3, [r3, #0]
 800c7e8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c7ec:	2b40      	cmp	r3, #64	; 0x40
 800c7ee:	d007      	beq.n	800c800 <USBD_StdEPReq+0x30>
 800c7f0:	2b40      	cmp	r3, #64	; 0x40
 800c7f2:	f200 8146 	bhi.w	800ca82 <USBD_StdEPReq+0x2b2>
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d00a      	beq.n	800c810 <USBD_StdEPReq+0x40>
 800c7fa:	2b20      	cmp	r3, #32
 800c7fc:	f040 8141 	bne.w	800ca82 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c806:	689b      	ldr	r3, [r3, #8]
 800c808:	6839      	ldr	r1, [r7, #0]
 800c80a:	6878      	ldr	r0, [r7, #4]
 800c80c:	4798      	blx	r3
      break;
 800c80e:	e13d      	b.n	800ca8c <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800c810:	683b      	ldr	r3, [r7, #0]
 800c812:	781b      	ldrb	r3, [r3, #0]
 800c814:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c818:	2b20      	cmp	r3, #32
 800c81a:	d10a      	bne.n	800c832 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c822:	689b      	ldr	r3, [r3, #8]
 800c824:	6839      	ldr	r1, [r7, #0]
 800c826:	6878      	ldr	r0, [r7, #4]
 800c828:	4798      	blx	r3
 800c82a:	4603      	mov	r3, r0
 800c82c:	73fb      	strb	r3, [r7, #15]

        return ret;
 800c82e:	7bfb      	ldrb	r3, [r7, #15]
 800c830:	e12d      	b.n	800ca8e <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800c832:	683b      	ldr	r3, [r7, #0]
 800c834:	785b      	ldrb	r3, [r3, #1]
 800c836:	2b03      	cmp	r3, #3
 800c838:	d007      	beq.n	800c84a <USBD_StdEPReq+0x7a>
 800c83a:	2b03      	cmp	r3, #3
 800c83c:	f300 811b 	bgt.w	800ca76 <USBD_StdEPReq+0x2a6>
 800c840:	2b00      	cmp	r3, #0
 800c842:	d072      	beq.n	800c92a <USBD_StdEPReq+0x15a>
 800c844:	2b01      	cmp	r3, #1
 800c846:	d03a      	beq.n	800c8be <USBD_StdEPReq+0xee>
 800c848:	e115      	b.n	800ca76 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c850:	2b02      	cmp	r3, #2
 800c852:	d002      	beq.n	800c85a <USBD_StdEPReq+0x8a>
 800c854:	2b03      	cmp	r3, #3
 800c856:	d015      	beq.n	800c884 <USBD_StdEPReq+0xb4>
 800c858:	e02b      	b.n	800c8b2 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c85a:	7bbb      	ldrb	r3, [r7, #14]
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d00c      	beq.n	800c87a <USBD_StdEPReq+0xaa>
 800c860:	7bbb      	ldrb	r3, [r7, #14]
 800c862:	2b80      	cmp	r3, #128	; 0x80
 800c864:	d009      	beq.n	800c87a <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800c866:	7bbb      	ldrb	r3, [r7, #14]
 800c868:	4619      	mov	r1, r3
 800c86a:	6878      	ldr	r0, [r7, #4]
 800c86c:	f001 f86a 	bl	800d944 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800c870:	2180      	movs	r1, #128	; 0x80
 800c872:	6878      	ldr	r0, [r7, #4]
 800c874:	f001 f866 	bl	800d944 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c878:	e020      	b.n	800c8bc <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800c87a:	6839      	ldr	r1, [r7, #0]
 800c87c:	6878      	ldr	r0, [r7, #4]
 800c87e:	f000 fc1f 	bl	800d0c0 <USBD_CtlError>
              break;
 800c882:	e01b      	b.n	800c8bc <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c884:	683b      	ldr	r3, [r7, #0]
 800c886:	885b      	ldrh	r3, [r3, #2]
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d10e      	bne.n	800c8aa <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800c88c:	7bbb      	ldrb	r3, [r7, #14]
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d00b      	beq.n	800c8aa <USBD_StdEPReq+0xda>
 800c892:	7bbb      	ldrb	r3, [r7, #14]
 800c894:	2b80      	cmp	r3, #128	; 0x80
 800c896:	d008      	beq.n	800c8aa <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c898:	683b      	ldr	r3, [r7, #0]
 800c89a:	88db      	ldrh	r3, [r3, #6]
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d104      	bne.n	800c8aa <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800c8a0:	7bbb      	ldrb	r3, [r7, #14]
 800c8a2:	4619      	mov	r1, r3
 800c8a4:	6878      	ldr	r0, [r7, #4]
 800c8a6:	f001 f84d 	bl	800d944 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800c8aa:	6878      	ldr	r0, [r7, #4]
 800c8ac:	f000 fcd1 	bl	800d252 <USBD_CtlSendStatus>

              break;
 800c8b0:	e004      	b.n	800c8bc <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800c8b2:	6839      	ldr	r1, [r7, #0]
 800c8b4:	6878      	ldr	r0, [r7, #4]
 800c8b6:	f000 fc03 	bl	800d0c0 <USBD_CtlError>
              break;
 800c8ba:	bf00      	nop
          }
          break;
 800c8bc:	e0e0      	b.n	800ca80 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c8c4:	2b02      	cmp	r3, #2
 800c8c6:	d002      	beq.n	800c8ce <USBD_StdEPReq+0xfe>
 800c8c8:	2b03      	cmp	r3, #3
 800c8ca:	d015      	beq.n	800c8f8 <USBD_StdEPReq+0x128>
 800c8cc:	e026      	b.n	800c91c <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c8ce:	7bbb      	ldrb	r3, [r7, #14]
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d00c      	beq.n	800c8ee <USBD_StdEPReq+0x11e>
 800c8d4:	7bbb      	ldrb	r3, [r7, #14]
 800c8d6:	2b80      	cmp	r3, #128	; 0x80
 800c8d8:	d009      	beq.n	800c8ee <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800c8da:	7bbb      	ldrb	r3, [r7, #14]
 800c8dc:	4619      	mov	r1, r3
 800c8de:	6878      	ldr	r0, [r7, #4]
 800c8e0:	f001 f830 	bl	800d944 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800c8e4:	2180      	movs	r1, #128	; 0x80
 800c8e6:	6878      	ldr	r0, [r7, #4]
 800c8e8:	f001 f82c 	bl	800d944 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c8ec:	e01c      	b.n	800c928 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800c8ee:	6839      	ldr	r1, [r7, #0]
 800c8f0:	6878      	ldr	r0, [r7, #4]
 800c8f2:	f000 fbe5 	bl	800d0c0 <USBD_CtlError>
              break;
 800c8f6:	e017      	b.n	800c928 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c8f8:	683b      	ldr	r3, [r7, #0]
 800c8fa:	885b      	ldrh	r3, [r3, #2]
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d112      	bne.n	800c926 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c900:	7bbb      	ldrb	r3, [r7, #14]
 800c902:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c906:	2b00      	cmp	r3, #0
 800c908:	d004      	beq.n	800c914 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800c90a:	7bbb      	ldrb	r3, [r7, #14]
 800c90c:	4619      	mov	r1, r3
 800c90e:	6878      	ldr	r0, [r7, #4]
 800c910:	f001 f837 	bl	800d982 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800c914:	6878      	ldr	r0, [r7, #4]
 800c916:	f000 fc9c 	bl	800d252 <USBD_CtlSendStatus>
              }
              break;
 800c91a:	e004      	b.n	800c926 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800c91c:	6839      	ldr	r1, [r7, #0]
 800c91e:	6878      	ldr	r0, [r7, #4]
 800c920:	f000 fbce 	bl	800d0c0 <USBD_CtlError>
              break;
 800c924:	e000      	b.n	800c928 <USBD_StdEPReq+0x158>
              break;
 800c926:	bf00      	nop
          }
          break;
 800c928:	e0aa      	b.n	800ca80 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c930:	2b02      	cmp	r3, #2
 800c932:	d002      	beq.n	800c93a <USBD_StdEPReq+0x16a>
 800c934:	2b03      	cmp	r3, #3
 800c936:	d032      	beq.n	800c99e <USBD_StdEPReq+0x1ce>
 800c938:	e097      	b.n	800ca6a <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c93a:	7bbb      	ldrb	r3, [r7, #14]
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d007      	beq.n	800c950 <USBD_StdEPReq+0x180>
 800c940:	7bbb      	ldrb	r3, [r7, #14]
 800c942:	2b80      	cmp	r3, #128	; 0x80
 800c944:	d004      	beq.n	800c950 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800c946:	6839      	ldr	r1, [r7, #0]
 800c948:	6878      	ldr	r0, [r7, #4]
 800c94a:	f000 fbb9 	bl	800d0c0 <USBD_CtlError>
                break;
 800c94e:	e091      	b.n	800ca74 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c950:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c954:	2b00      	cmp	r3, #0
 800c956:	da0b      	bge.n	800c970 <USBD_StdEPReq+0x1a0>
 800c958:	7bbb      	ldrb	r3, [r7, #14]
 800c95a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c95e:	4613      	mov	r3, r2
 800c960:	009b      	lsls	r3, r3, #2
 800c962:	4413      	add	r3, r2
 800c964:	009b      	lsls	r3, r3, #2
 800c966:	3310      	adds	r3, #16
 800c968:	687a      	ldr	r2, [r7, #4]
 800c96a:	4413      	add	r3, r2
 800c96c:	3304      	adds	r3, #4
 800c96e:	e00b      	b.n	800c988 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c970:	7bbb      	ldrb	r3, [r7, #14]
 800c972:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c976:	4613      	mov	r3, r2
 800c978:	009b      	lsls	r3, r3, #2
 800c97a:	4413      	add	r3, r2
 800c97c:	009b      	lsls	r3, r3, #2
 800c97e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c982:	687a      	ldr	r2, [r7, #4]
 800c984:	4413      	add	r3, r2
 800c986:	3304      	adds	r3, #4
 800c988:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c98a:	68bb      	ldr	r3, [r7, #8]
 800c98c:	2200      	movs	r2, #0
 800c98e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800c990:	68bb      	ldr	r3, [r7, #8]
 800c992:	2202      	movs	r2, #2
 800c994:	4619      	mov	r1, r3
 800c996:	6878      	ldr	r0, [r7, #4]
 800c998:	f000 fbfd 	bl	800d196 <USBD_CtlSendData>
              break;
 800c99c:	e06a      	b.n	800ca74 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c99e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	da11      	bge.n	800c9ca <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c9a6:	7bbb      	ldrb	r3, [r7, #14]
 800c9a8:	f003 020f 	and.w	r2, r3, #15
 800c9ac:	6879      	ldr	r1, [r7, #4]
 800c9ae:	4613      	mov	r3, r2
 800c9b0:	009b      	lsls	r3, r3, #2
 800c9b2:	4413      	add	r3, r2
 800c9b4:	009b      	lsls	r3, r3, #2
 800c9b6:	440b      	add	r3, r1
 800c9b8:	3318      	adds	r3, #24
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d117      	bne.n	800c9f0 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800c9c0:	6839      	ldr	r1, [r7, #0]
 800c9c2:	6878      	ldr	r0, [r7, #4]
 800c9c4:	f000 fb7c 	bl	800d0c0 <USBD_CtlError>
                  break;
 800c9c8:	e054      	b.n	800ca74 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c9ca:	7bbb      	ldrb	r3, [r7, #14]
 800c9cc:	f003 020f 	and.w	r2, r3, #15
 800c9d0:	6879      	ldr	r1, [r7, #4]
 800c9d2:	4613      	mov	r3, r2
 800c9d4:	009b      	lsls	r3, r3, #2
 800c9d6:	4413      	add	r3, r2
 800c9d8:	009b      	lsls	r3, r3, #2
 800c9da:	440b      	add	r3, r1
 800c9dc:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d104      	bne.n	800c9f0 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800c9e6:	6839      	ldr	r1, [r7, #0]
 800c9e8:	6878      	ldr	r0, [r7, #4]
 800c9ea:	f000 fb69 	bl	800d0c0 <USBD_CtlError>
                  break;
 800c9ee:	e041      	b.n	800ca74 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c9f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	da0b      	bge.n	800ca10 <USBD_StdEPReq+0x240>
 800c9f8:	7bbb      	ldrb	r3, [r7, #14]
 800c9fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c9fe:	4613      	mov	r3, r2
 800ca00:	009b      	lsls	r3, r3, #2
 800ca02:	4413      	add	r3, r2
 800ca04:	009b      	lsls	r3, r3, #2
 800ca06:	3310      	adds	r3, #16
 800ca08:	687a      	ldr	r2, [r7, #4]
 800ca0a:	4413      	add	r3, r2
 800ca0c:	3304      	adds	r3, #4
 800ca0e:	e00b      	b.n	800ca28 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ca10:	7bbb      	ldrb	r3, [r7, #14]
 800ca12:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ca16:	4613      	mov	r3, r2
 800ca18:	009b      	lsls	r3, r3, #2
 800ca1a:	4413      	add	r3, r2
 800ca1c:	009b      	lsls	r3, r3, #2
 800ca1e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ca22:	687a      	ldr	r2, [r7, #4]
 800ca24:	4413      	add	r3, r2
 800ca26:	3304      	adds	r3, #4
 800ca28:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ca2a:	7bbb      	ldrb	r3, [r7, #14]
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d002      	beq.n	800ca36 <USBD_StdEPReq+0x266>
 800ca30:	7bbb      	ldrb	r3, [r7, #14]
 800ca32:	2b80      	cmp	r3, #128	; 0x80
 800ca34:	d103      	bne.n	800ca3e <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800ca36:	68bb      	ldr	r3, [r7, #8]
 800ca38:	2200      	movs	r2, #0
 800ca3a:	601a      	str	r2, [r3, #0]
 800ca3c:	e00e      	b.n	800ca5c <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800ca3e:	7bbb      	ldrb	r3, [r7, #14]
 800ca40:	4619      	mov	r1, r3
 800ca42:	6878      	ldr	r0, [r7, #4]
 800ca44:	f000 ffbc 	bl	800d9c0 <USBD_LL_IsStallEP>
 800ca48:	4603      	mov	r3, r0
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d003      	beq.n	800ca56 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800ca4e:	68bb      	ldr	r3, [r7, #8]
 800ca50:	2201      	movs	r2, #1
 800ca52:	601a      	str	r2, [r3, #0]
 800ca54:	e002      	b.n	800ca5c <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800ca56:	68bb      	ldr	r3, [r7, #8]
 800ca58:	2200      	movs	r2, #0
 800ca5a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800ca5c:	68bb      	ldr	r3, [r7, #8]
 800ca5e:	2202      	movs	r2, #2
 800ca60:	4619      	mov	r1, r3
 800ca62:	6878      	ldr	r0, [r7, #4]
 800ca64:	f000 fb97 	bl	800d196 <USBD_CtlSendData>
              break;
 800ca68:	e004      	b.n	800ca74 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800ca6a:	6839      	ldr	r1, [r7, #0]
 800ca6c:	6878      	ldr	r0, [r7, #4]
 800ca6e:	f000 fb27 	bl	800d0c0 <USBD_CtlError>
              break;
 800ca72:	bf00      	nop
          }
          break;
 800ca74:	e004      	b.n	800ca80 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800ca76:	6839      	ldr	r1, [r7, #0]
 800ca78:	6878      	ldr	r0, [r7, #4]
 800ca7a:	f000 fb21 	bl	800d0c0 <USBD_CtlError>
          break;
 800ca7e:	bf00      	nop
      }
      break;
 800ca80:	e004      	b.n	800ca8c <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800ca82:	6839      	ldr	r1, [r7, #0]
 800ca84:	6878      	ldr	r0, [r7, #4]
 800ca86:	f000 fb1b 	bl	800d0c0 <USBD_CtlError>
      break;
 800ca8a:	bf00      	nop
  }

  return ret;
 800ca8c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca8e:	4618      	mov	r0, r3
 800ca90:	3710      	adds	r7, #16
 800ca92:	46bd      	mov	sp, r7
 800ca94:	bd80      	pop	{r7, pc}
	...

0800ca98 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800ca98:	b580      	push	{r7, lr}
 800ca9a:	b084      	sub	sp, #16
 800ca9c:	af00      	add	r7, sp, #0
 800ca9e:	6078      	str	r0, [r7, #4]
 800caa0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800caa2:	2300      	movs	r3, #0
 800caa4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800caa6:	2300      	movs	r3, #0
 800caa8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800caaa:	2300      	movs	r3, #0
 800caac:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800caae:	683b      	ldr	r3, [r7, #0]
 800cab0:	885b      	ldrh	r3, [r3, #2]
 800cab2:	0a1b      	lsrs	r3, r3, #8
 800cab4:	b29b      	uxth	r3, r3
 800cab6:	3b01      	subs	r3, #1
 800cab8:	2b06      	cmp	r3, #6
 800caba:	f200 8128 	bhi.w	800cd0e <USBD_GetDescriptor+0x276>
 800cabe:	a201      	add	r2, pc, #4	; (adr r2, 800cac4 <USBD_GetDescriptor+0x2c>)
 800cac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cac4:	0800cae1 	.word	0x0800cae1
 800cac8:	0800caf9 	.word	0x0800caf9
 800cacc:	0800cb39 	.word	0x0800cb39
 800cad0:	0800cd0f 	.word	0x0800cd0f
 800cad4:	0800cd0f 	.word	0x0800cd0f
 800cad8:	0800ccaf 	.word	0x0800ccaf
 800cadc:	0800ccdb 	.word	0x0800ccdb
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	687a      	ldr	r2, [r7, #4]
 800caea:	7c12      	ldrb	r2, [r2, #16]
 800caec:	f107 0108 	add.w	r1, r7, #8
 800caf0:	4610      	mov	r0, r2
 800caf2:	4798      	blx	r3
 800caf4:	60f8      	str	r0, [r7, #12]
      break;
 800caf6:	e112      	b.n	800cd1e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	7c1b      	ldrb	r3, [r3, #16]
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d10d      	bne.n	800cb1c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cb06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb08:	f107 0208 	add.w	r2, r7, #8
 800cb0c:	4610      	mov	r0, r2
 800cb0e:	4798      	blx	r3
 800cb10:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	3301      	adds	r3, #1
 800cb16:	2202      	movs	r2, #2
 800cb18:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800cb1a:	e100      	b.n	800cd1e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cb22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb24:	f107 0208 	add.w	r2, r7, #8
 800cb28:	4610      	mov	r0, r2
 800cb2a:	4798      	blx	r3
 800cb2c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	3301      	adds	r3, #1
 800cb32:	2202      	movs	r2, #2
 800cb34:	701a      	strb	r2, [r3, #0]
      break;
 800cb36:	e0f2      	b.n	800cd1e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800cb38:	683b      	ldr	r3, [r7, #0]
 800cb3a:	885b      	ldrh	r3, [r3, #2]
 800cb3c:	b2db      	uxtb	r3, r3
 800cb3e:	2b05      	cmp	r3, #5
 800cb40:	f200 80ac 	bhi.w	800cc9c <USBD_GetDescriptor+0x204>
 800cb44:	a201      	add	r2, pc, #4	; (adr r2, 800cb4c <USBD_GetDescriptor+0xb4>)
 800cb46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb4a:	bf00      	nop
 800cb4c:	0800cb65 	.word	0x0800cb65
 800cb50:	0800cb99 	.word	0x0800cb99
 800cb54:	0800cbcd 	.word	0x0800cbcd
 800cb58:	0800cc01 	.word	0x0800cc01
 800cb5c:	0800cc35 	.word	0x0800cc35
 800cb60:	0800cc69 	.word	0x0800cc69
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800cb6a:	685b      	ldr	r3, [r3, #4]
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d00b      	beq.n	800cb88 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800cb76:	685b      	ldr	r3, [r3, #4]
 800cb78:	687a      	ldr	r2, [r7, #4]
 800cb7a:	7c12      	ldrb	r2, [r2, #16]
 800cb7c:	f107 0108 	add.w	r1, r7, #8
 800cb80:	4610      	mov	r0, r2
 800cb82:	4798      	blx	r3
 800cb84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cb86:	e091      	b.n	800ccac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cb88:	6839      	ldr	r1, [r7, #0]
 800cb8a:	6878      	ldr	r0, [r7, #4]
 800cb8c:	f000 fa98 	bl	800d0c0 <USBD_CtlError>
            err++;
 800cb90:	7afb      	ldrb	r3, [r7, #11]
 800cb92:	3301      	adds	r3, #1
 800cb94:	72fb      	strb	r3, [r7, #11]
          break;
 800cb96:	e089      	b.n	800ccac <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800cb9e:	689b      	ldr	r3, [r3, #8]
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d00b      	beq.n	800cbbc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800cbaa:	689b      	ldr	r3, [r3, #8]
 800cbac:	687a      	ldr	r2, [r7, #4]
 800cbae:	7c12      	ldrb	r2, [r2, #16]
 800cbb0:	f107 0108 	add.w	r1, r7, #8
 800cbb4:	4610      	mov	r0, r2
 800cbb6:	4798      	blx	r3
 800cbb8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cbba:	e077      	b.n	800ccac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cbbc:	6839      	ldr	r1, [r7, #0]
 800cbbe:	6878      	ldr	r0, [r7, #4]
 800cbc0:	f000 fa7e 	bl	800d0c0 <USBD_CtlError>
            err++;
 800cbc4:	7afb      	ldrb	r3, [r7, #11]
 800cbc6:	3301      	adds	r3, #1
 800cbc8:	72fb      	strb	r3, [r7, #11]
          break;
 800cbca:	e06f      	b.n	800ccac <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800cbd2:	68db      	ldr	r3, [r3, #12]
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d00b      	beq.n	800cbf0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800cbde:	68db      	ldr	r3, [r3, #12]
 800cbe0:	687a      	ldr	r2, [r7, #4]
 800cbe2:	7c12      	ldrb	r2, [r2, #16]
 800cbe4:	f107 0108 	add.w	r1, r7, #8
 800cbe8:	4610      	mov	r0, r2
 800cbea:	4798      	blx	r3
 800cbec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cbee:	e05d      	b.n	800ccac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cbf0:	6839      	ldr	r1, [r7, #0]
 800cbf2:	6878      	ldr	r0, [r7, #4]
 800cbf4:	f000 fa64 	bl	800d0c0 <USBD_CtlError>
            err++;
 800cbf8:	7afb      	ldrb	r3, [r7, #11]
 800cbfa:	3301      	adds	r3, #1
 800cbfc:	72fb      	strb	r3, [r7, #11]
          break;
 800cbfe:	e055      	b.n	800ccac <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800cc06:	691b      	ldr	r3, [r3, #16]
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d00b      	beq.n	800cc24 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800cc12:	691b      	ldr	r3, [r3, #16]
 800cc14:	687a      	ldr	r2, [r7, #4]
 800cc16:	7c12      	ldrb	r2, [r2, #16]
 800cc18:	f107 0108 	add.w	r1, r7, #8
 800cc1c:	4610      	mov	r0, r2
 800cc1e:	4798      	blx	r3
 800cc20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cc22:	e043      	b.n	800ccac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cc24:	6839      	ldr	r1, [r7, #0]
 800cc26:	6878      	ldr	r0, [r7, #4]
 800cc28:	f000 fa4a 	bl	800d0c0 <USBD_CtlError>
            err++;
 800cc2c:	7afb      	ldrb	r3, [r7, #11]
 800cc2e:	3301      	adds	r3, #1
 800cc30:	72fb      	strb	r3, [r7, #11]
          break;
 800cc32:	e03b      	b.n	800ccac <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800cc3a:	695b      	ldr	r3, [r3, #20]
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d00b      	beq.n	800cc58 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800cc46:	695b      	ldr	r3, [r3, #20]
 800cc48:	687a      	ldr	r2, [r7, #4]
 800cc4a:	7c12      	ldrb	r2, [r2, #16]
 800cc4c:	f107 0108 	add.w	r1, r7, #8
 800cc50:	4610      	mov	r0, r2
 800cc52:	4798      	blx	r3
 800cc54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cc56:	e029      	b.n	800ccac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cc58:	6839      	ldr	r1, [r7, #0]
 800cc5a:	6878      	ldr	r0, [r7, #4]
 800cc5c:	f000 fa30 	bl	800d0c0 <USBD_CtlError>
            err++;
 800cc60:	7afb      	ldrb	r3, [r7, #11]
 800cc62:	3301      	adds	r3, #1
 800cc64:	72fb      	strb	r3, [r7, #11]
          break;
 800cc66:	e021      	b.n	800ccac <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800cc6e:	699b      	ldr	r3, [r3, #24]
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d00b      	beq.n	800cc8c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800cc7a:	699b      	ldr	r3, [r3, #24]
 800cc7c:	687a      	ldr	r2, [r7, #4]
 800cc7e:	7c12      	ldrb	r2, [r2, #16]
 800cc80:	f107 0108 	add.w	r1, r7, #8
 800cc84:	4610      	mov	r0, r2
 800cc86:	4798      	blx	r3
 800cc88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cc8a:	e00f      	b.n	800ccac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cc8c:	6839      	ldr	r1, [r7, #0]
 800cc8e:	6878      	ldr	r0, [r7, #4]
 800cc90:	f000 fa16 	bl	800d0c0 <USBD_CtlError>
            err++;
 800cc94:	7afb      	ldrb	r3, [r7, #11]
 800cc96:	3301      	adds	r3, #1
 800cc98:	72fb      	strb	r3, [r7, #11]
          break;
 800cc9a:	e007      	b.n	800ccac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800cc9c:	6839      	ldr	r1, [r7, #0]
 800cc9e:	6878      	ldr	r0, [r7, #4]
 800cca0:	f000 fa0e 	bl	800d0c0 <USBD_CtlError>
          err++;
 800cca4:	7afb      	ldrb	r3, [r7, #11]
 800cca6:	3301      	adds	r3, #1
 800cca8:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800ccaa:	e038      	b.n	800cd1e <USBD_GetDescriptor+0x286>
 800ccac:	e037      	b.n	800cd1e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	7c1b      	ldrb	r3, [r3, #16]
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d109      	bne.n	800ccca <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ccbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ccbe:	f107 0208 	add.w	r2, r7, #8
 800ccc2:	4610      	mov	r0, r2
 800ccc4:	4798      	blx	r3
 800ccc6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ccc8:	e029      	b.n	800cd1e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ccca:	6839      	ldr	r1, [r7, #0]
 800cccc:	6878      	ldr	r0, [r7, #4]
 800ccce:	f000 f9f7 	bl	800d0c0 <USBD_CtlError>
        err++;
 800ccd2:	7afb      	ldrb	r3, [r7, #11]
 800ccd4:	3301      	adds	r3, #1
 800ccd6:	72fb      	strb	r3, [r7, #11]
      break;
 800ccd8:	e021      	b.n	800cd1e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	7c1b      	ldrb	r3, [r3, #16]
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d10d      	bne.n	800ccfe <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ccea:	f107 0208 	add.w	r2, r7, #8
 800ccee:	4610      	mov	r0, r2
 800ccf0:	4798      	blx	r3
 800ccf2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ccf4:	68fb      	ldr	r3, [r7, #12]
 800ccf6:	3301      	adds	r3, #1
 800ccf8:	2207      	movs	r2, #7
 800ccfa:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ccfc:	e00f      	b.n	800cd1e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ccfe:	6839      	ldr	r1, [r7, #0]
 800cd00:	6878      	ldr	r0, [r7, #4]
 800cd02:	f000 f9dd 	bl	800d0c0 <USBD_CtlError>
        err++;
 800cd06:	7afb      	ldrb	r3, [r7, #11]
 800cd08:	3301      	adds	r3, #1
 800cd0a:	72fb      	strb	r3, [r7, #11]
      break;
 800cd0c:	e007      	b.n	800cd1e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800cd0e:	6839      	ldr	r1, [r7, #0]
 800cd10:	6878      	ldr	r0, [r7, #4]
 800cd12:	f000 f9d5 	bl	800d0c0 <USBD_CtlError>
      err++;
 800cd16:	7afb      	ldrb	r3, [r7, #11]
 800cd18:	3301      	adds	r3, #1
 800cd1a:	72fb      	strb	r3, [r7, #11]
      break;
 800cd1c:	bf00      	nop
  }

  if (err != 0U)
 800cd1e:	7afb      	ldrb	r3, [r7, #11]
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d11c      	bne.n	800cd5e <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800cd24:	893b      	ldrh	r3, [r7, #8]
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d011      	beq.n	800cd4e <USBD_GetDescriptor+0x2b6>
 800cd2a:	683b      	ldr	r3, [r7, #0]
 800cd2c:	88db      	ldrh	r3, [r3, #6]
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d00d      	beq.n	800cd4e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800cd32:	683b      	ldr	r3, [r7, #0]
 800cd34:	88da      	ldrh	r2, [r3, #6]
 800cd36:	893b      	ldrh	r3, [r7, #8]
 800cd38:	4293      	cmp	r3, r2
 800cd3a:	bf28      	it	cs
 800cd3c:	4613      	movcs	r3, r2
 800cd3e:	b29b      	uxth	r3, r3
 800cd40:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800cd42:	893b      	ldrh	r3, [r7, #8]
 800cd44:	461a      	mov	r2, r3
 800cd46:	68f9      	ldr	r1, [r7, #12]
 800cd48:	6878      	ldr	r0, [r7, #4]
 800cd4a:	f000 fa24 	bl	800d196 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800cd4e:	683b      	ldr	r3, [r7, #0]
 800cd50:	88db      	ldrh	r3, [r3, #6]
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d104      	bne.n	800cd60 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800cd56:	6878      	ldr	r0, [r7, #4]
 800cd58:	f000 fa7b 	bl	800d252 <USBD_CtlSendStatus>
 800cd5c:	e000      	b.n	800cd60 <USBD_GetDescriptor+0x2c8>
    return;
 800cd5e:	bf00      	nop
    }
  }
}
 800cd60:	3710      	adds	r7, #16
 800cd62:	46bd      	mov	sp, r7
 800cd64:	bd80      	pop	{r7, pc}
 800cd66:	bf00      	nop

0800cd68 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800cd68:	b580      	push	{r7, lr}
 800cd6a:	b084      	sub	sp, #16
 800cd6c:	af00      	add	r7, sp, #0
 800cd6e:	6078      	str	r0, [r7, #4]
 800cd70:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800cd72:	683b      	ldr	r3, [r7, #0]
 800cd74:	889b      	ldrh	r3, [r3, #4]
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d130      	bne.n	800cddc <USBD_SetAddress+0x74>
 800cd7a:	683b      	ldr	r3, [r7, #0]
 800cd7c:	88db      	ldrh	r3, [r3, #6]
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d12c      	bne.n	800cddc <USBD_SetAddress+0x74>
 800cd82:	683b      	ldr	r3, [r7, #0]
 800cd84:	885b      	ldrh	r3, [r3, #2]
 800cd86:	2b7f      	cmp	r3, #127	; 0x7f
 800cd88:	d828      	bhi.n	800cddc <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800cd8a:	683b      	ldr	r3, [r7, #0]
 800cd8c:	885b      	ldrh	r3, [r3, #2]
 800cd8e:	b2db      	uxtb	r3, r3
 800cd90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cd94:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cd9c:	2b03      	cmp	r3, #3
 800cd9e:	d104      	bne.n	800cdaa <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800cda0:	6839      	ldr	r1, [r7, #0]
 800cda2:	6878      	ldr	r0, [r7, #4]
 800cda4:	f000 f98c 	bl	800d0c0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cda8:	e01d      	b.n	800cde6 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	7bfa      	ldrb	r2, [r7, #15]
 800cdae:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800cdb2:	7bfb      	ldrb	r3, [r7, #15]
 800cdb4:	4619      	mov	r1, r3
 800cdb6:	6878      	ldr	r0, [r7, #4]
 800cdb8:	f000 fe2f 	bl	800da1a <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800cdbc:	6878      	ldr	r0, [r7, #4]
 800cdbe:	f000 fa48 	bl	800d252 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800cdc2:	7bfb      	ldrb	r3, [r7, #15]
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d004      	beq.n	800cdd2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	2202      	movs	r2, #2
 800cdcc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cdd0:	e009      	b.n	800cde6 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	2201      	movs	r2, #1
 800cdd6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cdda:	e004      	b.n	800cde6 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800cddc:	6839      	ldr	r1, [r7, #0]
 800cdde:	6878      	ldr	r0, [r7, #4]
 800cde0:	f000 f96e 	bl	800d0c0 <USBD_CtlError>
  }
}
 800cde4:	bf00      	nop
 800cde6:	bf00      	nop
 800cde8:	3710      	adds	r7, #16
 800cdea:	46bd      	mov	sp, r7
 800cdec:	bd80      	pop	{r7, pc}
	...

0800cdf0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cdf0:	b580      	push	{r7, lr}
 800cdf2:	b082      	sub	sp, #8
 800cdf4:	af00      	add	r7, sp, #0
 800cdf6:	6078      	str	r0, [r7, #4]
 800cdf8:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800cdfa:	683b      	ldr	r3, [r7, #0]
 800cdfc:	885b      	ldrh	r3, [r3, #2]
 800cdfe:	b2da      	uxtb	r2, r3
 800ce00:	4b41      	ldr	r3, [pc, #260]	; (800cf08 <USBD_SetConfig+0x118>)
 800ce02:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ce04:	4b40      	ldr	r3, [pc, #256]	; (800cf08 <USBD_SetConfig+0x118>)
 800ce06:	781b      	ldrb	r3, [r3, #0]
 800ce08:	2b01      	cmp	r3, #1
 800ce0a:	d904      	bls.n	800ce16 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800ce0c:	6839      	ldr	r1, [r7, #0]
 800ce0e:	6878      	ldr	r0, [r7, #4]
 800ce10:	f000 f956 	bl	800d0c0 <USBD_CtlError>
 800ce14:	e075      	b.n	800cf02 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ce1c:	2b02      	cmp	r3, #2
 800ce1e:	d002      	beq.n	800ce26 <USBD_SetConfig+0x36>
 800ce20:	2b03      	cmp	r3, #3
 800ce22:	d023      	beq.n	800ce6c <USBD_SetConfig+0x7c>
 800ce24:	e062      	b.n	800ceec <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800ce26:	4b38      	ldr	r3, [pc, #224]	; (800cf08 <USBD_SetConfig+0x118>)
 800ce28:	781b      	ldrb	r3, [r3, #0]
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d01a      	beq.n	800ce64 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800ce2e:	4b36      	ldr	r3, [pc, #216]	; (800cf08 <USBD_SetConfig+0x118>)
 800ce30:	781b      	ldrb	r3, [r3, #0]
 800ce32:	461a      	mov	r2, r3
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	2203      	movs	r2, #3
 800ce3c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800ce40:	4b31      	ldr	r3, [pc, #196]	; (800cf08 <USBD_SetConfig+0x118>)
 800ce42:	781b      	ldrb	r3, [r3, #0]
 800ce44:	4619      	mov	r1, r3
 800ce46:	6878      	ldr	r0, [r7, #4]
 800ce48:	f7ff f9e5 	bl	800c216 <USBD_SetClassConfig>
 800ce4c:	4603      	mov	r3, r0
 800ce4e:	2b02      	cmp	r3, #2
 800ce50:	d104      	bne.n	800ce5c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800ce52:	6839      	ldr	r1, [r7, #0]
 800ce54:	6878      	ldr	r0, [r7, #4]
 800ce56:	f000 f933 	bl	800d0c0 <USBD_CtlError>
            return;
 800ce5a:	e052      	b.n	800cf02 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800ce5c:	6878      	ldr	r0, [r7, #4]
 800ce5e:	f000 f9f8 	bl	800d252 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800ce62:	e04e      	b.n	800cf02 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800ce64:	6878      	ldr	r0, [r7, #4]
 800ce66:	f000 f9f4 	bl	800d252 <USBD_CtlSendStatus>
        break;
 800ce6a:	e04a      	b.n	800cf02 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800ce6c:	4b26      	ldr	r3, [pc, #152]	; (800cf08 <USBD_SetConfig+0x118>)
 800ce6e:	781b      	ldrb	r3, [r3, #0]
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d112      	bne.n	800ce9a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	2202      	movs	r2, #2
 800ce78:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800ce7c:	4b22      	ldr	r3, [pc, #136]	; (800cf08 <USBD_SetConfig+0x118>)
 800ce7e:	781b      	ldrb	r3, [r3, #0]
 800ce80:	461a      	mov	r2, r3
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800ce86:	4b20      	ldr	r3, [pc, #128]	; (800cf08 <USBD_SetConfig+0x118>)
 800ce88:	781b      	ldrb	r3, [r3, #0]
 800ce8a:	4619      	mov	r1, r3
 800ce8c:	6878      	ldr	r0, [r7, #4]
 800ce8e:	f7ff f9e1 	bl	800c254 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800ce92:	6878      	ldr	r0, [r7, #4]
 800ce94:	f000 f9dd 	bl	800d252 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800ce98:	e033      	b.n	800cf02 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800ce9a:	4b1b      	ldr	r3, [pc, #108]	; (800cf08 <USBD_SetConfig+0x118>)
 800ce9c:	781b      	ldrb	r3, [r3, #0]
 800ce9e:	461a      	mov	r2, r3
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	685b      	ldr	r3, [r3, #4]
 800cea4:	429a      	cmp	r2, r3
 800cea6:	d01d      	beq.n	800cee4 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	685b      	ldr	r3, [r3, #4]
 800ceac:	b2db      	uxtb	r3, r3
 800ceae:	4619      	mov	r1, r3
 800ceb0:	6878      	ldr	r0, [r7, #4]
 800ceb2:	f7ff f9cf 	bl	800c254 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800ceb6:	4b14      	ldr	r3, [pc, #80]	; (800cf08 <USBD_SetConfig+0x118>)
 800ceb8:	781b      	ldrb	r3, [r3, #0]
 800ceba:	461a      	mov	r2, r3
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800cec0:	4b11      	ldr	r3, [pc, #68]	; (800cf08 <USBD_SetConfig+0x118>)
 800cec2:	781b      	ldrb	r3, [r3, #0]
 800cec4:	4619      	mov	r1, r3
 800cec6:	6878      	ldr	r0, [r7, #4]
 800cec8:	f7ff f9a5 	bl	800c216 <USBD_SetClassConfig>
 800cecc:	4603      	mov	r3, r0
 800cece:	2b02      	cmp	r3, #2
 800ced0:	d104      	bne.n	800cedc <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800ced2:	6839      	ldr	r1, [r7, #0]
 800ced4:	6878      	ldr	r0, [r7, #4]
 800ced6:	f000 f8f3 	bl	800d0c0 <USBD_CtlError>
            return;
 800ceda:	e012      	b.n	800cf02 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800cedc:	6878      	ldr	r0, [r7, #4]
 800cede:	f000 f9b8 	bl	800d252 <USBD_CtlSendStatus>
        break;
 800cee2:	e00e      	b.n	800cf02 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800cee4:	6878      	ldr	r0, [r7, #4]
 800cee6:	f000 f9b4 	bl	800d252 <USBD_CtlSendStatus>
        break;
 800ceea:	e00a      	b.n	800cf02 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800ceec:	6839      	ldr	r1, [r7, #0]
 800ceee:	6878      	ldr	r0, [r7, #4]
 800cef0:	f000 f8e6 	bl	800d0c0 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800cef4:	4b04      	ldr	r3, [pc, #16]	; (800cf08 <USBD_SetConfig+0x118>)
 800cef6:	781b      	ldrb	r3, [r3, #0]
 800cef8:	4619      	mov	r1, r3
 800cefa:	6878      	ldr	r0, [r7, #4]
 800cefc:	f7ff f9aa 	bl	800c254 <USBD_ClrClassConfig>
        break;
 800cf00:	bf00      	nop
    }
  }
}
 800cf02:	3708      	adds	r7, #8
 800cf04:	46bd      	mov	sp, r7
 800cf06:	bd80      	pop	{r7, pc}
 800cf08:	20000248 	.word	0x20000248

0800cf0c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cf0c:	b580      	push	{r7, lr}
 800cf0e:	b082      	sub	sp, #8
 800cf10:	af00      	add	r7, sp, #0
 800cf12:	6078      	str	r0, [r7, #4]
 800cf14:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800cf16:	683b      	ldr	r3, [r7, #0]
 800cf18:	88db      	ldrh	r3, [r3, #6]
 800cf1a:	2b01      	cmp	r3, #1
 800cf1c:	d004      	beq.n	800cf28 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800cf1e:	6839      	ldr	r1, [r7, #0]
 800cf20:	6878      	ldr	r0, [r7, #4]
 800cf22:	f000 f8cd 	bl	800d0c0 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800cf26:	e022      	b.n	800cf6e <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cf2e:	2b02      	cmp	r3, #2
 800cf30:	dc02      	bgt.n	800cf38 <USBD_GetConfig+0x2c>
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	dc03      	bgt.n	800cf3e <USBD_GetConfig+0x32>
 800cf36:	e015      	b.n	800cf64 <USBD_GetConfig+0x58>
 800cf38:	2b03      	cmp	r3, #3
 800cf3a:	d00b      	beq.n	800cf54 <USBD_GetConfig+0x48>
 800cf3c:	e012      	b.n	800cf64 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	2200      	movs	r2, #0
 800cf42:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	3308      	adds	r3, #8
 800cf48:	2201      	movs	r2, #1
 800cf4a:	4619      	mov	r1, r3
 800cf4c:	6878      	ldr	r0, [r7, #4]
 800cf4e:	f000 f922 	bl	800d196 <USBD_CtlSendData>
        break;
 800cf52:	e00c      	b.n	800cf6e <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	3304      	adds	r3, #4
 800cf58:	2201      	movs	r2, #1
 800cf5a:	4619      	mov	r1, r3
 800cf5c:	6878      	ldr	r0, [r7, #4]
 800cf5e:	f000 f91a 	bl	800d196 <USBD_CtlSendData>
        break;
 800cf62:	e004      	b.n	800cf6e <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800cf64:	6839      	ldr	r1, [r7, #0]
 800cf66:	6878      	ldr	r0, [r7, #4]
 800cf68:	f000 f8aa 	bl	800d0c0 <USBD_CtlError>
        break;
 800cf6c:	bf00      	nop
}
 800cf6e:	bf00      	nop
 800cf70:	3708      	adds	r7, #8
 800cf72:	46bd      	mov	sp, r7
 800cf74:	bd80      	pop	{r7, pc}

0800cf76 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cf76:	b580      	push	{r7, lr}
 800cf78:	b082      	sub	sp, #8
 800cf7a:	af00      	add	r7, sp, #0
 800cf7c:	6078      	str	r0, [r7, #4]
 800cf7e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cf86:	3b01      	subs	r3, #1
 800cf88:	2b02      	cmp	r3, #2
 800cf8a:	d81e      	bhi.n	800cfca <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800cf8c:	683b      	ldr	r3, [r7, #0]
 800cf8e:	88db      	ldrh	r3, [r3, #6]
 800cf90:	2b02      	cmp	r3, #2
 800cf92:	d004      	beq.n	800cf9e <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800cf94:	6839      	ldr	r1, [r7, #0]
 800cf96:	6878      	ldr	r0, [r7, #4]
 800cf98:	f000 f892 	bl	800d0c0 <USBD_CtlError>
        break;
 800cf9c:	e01a      	b.n	800cfd4 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	2201      	movs	r2, #1
 800cfa2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d005      	beq.n	800cfba <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	68db      	ldr	r3, [r3, #12]
 800cfb2:	f043 0202 	orr.w	r2, r3, #2
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	330c      	adds	r3, #12
 800cfbe:	2202      	movs	r2, #2
 800cfc0:	4619      	mov	r1, r3
 800cfc2:	6878      	ldr	r0, [r7, #4]
 800cfc4:	f000 f8e7 	bl	800d196 <USBD_CtlSendData>
      break;
 800cfc8:	e004      	b.n	800cfd4 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800cfca:	6839      	ldr	r1, [r7, #0]
 800cfcc:	6878      	ldr	r0, [r7, #4]
 800cfce:	f000 f877 	bl	800d0c0 <USBD_CtlError>
      break;
 800cfd2:	bf00      	nop
  }
}
 800cfd4:	bf00      	nop
 800cfd6:	3708      	adds	r7, #8
 800cfd8:	46bd      	mov	sp, r7
 800cfda:	bd80      	pop	{r7, pc}

0800cfdc <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800cfdc:	b580      	push	{r7, lr}
 800cfde:	b082      	sub	sp, #8
 800cfe0:	af00      	add	r7, sp, #0
 800cfe2:	6078      	str	r0, [r7, #4]
 800cfe4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cfe6:	683b      	ldr	r3, [r7, #0]
 800cfe8:	885b      	ldrh	r3, [r3, #2]
 800cfea:	2b01      	cmp	r3, #1
 800cfec:	d106      	bne.n	800cffc <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	2201      	movs	r2, #1
 800cff2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800cff6:	6878      	ldr	r0, [r7, #4]
 800cff8:	f000 f92b 	bl	800d252 <USBD_CtlSendStatus>
  }
}
 800cffc:	bf00      	nop
 800cffe:	3708      	adds	r7, #8
 800d000:	46bd      	mov	sp, r7
 800d002:	bd80      	pop	{r7, pc}

0800d004 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800d004:	b580      	push	{r7, lr}
 800d006:	b082      	sub	sp, #8
 800d008:	af00      	add	r7, sp, #0
 800d00a:	6078      	str	r0, [r7, #4]
 800d00c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d014:	3b01      	subs	r3, #1
 800d016:	2b02      	cmp	r3, #2
 800d018:	d80b      	bhi.n	800d032 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d01a:	683b      	ldr	r3, [r7, #0]
 800d01c:	885b      	ldrh	r3, [r3, #2]
 800d01e:	2b01      	cmp	r3, #1
 800d020:	d10c      	bne.n	800d03c <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	2200      	movs	r2, #0
 800d026:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800d02a:	6878      	ldr	r0, [r7, #4]
 800d02c:	f000 f911 	bl	800d252 <USBD_CtlSendStatus>
      }
      break;
 800d030:	e004      	b.n	800d03c <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800d032:	6839      	ldr	r1, [r7, #0]
 800d034:	6878      	ldr	r0, [r7, #4]
 800d036:	f000 f843 	bl	800d0c0 <USBD_CtlError>
      break;
 800d03a:	e000      	b.n	800d03e <USBD_ClrFeature+0x3a>
      break;
 800d03c:	bf00      	nop
  }
}
 800d03e:	bf00      	nop
 800d040:	3708      	adds	r7, #8
 800d042:	46bd      	mov	sp, r7
 800d044:	bd80      	pop	{r7, pc}

0800d046 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800d046:	b480      	push	{r7}
 800d048:	b083      	sub	sp, #12
 800d04a:	af00      	add	r7, sp, #0
 800d04c:	6078      	str	r0, [r7, #4]
 800d04e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800d050:	683b      	ldr	r3, [r7, #0]
 800d052:	781a      	ldrb	r2, [r3, #0]
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800d058:	683b      	ldr	r3, [r7, #0]
 800d05a:	785a      	ldrb	r2, [r3, #1]
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800d060:	683b      	ldr	r3, [r7, #0]
 800d062:	3302      	adds	r3, #2
 800d064:	781b      	ldrb	r3, [r3, #0]
 800d066:	b29a      	uxth	r2, r3
 800d068:	683b      	ldr	r3, [r7, #0]
 800d06a:	3303      	adds	r3, #3
 800d06c:	781b      	ldrb	r3, [r3, #0]
 800d06e:	b29b      	uxth	r3, r3
 800d070:	021b      	lsls	r3, r3, #8
 800d072:	b29b      	uxth	r3, r3
 800d074:	4413      	add	r3, r2
 800d076:	b29a      	uxth	r2, r3
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800d07c:	683b      	ldr	r3, [r7, #0]
 800d07e:	3304      	adds	r3, #4
 800d080:	781b      	ldrb	r3, [r3, #0]
 800d082:	b29a      	uxth	r2, r3
 800d084:	683b      	ldr	r3, [r7, #0]
 800d086:	3305      	adds	r3, #5
 800d088:	781b      	ldrb	r3, [r3, #0]
 800d08a:	b29b      	uxth	r3, r3
 800d08c:	021b      	lsls	r3, r3, #8
 800d08e:	b29b      	uxth	r3, r3
 800d090:	4413      	add	r3, r2
 800d092:	b29a      	uxth	r2, r3
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800d098:	683b      	ldr	r3, [r7, #0]
 800d09a:	3306      	adds	r3, #6
 800d09c:	781b      	ldrb	r3, [r3, #0]
 800d09e:	b29a      	uxth	r2, r3
 800d0a0:	683b      	ldr	r3, [r7, #0]
 800d0a2:	3307      	adds	r3, #7
 800d0a4:	781b      	ldrb	r3, [r3, #0]
 800d0a6:	b29b      	uxth	r3, r3
 800d0a8:	021b      	lsls	r3, r3, #8
 800d0aa:	b29b      	uxth	r3, r3
 800d0ac:	4413      	add	r3, r2
 800d0ae:	b29a      	uxth	r2, r3
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	80da      	strh	r2, [r3, #6]

}
 800d0b4:	bf00      	nop
 800d0b6:	370c      	adds	r7, #12
 800d0b8:	46bd      	mov	sp, r7
 800d0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0be:	4770      	bx	lr

0800d0c0 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800d0c0:	b580      	push	{r7, lr}
 800d0c2:	b082      	sub	sp, #8
 800d0c4:	af00      	add	r7, sp, #0
 800d0c6:	6078      	str	r0, [r7, #4]
 800d0c8:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800d0ca:	2180      	movs	r1, #128	; 0x80
 800d0cc:	6878      	ldr	r0, [r7, #4]
 800d0ce:	f000 fc39 	bl	800d944 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800d0d2:	2100      	movs	r1, #0
 800d0d4:	6878      	ldr	r0, [r7, #4]
 800d0d6:	f000 fc35 	bl	800d944 <USBD_LL_StallEP>
}
 800d0da:	bf00      	nop
 800d0dc:	3708      	adds	r7, #8
 800d0de:	46bd      	mov	sp, r7
 800d0e0:	bd80      	pop	{r7, pc}

0800d0e2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800d0e2:	b580      	push	{r7, lr}
 800d0e4:	b086      	sub	sp, #24
 800d0e6:	af00      	add	r7, sp, #0
 800d0e8:	60f8      	str	r0, [r7, #12]
 800d0ea:	60b9      	str	r1, [r7, #8]
 800d0ec:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800d0ee:	2300      	movs	r3, #0
 800d0f0:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800d0f2:	68fb      	ldr	r3, [r7, #12]
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d032      	beq.n	800d15e <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800d0f8:	68f8      	ldr	r0, [r7, #12]
 800d0fa:	f000 f834 	bl	800d166 <USBD_GetLen>
 800d0fe:	4603      	mov	r3, r0
 800d100:	3301      	adds	r3, #1
 800d102:	b29b      	uxth	r3, r3
 800d104:	005b      	lsls	r3, r3, #1
 800d106:	b29a      	uxth	r2, r3
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800d10c:	7dfb      	ldrb	r3, [r7, #23]
 800d10e:	1c5a      	adds	r2, r3, #1
 800d110:	75fa      	strb	r2, [r7, #23]
 800d112:	461a      	mov	r2, r3
 800d114:	68bb      	ldr	r3, [r7, #8]
 800d116:	4413      	add	r3, r2
 800d118:	687a      	ldr	r2, [r7, #4]
 800d11a:	7812      	ldrb	r2, [r2, #0]
 800d11c:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800d11e:	7dfb      	ldrb	r3, [r7, #23]
 800d120:	1c5a      	adds	r2, r3, #1
 800d122:	75fa      	strb	r2, [r7, #23]
 800d124:	461a      	mov	r2, r3
 800d126:	68bb      	ldr	r3, [r7, #8]
 800d128:	4413      	add	r3, r2
 800d12a:	2203      	movs	r2, #3
 800d12c:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800d12e:	e012      	b.n	800d156 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800d130:	68fb      	ldr	r3, [r7, #12]
 800d132:	1c5a      	adds	r2, r3, #1
 800d134:	60fa      	str	r2, [r7, #12]
 800d136:	7dfa      	ldrb	r2, [r7, #23]
 800d138:	1c51      	adds	r1, r2, #1
 800d13a:	75f9      	strb	r1, [r7, #23]
 800d13c:	4611      	mov	r1, r2
 800d13e:	68ba      	ldr	r2, [r7, #8]
 800d140:	440a      	add	r2, r1
 800d142:	781b      	ldrb	r3, [r3, #0]
 800d144:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800d146:	7dfb      	ldrb	r3, [r7, #23]
 800d148:	1c5a      	adds	r2, r3, #1
 800d14a:	75fa      	strb	r2, [r7, #23]
 800d14c:	461a      	mov	r2, r3
 800d14e:	68bb      	ldr	r3, [r7, #8]
 800d150:	4413      	add	r3, r2
 800d152:	2200      	movs	r2, #0
 800d154:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800d156:	68fb      	ldr	r3, [r7, #12]
 800d158:	781b      	ldrb	r3, [r3, #0]
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d1e8      	bne.n	800d130 <USBD_GetString+0x4e>
    }
  }
}
 800d15e:	bf00      	nop
 800d160:	3718      	adds	r7, #24
 800d162:	46bd      	mov	sp, r7
 800d164:	bd80      	pop	{r7, pc}

0800d166 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800d166:	b480      	push	{r7}
 800d168:	b085      	sub	sp, #20
 800d16a:	af00      	add	r7, sp, #0
 800d16c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800d16e:	2300      	movs	r3, #0
 800d170:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800d172:	e005      	b.n	800d180 <USBD_GetLen+0x1a>
  {
    len++;
 800d174:	7bfb      	ldrb	r3, [r7, #15]
 800d176:	3301      	adds	r3, #1
 800d178:	73fb      	strb	r3, [r7, #15]
    buf++;
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	3301      	adds	r3, #1
 800d17e:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	781b      	ldrb	r3, [r3, #0]
 800d184:	2b00      	cmp	r3, #0
 800d186:	d1f5      	bne.n	800d174 <USBD_GetLen+0xe>
  }

  return len;
 800d188:	7bfb      	ldrb	r3, [r7, #15]
}
 800d18a:	4618      	mov	r0, r3
 800d18c:	3714      	adds	r7, #20
 800d18e:	46bd      	mov	sp, r7
 800d190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d194:	4770      	bx	lr

0800d196 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800d196:	b580      	push	{r7, lr}
 800d198:	b084      	sub	sp, #16
 800d19a:	af00      	add	r7, sp, #0
 800d19c:	60f8      	str	r0, [r7, #12]
 800d19e:	60b9      	str	r1, [r7, #8]
 800d1a0:	4613      	mov	r3, r2
 800d1a2:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d1a4:	68fb      	ldr	r3, [r7, #12]
 800d1a6:	2202      	movs	r2, #2
 800d1a8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800d1ac:	88fa      	ldrh	r2, [r7, #6]
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800d1b2:	88fa      	ldrh	r2, [r7, #6]
 800d1b4:	68fb      	ldr	r3, [r7, #12]
 800d1b6:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d1b8:	88fb      	ldrh	r3, [r7, #6]
 800d1ba:	68ba      	ldr	r2, [r7, #8]
 800d1bc:	2100      	movs	r1, #0
 800d1be:	68f8      	ldr	r0, [r7, #12]
 800d1c0:	f000 fc4a 	bl	800da58 <USBD_LL_Transmit>

  return USBD_OK;
 800d1c4:	2300      	movs	r3, #0
}
 800d1c6:	4618      	mov	r0, r3
 800d1c8:	3710      	adds	r7, #16
 800d1ca:	46bd      	mov	sp, r7
 800d1cc:	bd80      	pop	{r7, pc}

0800d1ce <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800d1ce:	b580      	push	{r7, lr}
 800d1d0:	b084      	sub	sp, #16
 800d1d2:	af00      	add	r7, sp, #0
 800d1d4:	60f8      	str	r0, [r7, #12]
 800d1d6:	60b9      	str	r1, [r7, #8]
 800d1d8:	4613      	mov	r3, r2
 800d1da:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d1dc:	88fb      	ldrh	r3, [r7, #6]
 800d1de:	68ba      	ldr	r2, [r7, #8]
 800d1e0:	2100      	movs	r1, #0
 800d1e2:	68f8      	ldr	r0, [r7, #12]
 800d1e4:	f000 fc38 	bl	800da58 <USBD_LL_Transmit>

  return USBD_OK;
 800d1e8:	2300      	movs	r3, #0
}
 800d1ea:	4618      	mov	r0, r3
 800d1ec:	3710      	adds	r7, #16
 800d1ee:	46bd      	mov	sp, r7
 800d1f0:	bd80      	pop	{r7, pc}

0800d1f2 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800d1f2:	b580      	push	{r7, lr}
 800d1f4:	b084      	sub	sp, #16
 800d1f6:	af00      	add	r7, sp, #0
 800d1f8:	60f8      	str	r0, [r7, #12]
 800d1fa:	60b9      	str	r1, [r7, #8]
 800d1fc:	4613      	mov	r3, r2
 800d1fe:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	2203      	movs	r2, #3
 800d204:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800d208:	88fa      	ldrh	r2, [r7, #6]
 800d20a:	68fb      	ldr	r3, [r7, #12]
 800d20c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800d210:	88fa      	ldrh	r2, [r7, #6]
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d218:	88fb      	ldrh	r3, [r7, #6]
 800d21a:	68ba      	ldr	r2, [r7, #8]
 800d21c:	2100      	movs	r1, #0
 800d21e:	68f8      	ldr	r0, [r7, #12]
 800d220:	f000 fc3d 	bl	800da9e <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d224:	2300      	movs	r3, #0
}
 800d226:	4618      	mov	r0, r3
 800d228:	3710      	adds	r7, #16
 800d22a:	46bd      	mov	sp, r7
 800d22c:	bd80      	pop	{r7, pc}

0800d22e <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800d22e:	b580      	push	{r7, lr}
 800d230:	b084      	sub	sp, #16
 800d232:	af00      	add	r7, sp, #0
 800d234:	60f8      	str	r0, [r7, #12]
 800d236:	60b9      	str	r1, [r7, #8]
 800d238:	4613      	mov	r3, r2
 800d23a:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d23c:	88fb      	ldrh	r3, [r7, #6]
 800d23e:	68ba      	ldr	r2, [r7, #8]
 800d240:	2100      	movs	r1, #0
 800d242:	68f8      	ldr	r0, [r7, #12]
 800d244:	f000 fc2b 	bl	800da9e <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d248:	2300      	movs	r3, #0
}
 800d24a:	4618      	mov	r0, r3
 800d24c:	3710      	adds	r7, #16
 800d24e:	46bd      	mov	sp, r7
 800d250:	bd80      	pop	{r7, pc}

0800d252 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800d252:	b580      	push	{r7, lr}
 800d254:	b082      	sub	sp, #8
 800d256:	af00      	add	r7, sp, #0
 800d258:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	2204      	movs	r2, #4
 800d25e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d262:	2300      	movs	r3, #0
 800d264:	2200      	movs	r2, #0
 800d266:	2100      	movs	r1, #0
 800d268:	6878      	ldr	r0, [r7, #4]
 800d26a:	f000 fbf5 	bl	800da58 <USBD_LL_Transmit>

  return USBD_OK;
 800d26e:	2300      	movs	r3, #0
}
 800d270:	4618      	mov	r0, r3
 800d272:	3708      	adds	r7, #8
 800d274:	46bd      	mov	sp, r7
 800d276:	bd80      	pop	{r7, pc}

0800d278 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800d278:	b580      	push	{r7, lr}
 800d27a:	b082      	sub	sp, #8
 800d27c:	af00      	add	r7, sp, #0
 800d27e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	2205      	movs	r2, #5
 800d284:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d288:	2300      	movs	r3, #0
 800d28a:	2200      	movs	r2, #0
 800d28c:	2100      	movs	r1, #0
 800d28e:	6878      	ldr	r0, [r7, #4]
 800d290:	f000 fc05 	bl	800da9e <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d294:	2300      	movs	r3, #0
}
 800d296:	4618      	mov	r0, r3
 800d298:	3708      	adds	r7, #8
 800d29a:	46bd      	mov	sp, r7
 800d29c:	bd80      	pop	{r7, pc}
	...

0800d2a0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800d2a0:	b580      	push	{r7, lr}
 800d2a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800d2a4:	2200      	movs	r2, #0
 800d2a6:	4912      	ldr	r1, [pc, #72]	; (800d2f0 <MX_USB_DEVICE_Init+0x50>)
 800d2a8:	4812      	ldr	r0, [pc, #72]	; (800d2f4 <MX_USB_DEVICE_Init+0x54>)
 800d2aa:	f7fe ff58 	bl	800c15e <USBD_Init>
 800d2ae:	4603      	mov	r3, r0
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d001      	beq.n	800d2b8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800d2b4:	f7f4 f81c 	bl	80012f0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800d2b8:	490f      	ldr	r1, [pc, #60]	; (800d2f8 <MX_USB_DEVICE_Init+0x58>)
 800d2ba:	480e      	ldr	r0, [pc, #56]	; (800d2f4 <MX_USB_DEVICE_Init+0x54>)
 800d2bc:	f7fe ff7a 	bl	800c1b4 <USBD_RegisterClass>
 800d2c0:	4603      	mov	r3, r0
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d001      	beq.n	800d2ca <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800d2c6:	f7f4 f813 	bl	80012f0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800d2ca:	490c      	ldr	r1, [pc, #48]	; (800d2fc <MX_USB_DEVICE_Init+0x5c>)
 800d2cc:	4809      	ldr	r0, [pc, #36]	; (800d2f4 <MX_USB_DEVICE_Init+0x54>)
 800d2ce:	f7fe fed7 	bl	800c080 <USBD_CDC_RegisterInterface>
 800d2d2:	4603      	mov	r3, r0
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d001      	beq.n	800d2dc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800d2d8:	f7f4 f80a 	bl	80012f0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800d2dc:	4805      	ldr	r0, [pc, #20]	; (800d2f4 <MX_USB_DEVICE_Init+0x54>)
 800d2de:	f7fe ff83 	bl	800c1e8 <USBD_Start>
 800d2e2:	4603      	mov	r3, r0
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d001      	beq.n	800d2ec <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800d2e8:	f7f4 f802 	bl	80012f0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800d2ec:	bf00      	nop
 800d2ee:	bd80      	pop	{r7, pc}
 800d2f0:	20000154 	.word	0x20000154
 800d2f4:	200006fc 	.word	0x200006fc
 800d2f8:	20000040 	.word	0x20000040
 800d2fc:	20000144 	.word	0x20000144

0800d300 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800d300:	b580      	push	{r7, lr}
 800d302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800d304:	2200      	movs	r2, #0
 800d306:	4905      	ldr	r1, [pc, #20]	; (800d31c <CDC_Init_FS+0x1c>)
 800d308:	4805      	ldr	r0, [pc, #20]	; (800d320 <CDC_Init_FS+0x20>)
 800d30a:	f7fe fed0 	bl	800c0ae <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800d30e:	4905      	ldr	r1, [pc, #20]	; (800d324 <CDC_Init_FS+0x24>)
 800d310:	4803      	ldr	r0, [pc, #12]	; (800d320 <CDC_Init_FS+0x20>)
 800d312:	f7fe fee6 	bl	800c0e2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800d316:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800d318:	4618      	mov	r0, r3
 800d31a:	bd80      	pop	{r7, pc}
 800d31c:	20000da8 	.word	0x20000da8
 800d320:	200006fc 	.word	0x200006fc
 800d324:	200009c0 	.word	0x200009c0

0800d328 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800d328:	b480      	push	{r7}
 800d32a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800d32c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800d32e:	4618      	mov	r0, r3
 800d330:	46bd      	mov	sp, r7
 800d332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d336:	4770      	bx	lr

0800d338 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800d338:	b480      	push	{r7}
 800d33a:	b083      	sub	sp, #12
 800d33c:	af00      	add	r7, sp, #0
 800d33e:	4603      	mov	r3, r0
 800d340:	6039      	str	r1, [r7, #0]
 800d342:	71fb      	strb	r3, [r7, #7]
 800d344:	4613      	mov	r3, r2
 800d346:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800d348:	79fb      	ldrb	r3, [r7, #7]
 800d34a:	2b23      	cmp	r3, #35	; 0x23
 800d34c:	d84a      	bhi.n	800d3e4 <CDC_Control_FS+0xac>
 800d34e:	a201      	add	r2, pc, #4	; (adr r2, 800d354 <CDC_Control_FS+0x1c>)
 800d350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d354:	0800d3e5 	.word	0x0800d3e5
 800d358:	0800d3e5 	.word	0x0800d3e5
 800d35c:	0800d3e5 	.word	0x0800d3e5
 800d360:	0800d3e5 	.word	0x0800d3e5
 800d364:	0800d3e5 	.word	0x0800d3e5
 800d368:	0800d3e5 	.word	0x0800d3e5
 800d36c:	0800d3e5 	.word	0x0800d3e5
 800d370:	0800d3e5 	.word	0x0800d3e5
 800d374:	0800d3e5 	.word	0x0800d3e5
 800d378:	0800d3e5 	.word	0x0800d3e5
 800d37c:	0800d3e5 	.word	0x0800d3e5
 800d380:	0800d3e5 	.word	0x0800d3e5
 800d384:	0800d3e5 	.word	0x0800d3e5
 800d388:	0800d3e5 	.word	0x0800d3e5
 800d38c:	0800d3e5 	.word	0x0800d3e5
 800d390:	0800d3e5 	.word	0x0800d3e5
 800d394:	0800d3e5 	.word	0x0800d3e5
 800d398:	0800d3e5 	.word	0x0800d3e5
 800d39c:	0800d3e5 	.word	0x0800d3e5
 800d3a0:	0800d3e5 	.word	0x0800d3e5
 800d3a4:	0800d3e5 	.word	0x0800d3e5
 800d3a8:	0800d3e5 	.word	0x0800d3e5
 800d3ac:	0800d3e5 	.word	0x0800d3e5
 800d3b0:	0800d3e5 	.word	0x0800d3e5
 800d3b4:	0800d3e5 	.word	0x0800d3e5
 800d3b8:	0800d3e5 	.word	0x0800d3e5
 800d3bc:	0800d3e5 	.word	0x0800d3e5
 800d3c0:	0800d3e5 	.word	0x0800d3e5
 800d3c4:	0800d3e5 	.word	0x0800d3e5
 800d3c8:	0800d3e5 	.word	0x0800d3e5
 800d3cc:	0800d3e5 	.word	0x0800d3e5
 800d3d0:	0800d3e5 	.word	0x0800d3e5
 800d3d4:	0800d3e5 	.word	0x0800d3e5
 800d3d8:	0800d3e5 	.word	0x0800d3e5
 800d3dc:	0800d3e5 	.word	0x0800d3e5
 800d3e0:	0800d3e5 	.word	0x0800d3e5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800d3e4:	bf00      	nop
  }

  return (USBD_OK);
 800d3e6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800d3e8:	4618      	mov	r0, r3
 800d3ea:	370c      	adds	r7, #12
 800d3ec:	46bd      	mov	sp, r7
 800d3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3f2:	4770      	bx	lr

0800d3f4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800d3f4:	b580      	push	{r7, lr}
 800d3f6:	b082      	sub	sp, #8
 800d3f8:	af00      	add	r7, sp, #0
 800d3fa:	6078      	str	r0, [r7, #4]
 800d3fc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800d3fe:	6879      	ldr	r1, [r7, #4]
 800d400:	4805      	ldr	r0, [pc, #20]	; (800d418 <CDC_Receive_FS+0x24>)
 800d402:	f7fe fe6e 	bl	800c0e2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800d406:	4804      	ldr	r0, [pc, #16]	; (800d418 <CDC_Receive_FS+0x24>)
 800d408:	f7fe fe7f 	bl	800c10a <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800d40c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800d40e:	4618      	mov	r0, r3
 800d410:	3708      	adds	r7, #8
 800d412:	46bd      	mov	sp, r7
 800d414:	bd80      	pop	{r7, pc}
 800d416:	bf00      	nop
 800d418:	200006fc 	.word	0x200006fc

0800d41c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d41c:	b480      	push	{r7}
 800d41e:	b083      	sub	sp, #12
 800d420:	af00      	add	r7, sp, #0
 800d422:	4603      	mov	r3, r0
 800d424:	6039      	str	r1, [r7, #0]
 800d426:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800d428:	683b      	ldr	r3, [r7, #0]
 800d42a:	2212      	movs	r2, #18
 800d42c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800d42e:	4b03      	ldr	r3, [pc, #12]	; (800d43c <USBD_FS_DeviceDescriptor+0x20>)
}
 800d430:	4618      	mov	r0, r3
 800d432:	370c      	adds	r7, #12
 800d434:	46bd      	mov	sp, r7
 800d436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d43a:	4770      	bx	lr
 800d43c:	20000170 	.word	0x20000170

0800d440 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d440:	b480      	push	{r7}
 800d442:	b083      	sub	sp, #12
 800d444:	af00      	add	r7, sp, #0
 800d446:	4603      	mov	r3, r0
 800d448:	6039      	str	r1, [r7, #0]
 800d44a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d44c:	683b      	ldr	r3, [r7, #0]
 800d44e:	2204      	movs	r2, #4
 800d450:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d452:	4b03      	ldr	r3, [pc, #12]	; (800d460 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800d454:	4618      	mov	r0, r3
 800d456:	370c      	adds	r7, #12
 800d458:	46bd      	mov	sp, r7
 800d45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d45e:	4770      	bx	lr
 800d460:	20000184 	.word	0x20000184

0800d464 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d464:	b580      	push	{r7, lr}
 800d466:	b082      	sub	sp, #8
 800d468:	af00      	add	r7, sp, #0
 800d46a:	4603      	mov	r3, r0
 800d46c:	6039      	str	r1, [r7, #0]
 800d46e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d470:	79fb      	ldrb	r3, [r7, #7]
 800d472:	2b00      	cmp	r3, #0
 800d474:	d105      	bne.n	800d482 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d476:	683a      	ldr	r2, [r7, #0]
 800d478:	4907      	ldr	r1, [pc, #28]	; (800d498 <USBD_FS_ProductStrDescriptor+0x34>)
 800d47a:	4808      	ldr	r0, [pc, #32]	; (800d49c <USBD_FS_ProductStrDescriptor+0x38>)
 800d47c:	f7ff fe31 	bl	800d0e2 <USBD_GetString>
 800d480:	e004      	b.n	800d48c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d482:	683a      	ldr	r2, [r7, #0]
 800d484:	4904      	ldr	r1, [pc, #16]	; (800d498 <USBD_FS_ProductStrDescriptor+0x34>)
 800d486:	4805      	ldr	r0, [pc, #20]	; (800d49c <USBD_FS_ProductStrDescriptor+0x38>)
 800d488:	f7ff fe2b 	bl	800d0e2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d48c:	4b02      	ldr	r3, [pc, #8]	; (800d498 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800d48e:	4618      	mov	r0, r3
 800d490:	3708      	adds	r7, #8
 800d492:	46bd      	mov	sp, r7
 800d494:	bd80      	pop	{r7, pc}
 800d496:	bf00      	nop
 800d498:	20001190 	.word	0x20001190
 800d49c:	0800dc9c 	.word	0x0800dc9c

0800d4a0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d4a0:	b580      	push	{r7, lr}
 800d4a2:	b082      	sub	sp, #8
 800d4a4:	af00      	add	r7, sp, #0
 800d4a6:	4603      	mov	r3, r0
 800d4a8:	6039      	str	r1, [r7, #0]
 800d4aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d4ac:	683a      	ldr	r2, [r7, #0]
 800d4ae:	4904      	ldr	r1, [pc, #16]	; (800d4c0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800d4b0:	4804      	ldr	r0, [pc, #16]	; (800d4c4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800d4b2:	f7ff fe16 	bl	800d0e2 <USBD_GetString>
  return USBD_StrDesc;
 800d4b6:	4b02      	ldr	r3, [pc, #8]	; (800d4c0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800d4b8:	4618      	mov	r0, r3
 800d4ba:	3708      	adds	r7, #8
 800d4bc:	46bd      	mov	sp, r7
 800d4be:	bd80      	pop	{r7, pc}
 800d4c0:	20001190 	.word	0x20001190
 800d4c4:	0800dcb4 	.word	0x0800dcb4

0800d4c8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d4c8:	b580      	push	{r7, lr}
 800d4ca:	b082      	sub	sp, #8
 800d4cc:	af00      	add	r7, sp, #0
 800d4ce:	4603      	mov	r3, r0
 800d4d0:	6039      	str	r1, [r7, #0]
 800d4d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d4d4:	683b      	ldr	r3, [r7, #0]
 800d4d6:	221a      	movs	r2, #26
 800d4d8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d4da:	f000 f843 	bl	800d564 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800d4de:	4b02      	ldr	r3, [pc, #8]	; (800d4e8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800d4e0:	4618      	mov	r0, r3
 800d4e2:	3708      	adds	r7, #8
 800d4e4:	46bd      	mov	sp, r7
 800d4e6:	bd80      	pop	{r7, pc}
 800d4e8:	20000188 	.word	0x20000188

0800d4ec <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d4ec:	b580      	push	{r7, lr}
 800d4ee:	b082      	sub	sp, #8
 800d4f0:	af00      	add	r7, sp, #0
 800d4f2:	4603      	mov	r3, r0
 800d4f4:	6039      	str	r1, [r7, #0]
 800d4f6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d4f8:	79fb      	ldrb	r3, [r7, #7]
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d105      	bne.n	800d50a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d4fe:	683a      	ldr	r2, [r7, #0]
 800d500:	4907      	ldr	r1, [pc, #28]	; (800d520 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d502:	4808      	ldr	r0, [pc, #32]	; (800d524 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d504:	f7ff fded 	bl	800d0e2 <USBD_GetString>
 800d508:	e004      	b.n	800d514 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d50a:	683a      	ldr	r2, [r7, #0]
 800d50c:	4904      	ldr	r1, [pc, #16]	; (800d520 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d50e:	4805      	ldr	r0, [pc, #20]	; (800d524 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d510:	f7ff fde7 	bl	800d0e2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d514:	4b02      	ldr	r3, [pc, #8]	; (800d520 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800d516:	4618      	mov	r0, r3
 800d518:	3708      	adds	r7, #8
 800d51a:	46bd      	mov	sp, r7
 800d51c:	bd80      	pop	{r7, pc}
 800d51e:	bf00      	nop
 800d520:	20001190 	.word	0x20001190
 800d524:	0800dcc8 	.word	0x0800dcc8

0800d528 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d528:	b580      	push	{r7, lr}
 800d52a:	b082      	sub	sp, #8
 800d52c:	af00      	add	r7, sp, #0
 800d52e:	4603      	mov	r3, r0
 800d530:	6039      	str	r1, [r7, #0]
 800d532:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d534:	79fb      	ldrb	r3, [r7, #7]
 800d536:	2b00      	cmp	r3, #0
 800d538:	d105      	bne.n	800d546 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d53a:	683a      	ldr	r2, [r7, #0]
 800d53c:	4907      	ldr	r1, [pc, #28]	; (800d55c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d53e:	4808      	ldr	r0, [pc, #32]	; (800d560 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d540:	f7ff fdcf 	bl	800d0e2 <USBD_GetString>
 800d544:	e004      	b.n	800d550 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d546:	683a      	ldr	r2, [r7, #0]
 800d548:	4904      	ldr	r1, [pc, #16]	; (800d55c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d54a:	4805      	ldr	r0, [pc, #20]	; (800d560 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d54c:	f7ff fdc9 	bl	800d0e2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d550:	4b02      	ldr	r3, [pc, #8]	; (800d55c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800d552:	4618      	mov	r0, r3
 800d554:	3708      	adds	r7, #8
 800d556:	46bd      	mov	sp, r7
 800d558:	bd80      	pop	{r7, pc}
 800d55a:	bf00      	nop
 800d55c:	20001190 	.word	0x20001190
 800d560:	0800dcd4 	.word	0x0800dcd4

0800d564 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d564:	b580      	push	{r7, lr}
 800d566:	b084      	sub	sp, #16
 800d568:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d56a:	4b0f      	ldr	r3, [pc, #60]	; (800d5a8 <Get_SerialNum+0x44>)
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d570:	4b0e      	ldr	r3, [pc, #56]	; (800d5ac <Get_SerialNum+0x48>)
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d576:	4b0e      	ldr	r3, [pc, #56]	; (800d5b0 <Get_SerialNum+0x4c>)
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d57c:	68fa      	ldr	r2, [r7, #12]
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	4413      	add	r3, r2
 800d582:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	2b00      	cmp	r3, #0
 800d588:	d009      	beq.n	800d59e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d58a:	2208      	movs	r2, #8
 800d58c:	4909      	ldr	r1, [pc, #36]	; (800d5b4 <Get_SerialNum+0x50>)
 800d58e:	68f8      	ldr	r0, [r7, #12]
 800d590:	f000 f814 	bl	800d5bc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d594:	2204      	movs	r2, #4
 800d596:	4908      	ldr	r1, [pc, #32]	; (800d5b8 <Get_SerialNum+0x54>)
 800d598:	68b8      	ldr	r0, [r7, #8]
 800d59a:	f000 f80f 	bl	800d5bc <IntToUnicode>
  }
}
 800d59e:	bf00      	nop
 800d5a0:	3710      	adds	r7, #16
 800d5a2:	46bd      	mov	sp, r7
 800d5a4:	bd80      	pop	{r7, pc}
 800d5a6:	bf00      	nop
 800d5a8:	1ffff7ac 	.word	0x1ffff7ac
 800d5ac:	1ffff7b0 	.word	0x1ffff7b0
 800d5b0:	1ffff7b4 	.word	0x1ffff7b4
 800d5b4:	2000018a 	.word	0x2000018a
 800d5b8:	2000019a 	.word	0x2000019a

0800d5bc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d5bc:	b480      	push	{r7}
 800d5be:	b087      	sub	sp, #28
 800d5c0:	af00      	add	r7, sp, #0
 800d5c2:	60f8      	str	r0, [r7, #12]
 800d5c4:	60b9      	str	r1, [r7, #8]
 800d5c6:	4613      	mov	r3, r2
 800d5c8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d5ca:	2300      	movs	r3, #0
 800d5cc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d5ce:	2300      	movs	r3, #0
 800d5d0:	75fb      	strb	r3, [r7, #23]
 800d5d2:	e027      	b.n	800d624 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	0f1b      	lsrs	r3, r3, #28
 800d5d8:	2b09      	cmp	r3, #9
 800d5da:	d80b      	bhi.n	800d5f4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	0f1b      	lsrs	r3, r3, #28
 800d5e0:	b2da      	uxtb	r2, r3
 800d5e2:	7dfb      	ldrb	r3, [r7, #23]
 800d5e4:	005b      	lsls	r3, r3, #1
 800d5e6:	4619      	mov	r1, r3
 800d5e8:	68bb      	ldr	r3, [r7, #8]
 800d5ea:	440b      	add	r3, r1
 800d5ec:	3230      	adds	r2, #48	; 0x30
 800d5ee:	b2d2      	uxtb	r2, r2
 800d5f0:	701a      	strb	r2, [r3, #0]
 800d5f2:	e00a      	b.n	800d60a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	0f1b      	lsrs	r3, r3, #28
 800d5f8:	b2da      	uxtb	r2, r3
 800d5fa:	7dfb      	ldrb	r3, [r7, #23]
 800d5fc:	005b      	lsls	r3, r3, #1
 800d5fe:	4619      	mov	r1, r3
 800d600:	68bb      	ldr	r3, [r7, #8]
 800d602:	440b      	add	r3, r1
 800d604:	3237      	adds	r2, #55	; 0x37
 800d606:	b2d2      	uxtb	r2, r2
 800d608:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d60a:	68fb      	ldr	r3, [r7, #12]
 800d60c:	011b      	lsls	r3, r3, #4
 800d60e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d610:	7dfb      	ldrb	r3, [r7, #23]
 800d612:	005b      	lsls	r3, r3, #1
 800d614:	3301      	adds	r3, #1
 800d616:	68ba      	ldr	r2, [r7, #8]
 800d618:	4413      	add	r3, r2
 800d61a:	2200      	movs	r2, #0
 800d61c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d61e:	7dfb      	ldrb	r3, [r7, #23]
 800d620:	3301      	adds	r3, #1
 800d622:	75fb      	strb	r3, [r7, #23]
 800d624:	7dfa      	ldrb	r2, [r7, #23]
 800d626:	79fb      	ldrb	r3, [r7, #7]
 800d628:	429a      	cmp	r2, r3
 800d62a:	d3d3      	bcc.n	800d5d4 <IntToUnicode+0x18>
  }
}
 800d62c:	bf00      	nop
 800d62e:	bf00      	nop
 800d630:	371c      	adds	r7, #28
 800d632:	46bd      	mov	sp, r7
 800d634:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d638:	4770      	bx	lr
	...

0800d63c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d63c:	b580      	push	{r7, lr}
 800d63e:	b084      	sub	sp, #16
 800d640:	af00      	add	r7, sp, #0
 800d642:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	4a10      	ldr	r2, [pc, #64]	; (800d68c <HAL_PCD_MspInit+0x50>)
 800d64a:	4293      	cmp	r3, r2
 800d64c:	d119      	bne.n	800d682 <HAL_PCD_MspInit+0x46>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800d64e:	4b10      	ldr	r3, [pc, #64]	; (800d690 <HAL_PCD_MspInit+0x54>)
 800d650:	69db      	ldr	r3, [r3, #28]
 800d652:	4a0f      	ldr	r2, [pc, #60]	; (800d690 <HAL_PCD_MspInit+0x54>)
 800d654:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d658:	61d3      	str	r3, [r2, #28]
 800d65a:	4b0d      	ldr	r3, [pc, #52]	; (800d690 <HAL_PCD_MspInit+0x54>)
 800d65c:	69db      	ldr	r3, [r3, #28]
 800d65e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d662:	60fb      	str	r3, [r7, #12]
 800d664:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    __HAL_REMAPINTERRUPT_USB_ENABLE();
 800d666:	4b0b      	ldr	r3, [pc, #44]	; (800d694 <HAL_PCD_MspInit+0x58>)
 800d668:	681b      	ldr	r3, [r3, #0]
 800d66a:	4a0a      	ldr	r2, [pc, #40]	; (800d694 <HAL_PCD_MspInit+0x58>)
 800d66c:	f043 0320 	orr.w	r3, r3, #32
 800d670:	6013      	str	r3, [r2, #0]
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800d672:	2200      	movs	r2, #0
 800d674:	2100      	movs	r1, #0
 800d676:	204b      	movs	r0, #75	; 0x4b
 800d678:	f7f6 fb2f 	bl	8003cda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800d67c:	204b      	movs	r0, #75	; 0x4b
 800d67e:	f7f6 fb48 	bl	8003d12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800d682:	bf00      	nop
 800d684:	3710      	adds	r7, #16
 800d686:	46bd      	mov	sp, r7
 800d688:	bd80      	pop	{r7, pc}
 800d68a:	bf00      	nop
 800d68c:	40005c00 	.word	0x40005c00
 800d690:	40021000 	.word	0x40021000
 800d694:	40010000 	.word	0x40010000

0800d698 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d698:	b580      	push	{r7, lr}
 800d69a:	b082      	sub	sp, #8
 800d69c:	af00      	add	r7, sp, #0
 800d69e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800d6ac:	4619      	mov	r1, r3
 800d6ae:	4610      	mov	r0, r2
 800d6b0:	f7fe fde3 	bl	800c27a <USBD_LL_SetupStage>
}
 800d6b4:	bf00      	nop
 800d6b6:	3708      	adds	r7, #8
 800d6b8:	46bd      	mov	sp, r7
 800d6ba:	bd80      	pop	{r7, pc}

0800d6bc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d6bc:	b580      	push	{r7, lr}
 800d6be:	b082      	sub	sp, #8
 800d6c0:	af00      	add	r7, sp, #0
 800d6c2:	6078      	str	r0, [r7, #4]
 800d6c4:	460b      	mov	r3, r1
 800d6c6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800d6ce:	78fa      	ldrb	r2, [r7, #3]
 800d6d0:	6879      	ldr	r1, [r7, #4]
 800d6d2:	4613      	mov	r3, r2
 800d6d4:	009b      	lsls	r3, r3, #2
 800d6d6:	4413      	add	r3, r2
 800d6d8:	00db      	lsls	r3, r3, #3
 800d6da:	440b      	add	r3, r1
 800d6dc:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800d6e0:	681a      	ldr	r2, [r3, #0]
 800d6e2:	78fb      	ldrb	r3, [r7, #3]
 800d6e4:	4619      	mov	r1, r3
 800d6e6:	f7fe fe15 	bl	800c314 <USBD_LL_DataOutStage>
}
 800d6ea:	bf00      	nop
 800d6ec:	3708      	adds	r7, #8
 800d6ee:	46bd      	mov	sp, r7
 800d6f0:	bd80      	pop	{r7, pc}

0800d6f2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d6f2:	b580      	push	{r7, lr}
 800d6f4:	b082      	sub	sp, #8
 800d6f6:	af00      	add	r7, sp, #0
 800d6f8:	6078      	str	r0, [r7, #4]
 800d6fa:	460b      	mov	r3, r1
 800d6fc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800d704:	78fa      	ldrb	r2, [r7, #3]
 800d706:	6879      	ldr	r1, [r7, #4]
 800d708:	4613      	mov	r3, r2
 800d70a:	009b      	lsls	r3, r3, #2
 800d70c:	4413      	add	r3, r2
 800d70e:	00db      	lsls	r3, r3, #3
 800d710:	440b      	add	r3, r1
 800d712:	333c      	adds	r3, #60	; 0x3c
 800d714:	681a      	ldr	r2, [r3, #0]
 800d716:	78fb      	ldrb	r3, [r7, #3]
 800d718:	4619      	mov	r1, r3
 800d71a:	f7fe fe6c 	bl	800c3f6 <USBD_LL_DataInStage>
}
 800d71e:	bf00      	nop
 800d720:	3708      	adds	r7, #8
 800d722:	46bd      	mov	sp, r7
 800d724:	bd80      	pop	{r7, pc}

0800d726 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d726:	b580      	push	{r7, lr}
 800d728:	b082      	sub	sp, #8
 800d72a:	af00      	add	r7, sp, #0
 800d72c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800d734:	4618      	mov	r0, r3
 800d736:	f7fe ff7f 	bl	800c638 <USBD_LL_SOF>
}
 800d73a:	bf00      	nop
 800d73c:	3708      	adds	r7, #8
 800d73e:	46bd      	mov	sp, r7
 800d740:	bd80      	pop	{r7, pc}

0800d742 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d742:	b580      	push	{r7, lr}
 800d744:	b084      	sub	sp, #16
 800d746:	af00      	add	r7, sp, #0
 800d748:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d74a:	2301      	movs	r3, #1
 800d74c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	689b      	ldr	r3, [r3, #8]
 800d752:	2b02      	cmp	r3, #2
 800d754:	d001      	beq.n	800d75a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800d756:	f7f3 fdcb 	bl	80012f0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800d760:	7bfa      	ldrb	r2, [r7, #15]
 800d762:	4611      	mov	r1, r2
 800d764:	4618      	mov	r0, r3
 800d766:	f7fe ff2c 	bl	800c5c2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800d770:	4618      	mov	r0, r3
 800d772:	f7fe fee5 	bl	800c540 <USBD_LL_Reset>
}
 800d776:	bf00      	nop
 800d778:	3710      	adds	r7, #16
 800d77a:	46bd      	mov	sp, r7
 800d77c:	bd80      	pop	{r7, pc}
	...

0800d780 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d780:	b580      	push	{r7, lr}
 800d782:	b082      	sub	sp, #8
 800d784:	af00      	add	r7, sp, #0
 800d786:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800d78e:	4618      	mov	r0, r3
 800d790:	f7fe ff27 	bl	800c5e2 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	699b      	ldr	r3, [r3, #24]
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d005      	beq.n	800d7a8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d79c:	4b04      	ldr	r3, [pc, #16]	; (800d7b0 <HAL_PCD_SuspendCallback+0x30>)
 800d79e:	691b      	ldr	r3, [r3, #16]
 800d7a0:	4a03      	ldr	r2, [pc, #12]	; (800d7b0 <HAL_PCD_SuspendCallback+0x30>)
 800d7a2:	f043 0306 	orr.w	r3, r3, #6
 800d7a6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d7a8:	bf00      	nop
 800d7aa:	3708      	adds	r7, #8
 800d7ac:	46bd      	mov	sp, r7
 800d7ae:	bd80      	pop	{r7, pc}
 800d7b0:	e000ed00 	.word	0xe000ed00

0800d7b4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d7b4:	b580      	push	{r7, lr}
 800d7b6:	b082      	sub	sp, #8
 800d7b8:	af00      	add	r7, sp, #0
 800d7ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800d7c2:	4618      	mov	r0, r3
 800d7c4:	f7fe ff22 	bl	800c60c <USBD_LL_Resume>
}
 800d7c8:	bf00      	nop
 800d7ca:	3708      	adds	r7, #8
 800d7cc:	46bd      	mov	sp, r7
 800d7ce:	bd80      	pop	{r7, pc}

0800d7d0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d7d0:	b580      	push	{r7, lr}
 800d7d2:	b082      	sub	sp, #8
 800d7d4:	af00      	add	r7, sp, #0
 800d7d6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800d7d8:	4a28      	ldr	r2, [pc, #160]	; (800d87c <USBD_LL_Init+0xac>)
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	4a26      	ldr	r2, [pc, #152]	; (800d87c <USBD_LL_Init+0xac>)
 800d7e4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800d7e8:	4b24      	ldr	r3, [pc, #144]	; (800d87c <USBD_LL_Init+0xac>)
 800d7ea:	4a25      	ldr	r2, [pc, #148]	; (800d880 <USBD_LL_Init+0xb0>)
 800d7ec:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800d7ee:	4b23      	ldr	r3, [pc, #140]	; (800d87c <USBD_LL_Init+0xac>)
 800d7f0:	2208      	movs	r2, #8
 800d7f2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800d7f4:	4b21      	ldr	r3, [pc, #132]	; (800d87c <USBD_LL_Init+0xac>)
 800d7f6:	2202      	movs	r2, #2
 800d7f8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d7fa:	4b20      	ldr	r3, [pc, #128]	; (800d87c <USBD_LL_Init+0xac>)
 800d7fc:	2202      	movs	r2, #2
 800d7fe:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800d800:	4b1e      	ldr	r3, [pc, #120]	; (800d87c <USBD_LL_Init+0xac>)
 800d802:	2200      	movs	r2, #0
 800d804:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800d806:	4b1d      	ldr	r3, [pc, #116]	; (800d87c <USBD_LL_Init+0xac>)
 800d808:	2200      	movs	r2, #0
 800d80a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800d80c:	481b      	ldr	r0, [pc, #108]	; (800d87c <USBD_LL_Init+0xac>)
 800d80e:	f7f6 ff8b 	bl	8004728 <HAL_PCD_Init>
 800d812:	4603      	mov	r3, r0
 800d814:	2b00      	cmp	r3, #0
 800d816:	d001      	beq.n	800d81c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800d818:	f7f3 fd6a 	bl	80012f0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d822:	2318      	movs	r3, #24
 800d824:	2200      	movs	r2, #0
 800d826:	2100      	movs	r1, #0
 800d828:	f7f8 fc10 	bl	800604c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d832:	2358      	movs	r3, #88	; 0x58
 800d834:	2200      	movs	r2, #0
 800d836:	2180      	movs	r1, #128	; 0x80
 800d838:	f7f8 fc08 	bl	800604c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d842:	23c0      	movs	r3, #192	; 0xc0
 800d844:	2200      	movs	r2, #0
 800d846:	2181      	movs	r1, #129	; 0x81
 800d848:	f7f8 fc00 	bl	800604c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d852:	f44f 7388 	mov.w	r3, #272	; 0x110
 800d856:	2200      	movs	r2, #0
 800d858:	2101      	movs	r1, #1
 800d85a:	f7f8 fbf7 	bl	800604c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d864:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d868:	2200      	movs	r2, #0
 800d86a:	2182      	movs	r1, #130	; 0x82
 800d86c:	f7f8 fbee 	bl	800604c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800d870:	2300      	movs	r3, #0
}
 800d872:	4618      	mov	r0, r3
 800d874:	3708      	adds	r7, #8
 800d876:	46bd      	mov	sp, r7
 800d878:	bd80      	pop	{r7, pc}
 800d87a:	bf00      	nop
 800d87c:	20001390 	.word	0x20001390
 800d880:	40005c00 	.word	0x40005c00

0800d884 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d884:	b580      	push	{r7, lr}
 800d886:	b084      	sub	sp, #16
 800d888:	af00      	add	r7, sp, #0
 800d88a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d88c:	2300      	movs	r3, #0
 800d88e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d890:	2300      	movs	r3, #0
 800d892:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d89a:	4618      	mov	r0, r3
 800d89c:	f7f7 f822 	bl	80048e4 <HAL_PCD_Start>
 800d8a0:	4603      	mov	r3, r0
 800d8a2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d8a4:	7bfb      	ldrb	r3, [r7, #15]
 800d8a6:	4618      	mov	r0, r3
 800d8a8:	f000 f954 	bl	800db54 <USBD_Get_USB_Status>
 800d8ac:	4603      	mov	r3, r0
 800d8ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d8b0:	7bbb      	ldrb	r3, [r7, #14]
}
 800d8b2:	4618      	mov	r0, r3
 800d8b4:	3710      	adds	r7, #16
 800d8b6:	46bd      	mov	sp, r7
 800d8b8:	bd80      	pop	{r7, pc}

0800d8ba <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d8ba:	b580      	push	{r7, lr}
 800d8bc:	b084      	sub	sp, #16
 800d8be:	af00      	add	r7, sp, #0
 800d8c0:	6078      	str	r0, [r7, #4]
 800d8c2:	4608      	mov	r0, r1
 800d8c4:	4611      	mov	r1, r2
 800d8c6:	461a      	mov	r2, r3
 800d8c8:	4603      	mov	r3, r0
 800d8ca:	70fb      	strb	r3, [r7, #3]
 800d8cc:	460b      	mov	r3, r1
 800d8ce:	70bb      	strb	r3, [r7, #2]
 800d8d0:	4613      	mov	r3, r2
 800d8d2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d8d4:	2300      	movs	r3, #0
 800d8d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d8d8:	2300      	movs	r3, #0
 800d8da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d8e2:	78bb      	ldrb	r3, [r7, #2]
 800d8e4:	883a      	ldrh	r2, [r7, #0]
 800d8e6:	78f9      	ldrb	r1, [r7, #3]
 800d8e8:	f7f7 f93e 	bl	8004b68 <HAL_PCD_EP_Open>
 800d8ec:	4603      	mov	r3, r0
 800d8ee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d8f0:	7bfb      	ldrb	r3, [r7, #15]
 800d8f2:	4618      	mov	r0, r3
 800d8f4:	f000 f92e 	bl	800db54 <USBD_Get_USB_Status>
 800d8f8:	4603      	mov	r3, r0
 800d8fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d8fc:	7bbb      	ldrb	r3, [r7, #14]
}
 800d8fe:	4618      	mov	r0, r3
 800d900:	3710      	adds	r7, #16
 800d902:	46bd      	mov	sp, r7
 800d904:	bd80      	pop	{r7, pc}

0800d906 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d906:	b580      	push	{r7, lr}
 800d908:	b084      	sub	sp, #16
 800d90a:	af00      	add	r7, sp, #0
 800d90c:	6078      	str	r0, [r7, #4]
 800d90e:	460b      	mov	r3, r1
 800d910:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d912:	2300      	movs	r3, #0
 800d914:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d916:	2300      	movs	r3, #0
 800d918:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d920:	78fa      	ldrb	r2, [r7, #3]
 800d922:	4611      	mov	r1, r2
 800d924:	4618      	mov	r0, r3
 800d926:	f7f7 f985 	bl	8004c34 <HAL_PCD_EP_Close>
 800d92a:	4603      	mov	r3, r0
 800d92c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d92e:	7bfb      	ldrb	r3, [r7, #15]
 800d930:	4618      	mov	r0, r3
 800d932:	f000 f90f 	bl	800db54 <USBD_Get_USB_Status>
 800d936:	4603      	mov	r3, r0
 800d938:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d93a:	7bbb      	ldrb	r3, [r7, #14]
}
 800d93c:	4618      	mov	r0, r3
 800d93e:	3710      	adds	r7, #16
 800d940:	46bd      	mov	sp, r7
 800d942:	bd80      	pop	{r7, pc}

0800d944 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d944:	b580      	push	{r7, lr}
 800d946:	b084      	sub	sp, #16
 800d948:	af00      	add	r7, sp, #0
 800d94a:	6078      	str	r0, [r7, #4]
 800d94c:	460b      	mov	r3, r1
 800d94e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d950:	2300      	movs	r3, #0
 800d952:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d954:	2300      	movs	r3, #0
 800d956:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d95e:	78fa      	ldrb	r2, [r7, #3]
 800d960:	4611      	mov	r1, r2
 800d962:	4618      	mov	r0, r3
 800d964:	f7f7 fa46 	bl	8004df4 <HAL_PCD_EP_SetStall>
 800d968:	4603      	mov	r3, r0
 800d96a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d96c:	7bfb      	ldrb	r3, [r7, #15]
 800d96e:	4618      	mov	r0, r3
 800d970:	f000 f8f0 	bl	800db54 <USBD_Get_USB_Status>
 800d974:	4603      	mov	r3, r0
 800d976:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d978:	7bbb      	ldrb	r3, [r7, #14]
}
 800d97a:	4618      	mov	r0, r3
 800d97c:	3710      	adds	r7, #16
 800d97e:	46bd      	mov	sp, r7
 800d980:	bd80      	pop	{r7, pc}

0800d982 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d982:	b580      	push	{r7, lr}
 800d984:	b084      	sub	sp, #16
 800d986:	af00      	add	r7, sp, #0
 800d988:	6078      	str	r0, [r7, #4]
 800d98a:	460b      	mov	r3, r1
 800d98c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d98e:	2300      	movs	r3, #0
 800d990:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d992:	2300      	movs	r3, #0
 800d994:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d99c:	78fa      	ldrb	r2, [r7, #3]
 800d99e:	4611      	mov	r1, r2
 800d9a0:	4618      	mov	r0, r3
 800d9a2:	f7f7 fa79 	bl	8004e98 <HAL_PCD_EP_ClrStall>
 800d9a6:	4603      	mov	r3, r0
 800d9a8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d9aa:	7bfb      	ldrb	r3, [r7, #15]
 800d9ac:	4618      	mov	r0, r3
 800d9ae:	f000 f8d1 	bl	800db54 <USBD_Get_USB_Status>
 800d9b2:	4603      	mov	r3, r0
 800d9b4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d9b6:	7bbb      	ldrb	r3, [r7, #14]
}
 800d9b8:	4618      	mov	r0, r3
 800d9ba:	3710      	adds	r7, #16
 800d9bc:	46bd      	mov	sp, r7
 800d9be:	bd80      	pop	{r7, pc}

0800d9c0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d9c0:	b480      	push	{r7}
 800d9c2:	b085      	sub	sp, #20
 800d9c4:	af00      	add	r7, sp, #0
 800d9c6:	6078      	str	r0, [r7, #4]
 800d9c8:	460b      	mov	r3, r1
 800d9ca:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d9d2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d9d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	da0c      	bge.n	800d9f6 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d9dc:	78fb      	ldrb	r3, [r7, #3]
 800d9de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d9e2:	68f9      	ldr	r1, [r7, #12]
 800d9e4:	1c5a      	adds	r2, r3, #1
 800d9e6:	4613      	mov	r3, r2
 800d9e8:	009b      	lsls	r3, r3, #2
 800d9ea:	4413      	add	r3, r2
 800d9ec:	00db      	lsls	r3, r3, #3
 800d9ee:	440b      	add	r3, r1
 800d9f0:	3302      	adds	r3, #2
 800d9f2:	781b      	ldrb	r3, [r3, #0]
 800d9f4:	e00b      	b.n	800da0e <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d9f6:	78fb      	ldrb	r3, [r7, #3]
 800d9f8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d9fc:	68f9      	ldr	r1, [r7, #12]
 800d9fe:	4613      	mov	r3, r2
 800da00:	009b      	lsls	r3, r3, #2
 800da02:	4413      	add	r3, r2
 800da04:	00db      	lsls	r3, r3, #3
 800da06:	440b      	add	r3, r1
 800da08:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800da0c:	781b      	ldrb	r3, [r3, #0]
  }
}
 800da0e:	4618      	mov	r0, r3
 800da10:	3714      	adds	r7, #20
 800da12:	46bd      	mov	sp, r7
 800da14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da18:	4770      	bx	lr

0800da1a <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800da1a:	b580      	push	{r7, lr}
 800da1c:	b084      	sub	sp, #16
 800da1e:	af00      	add	r7, sp, #0
 800da20:	6078      	str	r0, [r7, #4]
 800da22:	460b      	mov	r3, r1
 800da24:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800da26:	2300      	movs	r3, #0
 800da28:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800da2a:	2300      	movs	r3, #0
 800da2c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800da34:	78fa      	ldrb	r2, [r7, #3]
 800da36:	4611      	mov	r1, r2
 800da38:	4618      	mov	r0, r3
 800da3a:	f7f7 f870 	bl	8004b1e <HAL_PCD_SetAddress>
 800da3e:	4603      	mov	r3, r0
 800da40:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800da42:	7bfb      	ldrb	r3, [r7, #15]
 800da44:	4618      	mov	r0, r3
 800da46:	f000 f885 	bl	800db54 <USBD_Get_USB_Status>
 800da4a:	4603      	mov	r3, r0
 800da4c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800da4e:	7bbb      	ldrb	r3, [r7, #14]
}
 800da50:	4618      	mov	r0, r3
 800da52:	3710      	adds	r7, #16
 800da54:	46bd      	mov	sp, r7
 800da56:	bd80      	pop	{r7, pc}

0800da58 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800da58:	b580      	push	{r7, lr}
 800da5a:	b086      	sub	sp, #24
 800da5c:	af00      	add	r7, sp, #0
 800da5e:	60f8      	str	r0, [r7, #12]
 800da60:	607a      	str	r2, [r7, #4]
 800da62:	461a      	mov	r2, r3
 800da64:	460b      	mov	r3, r1
 800da66:	72fb      	strb	r3, [r7, #11]
 800da68:	4613      	mov	r3, r2
 800da6a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800da6c:	2300      	movs	r3, #0
 800da6e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800da70:	2300      	movs	r3, #0
 800da72:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800da74:	68fb      	ldr	r3, [r7, #12]
 800da76:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800da7a:	893b      	ldrh	r3, [r7, #8]
 800da7c:	7af9      	ldrb	r1, [r7, #11]
 800da7e:	687a      	ldr	r2, [r7, #4]
 800da80:	f7f7 f975 	bl	8004d6e <HAL_PCD_EP_Transmit>
 800da84:	4603      	mov	r3, r0
 800da86:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800da88:	7dfb      	ldrb	r3, [r7, #23]
 800da8a:	4618      	mov	r0, r3
 800da8c:	f000 f862 	bl	800db54 <USBD_Get_USB_Status>
 800da90:	4603      	mov	r3, r0
 800da92:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800da94:	7dbb      	ldrb	r3, [r7, #22]
}
 800da96:	4618      	mov	r0, r3
 800da98:	3718      	adds	r7, #24
 800da9a:	46bd      	mov	sp, r7
 800da9c:	bd80      	pop	{r7, pc}

0800da9e <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800da9e:	b580      	push	{r7, lr}
 800daa0:	b086      	sub	sp, #24
 800daa2:	af00      	add	r7, sp, #0
 800daa4:	60f8      	str	r0, [r7, #12]
 800daa6:	607a      	str	r2, [r7, #4]
 800daa8:	461a      	mov	r2, r3
 800daaa:	460b      	mov	r3, r1
 800daac:	72fb      	strb	r3, [r7, #11]
 800daae:	4613      	mov	r3, r2
 800dab0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dab2:	2300      	movs	r3, #0
 800dab4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dab6:	2300      	movs	r3, #0
 800dab8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800daba:	68fb      	ldr	r3, [r7, #12]
 800dabc:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800dac0:	893b      	ldrh	r3, [r7, #8]
 800dac2:	7af9      	ldrb	r1, [r7, #11]
 800dac4:	687a      	ldr	r2, [r7, #4]
 800dac6:	f7f7 f8fd 	bl	8004cc4 <HAL_PCD_EP_Receive>
 800daca:	4603      	mov	r3, r0
 800dacc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dace:	7dfb      	ldrb	r3, [r7, #23]
 800dad0:	4618      	mov	r0, r3
 800dad2:	f000 f83f 	bl	800db54 <USBD_Get_USB_Status>
 800dad6:	4603      	mov	r3, r0
 800dad8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800dada:	7dbb      	ldrb	r3, [r7, #22]
}
 800dadc:	4618      	mov	r0, r3
 800dade:	3718      	adds	r7, #24
 800dae0:	46bd      	mov	sp, r7
 800dae2:	bd80      	pop	{r7, pc}

0800dae4 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dae4:	b580      	push	{r7, lr}
 800dae6:	b082      	sub	sp, #8
 800dae8:	af00      	add	r7, sp, #0
 800daea:	6078      	str	r0, [r7, #4]
 800daec:	460b      	mov	r3, r1
 800daee:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800daf6:	78fa      	ldrb	r2, [r7, #3]
 800daf8:	4611      	mov	r1, r2
 800dafa:	4618      	mov	r0, r3
 800dafc:	f7f7 f91f 	bl	8004d3e <HAL_PCD_EP_GetRxCount>
 800db00:	4603      	mov	r3, r0
}
 800db02:	4618      	mov	r0, r3
 800db04:	3708      	adds	r7, #8
 800db06:	46bd      	mov	sp, r7
 800db08:	bd80      	pop	{r7, pc}
	...

0800db0c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800db0c:	b480      	push	{r7}
 800db0e:	b083      	sub	sp, #12
 800db10:	af00      	add	r7, sp, #0
 800db12:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800db14:	4b03      	ldr	r3, [pc, #12]	; (800db24 <USBD_static_malloc+0x18>)
}
 800db16:	4618      	mov	r0, r3
 800db18:	370c      	adds	r7, #12
 800db1a:	46bd      	mov	sp, r7
 800db1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db20:	4770      	bx	lr
 800db22:	bf00      	nop
 800db24:	2000024c 	.word	0x2000024c

0800db28 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800db28:	b480      	push	{r7}
 800db2a:	b083      	sub	sp, #12
 800db2c:	af00      	add	r7, sp, #0
 800db2e:	6078      	str	r0, [r7, #4]

}
 800db30:	bf00      	nop
 800db32:	370c      	adds	r7, #12
 800db34:	46bd      	mov	sp, r7
 800db36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db3a:	4770      	bx	lr

0800db3c <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800db3c:	b480      	push	{r7}
 800db3e:	b083      	sub	sp, #12
 800db40:	af00      	add	r7, sp, #0
 800db42:	6078      	str	r0, [r7, #4]
 800db44:	460b      	mov	r3, r1
 800db46:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800db48:	bf00      	nop
 800db4a:	370c      	adds	r7, #12
 800db4c:	46bd      	mov	sp, r7
 800db4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db52:	4770      	bx	lr

0800db54 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800db54:	b480      	push	{r7}
 800db56:	b085      	sub	sp, #20
 800db58:	af00      	add	r7, sp, #0
 800db5a:	4603      	mov	r3, r0
 800db5c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800db5e:	2300      	movs	r3, #0
 800db60:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800db62:	79fb      	ldrb	r3, [r7, #7]
 800db64:	2b03      	cmp	r3, #3
 800db66:	d817      	bhi.n	800db98 <USBD_Get_USB_Status+0x44>
 800db68:	a201      	add	r2, pc, #4	; (adr r2, 800db70 <USBD_Get_USB_Status+0x1c>)
 800db6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db6e:	bf00      	nop
 800db70:	0800db81 	.word	0x0800db81
 800db74:	0800db87 	.word	0x0800db87
 800db78:	0800db8d 	.word	0x0800db8d
 800db7c:	0800db93 	.word	0x0800db93
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800db80:	2300      	movs	r3, #0
 800db82:	73fb      	strb	r3, [r7, #15]
    break;
 800db84:	e00b      	b.n	800db9e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800db86:	2302      	movs	r3, #2
 800db88:	73fb      	strb	r3, [r7, #15]
    break;
 800db8a:	e008      	b.n	800db9e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800db8c:	2301      	movs	r3, #1
 800db8e:	73fb      	strb	r3, [r7, #15]
    break;
 800db90:	e005      	b.n	800db9e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800db92:	2302      	movs	r3, #2
 800db94:	73fb      	strb	r3, [r7, #15]
    break;
 800db96:	e002      	b.n	800db9e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800db98:	2302      	movs	r3, #2
 800db9a:	73fb      	strb	r3, [r7, #15]
    break;
 800db9c:	bf00      	nop
  }
  return usb_status;
 800db9e:	7bfb      	ldrb	r3, [r7, #15]
}
 800dba0:	4618      	mov	r0, r3
 800dba2:	3714      	adds	r7, #20
 800dba4:	46bd      	mov	sp, r7
 800dba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbaa:	4770      	bx	lr

0800dbac <__libc_init_array>:
 800dbac:	b570      	push	{r4, r5, r6, lr}
 800dbae:	4d0d      	ldr	r5, [pc, #52]	; (800dbe4 <__libc_init_array+0x38>)
 800dbb0:	4c0d      	ldr	r4, [pc, #52]	; (800dbe8 <__libc_init_array+0x3c>)
 800dbb2:	1b64      	subs	r4, r4, r5
 800dbb4:	10a4      	asrs	r4, r4, #2
 800dbb6:	2600      	movs	r6, #0
 800dbb8:	42a6      	cmp	r6, r4
 800dbba:	d109      	bne.n	800dbd0 <__libc_init_array+0x24>
 800dbbc:	4d0b      	ldr	r5, [pc, #44]	; (800dbec <__libc_init_array+0x40>)
 800dbbe:	4c0c      	ldr	r4, [pc, #48]	; (800dbf0 <__libc_init_array+0x44>)
 800dbc0:	f000 f820 	bl	800dc04 <_init>
 800dbc4:	1b64      	subs	r4, r4, r5
 800dbc6:	10a4      	asrs	r4, r4, #2
 800dbc8:	2600      	movs	r6, #0
 800dbca:	42a6      	cmp	r6, r4
 800dbcc:	d105      	bne.n	800dbda <__libc_init_array+0x2e>
 800dbce:	bd70      	pop	{r4, r5, r6, pc}
 800dbd0:	f855 3b04 	ldr.w	r3, [r5], #4
 800dbd4:	4798      	blx	r3
 800dbd6:	3601      	adds	r6, #1
 800dbd8:	e7ee      	b.n	800dbb8 <__libc_init_array+0xc>
 800dbda:	f855 3b04 	ldr.w	r3, [r5], #4
 800dbde:	4798      	blx	r3
 800dbe0:	3601      	adds	r6, #1
 800dbe2:	e7f2      	b.n	800dbca <__libc_init_array+0x1e>
 800dbe4:	0800dff8 	.word	0x0800dff8
 800dbe8:	0800dff8 	.word	0x0800dff8
 800dbec:	0800dff8 	.word	0x0800dff8
 800dbf0:	0800dffc 	.word	0x0800dffc

0800dbf4 <memset>:
 800dbf4:	4402      	add	r2, r0
 800dbf6:	4603      	mov	r3, r0
 800dbf8:	4293      	cmp	r3, r2
 800dbfa:	d100      	bne.n	800dbfe <memset+0xa>
 800dbfc:	4770      	bx	lr
 800dbfe:	f803 1b01 	strb.w	r1, [r3], #1
 800dc02:	e7f9      	b.n	800dbf8 <memset+0x4>

0800dc04 <_init>:
 800dc04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc06:	bf00      	nop
 800dc08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dc0a:	bc08      	pop	{r3}
 800dc0c:	469e      	mov	lr, r3
 800dc0e:	4770      	bx	lr

0800dc10 <_fini>:
 800dc10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc12:	bf00      	nop
 800dc14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dc16:	bc08      	pop	{r3}
 800dc18:	469e      	mov	lr, r3
 800dc1a:	4770      	bx	lr
